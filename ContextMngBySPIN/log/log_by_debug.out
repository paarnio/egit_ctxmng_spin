12:30:55 DEBUG JenaIOEnvironment    :: Failed to find configuration: location-mapping.ttl;location-mapping.rdf;location-mapping.n3;etc/location-mapping.rdf;etc/location-mapping.n3;etc/location-mapping.ttl
12:30:55 DEBUG StreamManager        :: open(http://spinrdf.org/spl)
12:30:55 DEBUG StreamManager        :: Not mapped: http://spinrdf.org/spl
12:30:56 DEBUG HttpOp               :: [1] GET http://spinrdf.org/spl
12:30:56 DEBUG PoolingClientConnectionManager :: Connection request: [route: {}->http://spinrdf.org][total kept alive: 0; route allocated: 0 of 5; total allocated: 0 of 10]
12:30:56 DEBUG PoolingClientConnectionManager :: Connection leased: [id: 0][route: {}->http://spinrdf.org][total kept alive: 0; route allocated: 1 of 5; total allocated: 1 of 10]
12:30:56 DEBUG DefaultClientConnectionOperator :: Connecting to spinrdf.org:80
12:30:56 DEBUG RequestAddCookies    :: CookieSpec selected: best-match
12:30:56 DEBUG RequestAuthCache     :: Auth cache not set in the context
12:30:56 DEBUG RequestTargetAuthentication :: Target auth state: UNCHALLENGED
12:30:56 DEBUG RequestProxyAuthentication :: Proxy auth state: UNCHALLENGED
12:30:56 DEBUG SystemDefaultHttpClient :: Attempt 1 to execute request
12:30:56 DEBUG DefaultClientConnection :: Sending request: GET /spl HTTP/1.1
12:30:56 DEBUG wire                 :: >> "GET /spl HTTP/1.1[\r][\n]"
12:30:56 DEBUG wire                 :: >> "Accept: text/turtle,application/n-triples;q=0.9,application/ld+json;q=0.8,application/rdf+xml;q=0.7,*/*;q=0.5[\r][\n]"
12:30:56 DEBUG wire                 :: >> "User-Agent: Apache-Jena-ARQ/2.11.2[\r][\n]"
12:30:56 DEBUG wire                 :: >> "Host: spinrdf.org[\r][\n]"
12:30:56 DEBUG wire                 :: >> "Connection: Keep-Alive[\r][\n]"
12:30:56 DEBUG wire                 :: >> "[\r][\n]"
12:30:56 DEBUG headers              :: >> GET /spl HTTP/1.1
12:30:56 DEBUG headers              :: >> Accept: text/turtle,application/n-triples;q=0.9,application/ld+json;q=0.8,application/rdf+xml;q=0.7,*/*;q=0.5
12:30:56 DEBUG headers              :: >> User-Agent: Apache-Jena-ARQ/2.11.2
12:30:56 DEBUG headers              :: >> Host: spinrdf.org
12:30:56 DEBUG headers              :: >> Connection: Keep-Alive
12:30:56 DEBUG wire                 :: << "HTTP/1.1 200 OK[\r][\n]"
12:30:56 DEBUG wire                 :: << "Date: Sun, 02 Aug 2015 09:30:57 GMT[\r][\n]"
12:30:56 DEBUG wire                 :: << "Server: Apache[\r][\n]"
12:30:56 DEBUG wire                 :: << "Last-Modified: Mon, 28 Jul 2014 03:05:21 GMT[\r][\n]"
12:30:56 DEBUG wire                 :: << "Accept-Ranges: bytes[\r][\n]"
12:30:56 DEBUG wire                 :: << "Content-Length: 240475[\r][\n]"
12:30:56 DEBUG wire                 :: << "Keep-Alive: timeout=3, max=100[\r][\n]"
12:30:56 DEBUG wire                 :: << "Connection: Keep-Alive[\r][\n]"
12:30:56 DEBUG wire                 :: << "Content-Type: text/plain[\r][\n]"
12:30:56 DEBUG wire                 :: << "[\r][\n]"
12:30:56 DEBUG DefaultClientConnection :: Receiving response: HTTP/1.1 200 OK
12:30:56 DEBUG headers              :: << HTTP/1.1 200 OK
12:30:56 DEBUG headers              :: << Date: Sun, 02 Aug 2015 09:30:57 GMT
12:30:56 DEBUG headers              :: << Server: Apache
12:30:56 DEBUG headers              :: << Last-Modified: Mon, 28 Jul 2014 03:05:21 GMT
12:30:56 DEBUG headers              :: << Accept-Ranges: bytes
12:30:56 DEBUG headers              :: << Content-Length: 240475
12:30:56 DEBUG headers              :: << Keep-Alive: timeout=3, max=100
12:30:56 DEBUG headers              :: << Connection: Keep-Alive
12:30:56 DEBUG headers              :: << Content-Type: text/plain
12:30:56 DEBUG SystemDefaultHttpClient :: Connection can be kept alive for 3000 MILLISECONDS
12:30:56 DEBUG StreamManager        :: Found: http://spinrdf.org/spl (LocatorHTTP)
12:30:57 DEBUG wire                 :: << "<"
12:30:57 DEBUG wire                 :: << "?"
12:30:57 DEBUG wire                 :: << "x"
12:30:57 DEBUG wire                 :: << "m"
12:30:57 DEBUG wire                 :: << "l"
12:30:57 DEBUG wire                 :: << " "
12:30:57 DEBUG wire                 :: << "v"
12:30:57 DEBUG wire                 :: << "e"
12:30:57 DEBUG wire                 :: << "r"
12:30:57 DEBUG wire                 :: << "s"
12:30:57 DEBUG wire                 :: << "i"
12:30:57 DEBUG wire                 :: << "o"
12:30:57 DEBUG wire                 :: << "n"
12:30:57 DEBUG wire                 :: << "="
12:30:57 DEBUG wire                 :: << """
12:30:57 DEBUG wire                 :: << "1"
12:30:57 DEBUG wire                 :: << "."
12:30:57 DEBUG wire                 :: << "0"
12:30:57 DEBUG wire                 :: << """
12:30:57 DEBUG wire                 :: << "?"
12:30:57 DEBUG wire                 :: << ">"
12:30:57 DEBUG wire                 :: << "[\r][\n]"
12:30:57 DEBUG wire                 :: << "<rdf:RDF[\r][\n]"
12:30:57 DEBUG wire                 :: << "    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    xmlns:afn="http://jena.hpl.hp.com/ARQ/function#"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    xmlns:spin="http://spinrdf.org/spin#"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    xmlns:fn="http://www.w3.org/2005/xpath-functions#"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    xmlns:sp="http://spinrdf.org/sp#"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    xmlns:owl="http://www.w3.org/2002/07/owl#"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    xmlns:xsd="http://www.w3.org/2001/XMLSchema#"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    xmlns:spl="http://spinrdf.org/spl#"[\r][\n]"
12:30:57 DEBUG wire                 :: << "  xml:base="http://spinrdf.org/spl">[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <owl:Ontology rdf:about="">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <owl:versionInfo rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >1.3.0</owl:versionInfo>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <owl:imports rdf:resource="http://spinrdf.org/spin"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >SPIN Standard Library</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >A collection of generally useful SPARQL functions (expressed as SPIN functions), and SPIN templates. Also provides a top-level classification of functions, and definitions of the standard SPARQL functions.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdf:type rdf:resource="http://spinrdf.org/spin#LibraryOntology"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </owl:Ontology>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="ConstraintTemplate">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#ConstructTemplate"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >Constraint template</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >Metaclass for CONSTRUCT templates that create spin:ConstraintViolations and can be used as values of spin:constraint.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="TestCase">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >Test case</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >A test to verify that a SPIN function or magic property works as expected, and to "
12:30:57 DEBUG wire                 :: << "generate documentation of example uses of the function. Each TestCase consists of a SPARQL function call or an expression that can be executed with spin:eval, and an expected result. The test framework only needs to execute spin:eval on the expression and compare it with the expected result.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >The test expression or SELECT query (anything that can be evaluated with spin:eval).</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spl:predicate>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          <rdf:Property rdf:ID="testExpression"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        </spl:predicate>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >The expected result of the test case, or nothing to indicate that an error is expected.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spl:predicate>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          <rdf:Property rdf:ID="testResult"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        </spl:predicate>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >true</spl:optional>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="UnionTemplate">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#Template"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >Union template</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >This type can be used for templates that serve as the union (or "collector") of other templates. Union templates differ from other templates in that all spl:Arguments are optional. This means that union templates can be declared as subclasses of multiple other templates, yet when instantiated, only some of the arguments defined by the superclasses need to be filled in.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <rdf:Property rdf:ID="instance">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.o"
12:30:57 DEBUG wire                 :: << "rg/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >instance</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="http://spinrdf.org/sp#ModuleCall"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <rdf:Property rdf:about="http://spinrdf.org/arg#property">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <rdf:Property rdf:ID="class">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >class</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <rdf:Property rdf:ID="count">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >count</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <rdf:Property rdf:about="#testExpression">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >test expression</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <rdf:Property rdf:ID="minCount">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#count"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <rdf:Property rdf:ID="valueType">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >value type</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <rdf:Property rdf:ID="maxCount">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#count"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <rdf:Property rdf:about="http://spinrdf.org/arg#max">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <rdf:Property rdf:about="http://spinrdf.org/arg#maxCount">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <rdf:Property rdf:about="#testResult">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >testResult</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <rdf:Property rdf:ID="predicate">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:label rdf:"
12:30:57 DEBUG wire                 :: << "datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >predicate</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <rdf:Property rdf:about="http://spinrdf.org/arg#minCount">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <rdf:Property rdf:about="http://spinrdf.org/arg#min">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <rdf:Property rdf:ID="defaultValue">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >default value</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <rdf:Property rdf:ID="optional">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >optional</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <rdf:Property rdf:about="http://spinrdf.org/arg#pattern">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <rdf:Property rdf:about="http://spinrdf.org/arg#otherProperty">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <spin:SelectTemplate rdf:ID="SPINOverview">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#SelectTemplates"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >SPIN Overview</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >Finds all constraints and rules attached to classes in the current graph, using spin:constraint, spin:constructor, spin:rule or their sub-properties. The result set will contain the associated class, the predicate, and the SPIN rule.</rdfs:commen"
12:30:57 DEBUG wire                 :: << "t>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:labelTemplate rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >SPIN Overview</spin:labelTemplate>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      <sp:Select>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <rdf:first>[\r][\n]"
12:30:57 DEBUG wire                 :: << "              <sp:Union>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <sp:elements rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <rdf:first>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      <sp:Bind>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <sp:variable rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          >bp</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        </sp:variable>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <sp:expression rdf:resource="http://spinrdf.org/spin#constraint"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      </sp:Bind>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    </rdf:first>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <rdf:first>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      <sp:Bind>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <sp:variable rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          >bp</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        </sp:variable>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <sp:expression rdf:resource="http://spinrdf.org/spin#constructor"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      </sp:Bind>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    </rdf:first>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <rdf:first>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      <sp:Bind>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <sp:variable rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3"
12:30:57 DEBUG wire                 :: << ".org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          >bp</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        </sp:variable>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <sp:expression rdf:resource="http://spinrdf.org/spin#rule"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      </sp:Bind>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    </rdf:first>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                </sp:elements>[\r][\n]"
12:30:57 DEBUG wire                 :: << "              </sp:Union>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            </rdf:first>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          <sp:TriplePath>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:path>[\r][\n]"
12:30:57 DEBUG wire                 :: << "              <sp:ModPath>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <sp:subPath rdf:resource="http://www.w3.org/2000/01/rdf-schema#subPropertyOf"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <sp:modMin rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                >0</sp:modMin>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <sp:modMax rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                >-2</sp:modMax>[\r][\n]"
12:30:57 DEBUG wire                 :: << "              </sp:ModPath>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            </sp:path>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "              >bp</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          </sp:TriplePath>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "              >class</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            </sp:predicate>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "              >rule</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "              <sp:ne>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <sp:arg2 rdf"
12:30:57 DEBUG wire                 :: << ":resource="http://spinrdf.org/spin#Modules"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  >class</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "              </sp:ne>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "              <sp:notExists>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <sp:elements rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      >rule</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    </sp:subject>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <sp:object>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      <spin:ConstructTemplate rdf:ID="Argument">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          <spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            >the property holding the values of each function call</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:predicate rdf:resource="#predicate"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          </spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        </spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        >Provides metadata about an argument of a SPIN Function or Template. Arguments wrap a given rdf:Property (predicate) and specify its value type and whether the argument is optional. When used as spin:constraint, the body of this template will verify that a non-optional value exists and that it has the specified value type. Arguments that have been declared spl:optional true become optional if the type of ?this is spl:UnionTemplate. </rdf"
12:30:57 DEBUG wire                 :: << "s:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        >Argument</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <spin:body>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          <sp:Construct>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                              <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                <rdf:first>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                  <sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                    <sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                      <sp:isIRI>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        <sp:arg1 rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                      </sp:isIRI>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                    </sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                  </sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                </rdf:first>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                              </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                              <sp:Union>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                <sp:elements rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                  <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                    <rdf:rest rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                      <sp:Bind>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        <sp:variable rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          <sp:varName rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          >label</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        </sp:variable>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        <sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          <sp:concat>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            <sp:arg2>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              <afn:localname>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  <sp:varName[\r][\n]"
12:30:57 DEBUG wire                 :: << "                           "
12:30:57 DEBUG wire                 :: << "                        rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  >predicate</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              </afn:localname>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            </sp:arg2>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            <sp:arg1>Missing value for argument </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          </sp:concat>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        </sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                      </sp:Bind>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                    </rdf:rest>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                    <rdf:first rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                      <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        <rdf:first>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          <sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            <sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              <sp:or>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                <sp:arg2>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  <sp:eq>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                    <sp:arg2 rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                    "http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                    >false</sp:arg2>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                    <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                      <sp:varName[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                       rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                      "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                      >optional</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                    </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  </sp:eq>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                </sp:arg2>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                <sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  <sp:not>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                    <sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                      <sp:bound>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                          <sp:varName[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                           rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                          "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                          >optional</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                        </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                      </sp:bound>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                    </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  </sp:not>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              </sp:or>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            </sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          </sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        </rdf:first>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                      </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                      <sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        <sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          <sp:notExists>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            <sp:elements rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  <sp:varName[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                   rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  "http://www.w3.org/20"
12:30:57 DEBUG wire                 :: << "01/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  >predicate</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                </sp:predicate>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  <sp:varName[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                   rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  >value</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                </sp:object>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            </sp:elements>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          </sp:notExists>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        </sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                      </sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                      <sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        <sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          <sp:notExists>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            <sp:elements rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  <sp:varName[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                   rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  >template</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                </sp:object>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              <sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            "
12:30:57 DEBUG wire                 :: << "                    <sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  <spl:instanceOf>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                    <sp:arg2 rdf:resource="#UnionTemplate"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                    <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                      <sp:varName[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                       rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                      "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                      >template</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                    </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  </spl:instanceOf>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                </sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              </sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            </sp:elements>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          </sp:notExists>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        </sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                      </sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                    </rdf:first>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                  </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                  <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                    <rdf:rest rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                      <sp:Bind>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        <sp:variable rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          <sp:varName rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          >label</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        </sp:variable>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        <sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          <sp:concat>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            <sp:arg5>)</sp:arg5>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            <sp:arg4>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              <afn:localname>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                               "
12:30:57 DEBUG wire                 :: << "                 <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  <sp:varName[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                   rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  >valueType</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              </afn:localname>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            </sp:arg4>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            <sp:arg3> (expected: </sp:arg3>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            <sp:arg2>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              <afn:localname>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  <sp:varName[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                   rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  >predicate</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              </afn:localname>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            </sp:arg2>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            <sp:arg1>Incorrect type of argument </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          </sp:concat>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        </sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                      </sp:Bind>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                    </rdf:rest>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                    <rdf:first rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                      <rdf:Description"
12:30:57 DEBUG wire                 :: << ">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        <rdf:first>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          <sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            <sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              <sp:bound>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  <sp:varName[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                   rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  >valueType</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              </sp:bound>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            </sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          </sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        </rdf:first>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                      </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                      <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          <sp:varName rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          >predicate</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        </sp:predicate>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          <sp:varName rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          >value</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        </sp:object>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                      </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                   "
12:30:57 DEBUG wire                 :: << "   <sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        <sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          <sp:and>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            <sp:arg2>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              <sp:or>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                <sp:arg2>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  <sp:isLiteral>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                    <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                      <sp:varName[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                       rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                      "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                      >value</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                    </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  </sp:isLiteral>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                </sp:arg2>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                <sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  <sp:ne>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                    <sp:arg2 rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                    <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                      <sp:varName[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                       rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                      "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                      >valueType</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                    </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  </sp:ne>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              </sp:or>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            </sp:arg2>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            <sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              <sp:not>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                <"
12:30:57 DEBUG wire                 :: << "sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  <spl:instanceOf>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                    <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                      <sp:varName[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                       rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                      "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                      >valueType</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                    </sp:arg2>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                    <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                      <sp:varName[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                       rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                      "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                      >value</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                    </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  </spl:instanceOf>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              </sp:not>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          </sp:and>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        </sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                      </sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                    </rdf:first>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                  </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                </sp:elements>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                              </sp:Union>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            </sp:where>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <sp:templates rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                              <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                <sp:subject rdf:nodeID="A0"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                <sp:object rdf:resource="http://spinrdf.org/spin#ConstraintViolation"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "   "
12:30:57 DEBUG wire                 :: << "                           </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                              <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                <sp:subject rdf:nodeID="A0"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                <sp:predicate rdf:resource="http://spinrdf.org/spin#violationRoot"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                <sp:object rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                              </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                              <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                <sp:subject rdf:nodeID="A0"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                <sp:predicate rdf:resource="http://spinrdf.org/spin#violationPath"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                  >predicate</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                </sp:object>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                              </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                              <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                <sp:subject rdf:nodeID="A0"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                <sp:predicate rdf:resource="http://www.w3.org/2000/01/rdf-schema#label"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                  >label</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                </sp:object>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                              </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            </sp:templates>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          </sp:Construct>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        </spin:body>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          <spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            >indicates whether the argument is optional</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:predicate rdf:resource="#option"
12:30:57 DEBUG wire                 :: << "al"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            >true</spl:optional>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          </spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        </spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          <spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            >the default value for the argument</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:predicate rdf:resource="#defaultValue"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            >true</spl:optional>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          </spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        </spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <spin:labelTemplate rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        >Argument {?predicate} : {?valueType}</spin:labelTemplate>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#ConstructTemplates"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          <spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            >the value type of the argument</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:predicate rdf:resource="#valueType"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            >true</spl:optional>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          </spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        </spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          <spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            >a comment describing the argument</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            "
12:30:57 DEBUG wire                 :: << "                <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:predicate rdf:resource="http://www.w3.org/2000/01/rdf-schema#comment"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            >true</spl:optional>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          </spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        </spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      </spin:ConstructTemplate>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    </sp:object>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                </sp:elements>[\r][\n]"
12:30:57 DEBUG wire                 :: << "              </sp:notExists>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "              <sp:notExists>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <sp:elements rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      >rule</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    </sp:subject>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <sp:object>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      <spin:ConstructTemplate rdf:ID="Attribute">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          <spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <rdfs:comment>the default value of the attribute</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:predicate rdf:resource="#defaultValue"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            >true</spl:optional>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          </spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        </spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <rdfs:comment>Defines an "attribute" of a class. Attribute definitions bundle common modeling patterns known from object-oriented languages like UML. Each attribute can have min and max cardinality, a value type and a default value. The attribute links a class wi"
12:30:57 DEBUG wire                 :: << "th one RDF property. This template should be used as spin:constraints on a class to make sure that classes meet the expected cardinalities and valueType constraints.[\n]"
12:30:57 DEBUG wire                 :: << "If a model wants to use spl:defaultValue, then it should instantiate the spl:ConstructDefaultValues as a spin:constructor at some root class, such as rdfs:Resource.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          <spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <rdfs:comment>a comment describing the meaning of this attribute</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:predicate rdf:resource="http://www.w3.org/2000/01/rdf-schema#comment"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            >true</spl:optional>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          </spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        </spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#ConstructTemplates"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        >Attribute</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <spin:body>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          <sp:Construct>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                              <sp:Union>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                <sp:elements rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                  <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                    <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                    <rdf:first>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                      <sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        <sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          <sp:and>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            <sp:arg2>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              <sp:lt>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                <sp:arg2 rdf:parseType="Reso"
12:30:57 DEBUG wire                 :: << "urce">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  <sp:varName[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                   rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  >minCount</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                </sp:arg2>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                <sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  <spl:objectCount>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                    <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                      <sp:varName[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                       rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                      "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                      >predicate</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                    </sp:arg2>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                    <sp:arg1 rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  </spl:objectCount>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              </sp:lt>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            </sp:arg2>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            <sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              <sp:bound>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  <sp:varName[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                   rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  >minCount</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              </sp:bound>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          </sp:and>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                   "
12:30:57 DEBUG wire                 :: << "                     </sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                      </sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                    </rdf:first>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                  </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                  <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                    <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                    <rdf:first>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                      <sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        <sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          <sp:and>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            <sp:arg2>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              <sp:gt>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  <sp:varName[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                   rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  >maxCount</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                </sp:arg2>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                <sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  <spl:objectCount>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                    <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                      <sp:varName[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                       rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                      "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                      >predicate</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                    </sp:arg2>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                    <sp:arg1 rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  </spl:objectCount>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              </sp:gt>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          "
12:30:57 DEBUG wire                 :: << "  </sp:arg2>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            <sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              <sp:bound>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  <sp:varName[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                   rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  >maxCount</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              </sp:bound>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          </sp:and>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        </sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                      </sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                    </rdf:first>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                  </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                  <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                    <rdf:rest rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                      <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          <sp:varName rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          >predicate</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        </sp:predicate>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          <sp:varName rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          >value</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        </sp:object>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                      </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                      <sp:Filter"
12:30:57 DEBUG wire                 :: << ">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        <sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          <sp:not>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            <sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              <spl:instanceOf>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  <sp:varName[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                   rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  >valueType</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                </sp:arg2>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  <sp:varName[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                   rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                  >value</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                                </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              </spl:instanceOf>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          </sp:not>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        </sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                      </sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                    </rdf:rest>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                    <rdf:first>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                      <sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        <sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                          <sp:bound>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              <sp:varName rdf:datatype=[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                              >valueType</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                            </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                 "
12:30:57 DEBUG wire                 :: << "                         </sp:bound>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                        </sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                      </sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                    </rdf:first>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                  </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                </sp:elements>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                              </sp:Union>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            </sp:where>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <sp:templates rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                              <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                <sp:subject rdf:nodeID="A1"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                <sp:object rdf:resource="http://spinrdf.org/spin#ConstraintViolation"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                              </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      "
12:30:57 DEBUG wire                 :: << "        <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                <sp:subject rdf:nodeID="A1"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                <sp:predicate rdf:resource="http://spinrdf.org/spin#violationRoot"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                <sp:object rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                              </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                              <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                <sp:subject rdf:nodeID="A1"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                <sp:predicate rdf:resource="http://spinrdf.org/spin#violationPath"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                  >predicate</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                                </sp:object>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                              </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            </sp:templates>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          </sp:Construct>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        </spin:body>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          <spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <rdfs:comment>the maximum number of values permitted for the property</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:predicate rdf:resource="#maxCount"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            >true</spl:optional>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          </spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        </spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <spin:labelTemplate rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        >Attribute {?predicate} : {?valueType} [{?minCount},{?maxCount}]</spin:labelTemplate>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          <spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <rdfs:comment>the RDF property holding the attribute value</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:valueTyp"
12:30:57 DEBUG wire                 :: << "e rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:predicate rdf:resource="#predicate"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          </spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        </spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          <spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <rdfs:comment>the type that all values of the property must have</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:predicate rdf:resource="#valueType"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            >true</spl:optional>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          </spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        </spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          <spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <rdfs:comment>the minimum number of values permitted for the property</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:predicate rdf:resource="#minCount"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                            >true</spl:optional>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          </spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        </spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      </spin:ConstructTemplate>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    </sp:object>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                </sp:elements>[\r][\n]"
12:30:57 DEBUG wire                 :: << "              </sp:notExists>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <sp:resultVariables rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "            >class</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#str"
12:30:57 DEBUG wire                 :: << "ing"[\r][\n]"
12:30:57 DEBUG wire                 :: << "            >property</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "            >rule</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        </sp:resultVariables>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      </sp:Select>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </spin:SelectTemplate>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <spl:TestCase rdf:ID="Test-instanceOf-rdfsClassInheritance">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spl:testResult rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >true</spl:testResult>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spl:testExpression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      <spl:instanceOf>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <sp:arg2 rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <sp:arg1 rdf:resource="http://www.w3.org/2002/07/owl#Restriction"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      </spl:instanceOf>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    </spl:testExpression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </spl:TestCase>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <spin:MagicProperty rdf:ID="relevantPropertyAtClass">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#MagicProperties"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >relevant property at class</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >A magic property that establishes a relationship between properties (left) and classes (right) to determine which properties are "relevant" for the class. Relevant means that they have the class in their domain and/or restrictions, including superclasses and sub-properties (unless they define their own domain). Domains consisting of an owl:unionOf are also handled.[\n]"
12:30:57 DEBUG wire                 :: << "[\n]"
12:30:57 DEBUG wire                 :: << "Note that the performance of the body of this magic property has been optimized for the case in which the class is given, so ideally use this for queries such as  ?property spl:relevantPropertyAtClass skos:Concept .</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >The property.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Propert"
12:30:57 DEBUG wire                 :: << "y"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      <sp:Select>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "          <sp:TriplePath>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "              >class</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:path>[\r][\n]"
12:30:57 DEBUG wire                 :: << "              <sp:ModPath>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <sp:subPath rdf:resource="http://www.w3.org/2000/01/rdf-schema#subClassOf"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <sp:modMin rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                >0</sp:modMin>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <sp:modMax rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                >-2</sp:modMax>[\r][\n]"
12:30:57 DEBUG wire                 :: << "              </sp:ModPath>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            </sp:path>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "              >superClass</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          </sp:TriplePath>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          <sp:Union>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:elements rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "              <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <rdf:first rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    >property</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  </sp:subject>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  <sp:predicate rdf:resource="http://www.w3.org/2000/01/rdf-schema#domain"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    >superClass</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  </sp:object>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                </rdf:first>[\r][\n]"
12:30:57 DEBUG wire                 :: << "              </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "              <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syn"
12:30:57 DEBUG wire                 :: << "tax-ns#nil"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <rdf:first rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    >superClass</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  </sp:subject>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  <sp:predicate rdf:resource="http://www.w3.org/2002/07/owl#onProperty"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    >property</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  </sp:object>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                </rdf:first>[\r][\n]"
12:30:57 DEBUG wire                 :: << "              </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "              <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <rdf:rest rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  <sp:TriplePath>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      >list</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    </sp:subject>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <sp:path>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      <sp:ModPath>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <sp:subPath rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#rest"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <sp:modMin rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        >0</sp:modMin>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <sp:modMax rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        >-2</sp:modMax>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      </sp:ModPath>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    </sp:path>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      >listSegment</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    </sp:object>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  </sp:TriplePath>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  <sp:TriplePath>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      >property</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    </sp:subjec"
12:30:57 DEBUG wire                 :: << "t>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <sp:path>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      <sp:SeqPath>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <sp:path2 rdf:resource="http://www.w3.org/2002/07/owl#unionOf"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <sp:path1 rdf:resource="http://www.w3.org/2000/01/rdf-schema#domain"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      </sp:SeqPath>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    </sp:path>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      >list</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    </sp:object>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  </sp:TriplePath>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                </rdf:rest>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <rdf:first rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    >listSegment</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  </sp:subject>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#first"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    >superClass</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  </sp:object>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                </rdf:first>[\r][\n]"
12:30:57 DEBUG wire                 :: << "              </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            </sp:elements>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          </sp:Union>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          <sp:TriplePath>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:subject rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:path>[\r][\n]"
12:30:57 DEBUG wire                 :: << "              <sp:ModPath>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <sp:subPath rdf:resource="http://www.w3.org/2000/01/rdf-schema#subPropertyOf"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <sp:modMin rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                >0</sp:modMin>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <sp:modMax rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                >-2</sp:modMax>[\r][\n]"
12:30:57 DEBUG wire                 :: << "              </sp:ModPath>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            </sp:path>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      "
12:30:57 DEBUG wire                 :: << "      </sp:object>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          </sp:TriplePath>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "              <sp:or>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <sp:arg2>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  <sp:notExists>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <sp:elements rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <sp:subject rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <sp:predicate rdf:resource="http://www.w3.org/2000/01/rdf-schema#domain"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                          >anyDomain</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                        </sp:object>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    </sp:elements>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  </sp:notExists>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                </sp:arg2>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  <sp:eq>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      >property</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    </sp:arg2>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <sp:arg1 rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  </sp:eq>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "              </sp:or>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "              <sp:isIRI>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  >class</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "              </sp:isIRI>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <sp:resultVariables rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "            >class</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        </sp:resultVariables>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <sp:distinct rdf:datatype="http://www.w3.org/2001"
12:30:57 DEBUG wire                 :: << "/XMLSchema#boolean"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >true</sp:distinct>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      </sp:Select>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </spin:MagicProperty>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <spin:ConstructTemplate rdf:ID="InferDefaultValue">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#ConstructTemplates"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >Infer default value</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >Can be used to infer default values for a given subject/predicate combination. This is typically assigned as spin:rule to a class. If ?this does not already have a value for a given property {?predicate}, then this will infer the value {?defaultValue}.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:labelTemplate rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >Default value for {?predicate}: {?defaultValue}</spin:labelTemplate>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >The predicate to infer the default value of.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spl:predicate rdf:resource="#predicate"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >The default value to infer.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spl:predicate rdf:resource="#defaultValue"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      <sp:Construct>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "          <sp:Optional>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:elements rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "              <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  >predicate</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                </sp:predicate>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <sp:object r"
12:30:57 DEBUG wire                 :: << "df:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  >anyValue</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                </sp:object>[\r][\n]"
12:30:57 DEBUG wire                 :: << "              </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            </sp:elements>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          </sp:Optional>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "              <sp:not>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  <sp:bound>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                      >anyValue</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                    </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  </sp:bound>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "              </sp:not>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <sp:templates rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "              >predicate</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            </sp:predicate>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "              >defaultValue</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        </sp:templates>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      </sp:Construct>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </spin:ConstructTemplate>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#coalesce">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      <spin:Function rdf:ID="MiscFunctions">[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#Functions"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >Misc functions</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >A collection of functions that are difficult to categorize.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >true<"
12:30:57 DEBUG wire                 :: << "/spin:abstract>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      </spin:Function>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >COALESCE</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >Takes any number of arguments, and returns the first bound argument, starting at the left.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >COALESCE</spin:symbol>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#rand">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      <spin:Function rdf:ID="MathematicalFunctions">[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#Functions"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >Mathematical functions</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >A collection of functions operating on numbers.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >true</spin:abstract>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      </spin:Function>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#idp3722352"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >rand</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >Returns a number between 0 (inclusive) and 1.0e0 (exclusive). Different numbers can be produced every time this function is invoked. Numbers should be produced with approximately equal probability.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >RAND</spin:symbol>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#double"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#year">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      <spin:Function rdf:ID="DateFunctions">[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#Functions"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:label rdf:datatype="http://www.w3.org/2001/"
12:30:57 DEBUG wire                 :: << "XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >Date functions</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >A collection of functions that operate on date/time literals.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >true</spin:abstract>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      </spin:Function>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >year</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >Extracts the year from a date/time literal.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >year</spin:symbol>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >The date or dateTime argument.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <spin:Function rdf:ID="objectInGraph">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      <spin:Function rdf:ID="OntologyFunctions">[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#Functions"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >Ontology functions</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >A collection of functions performing ontology-related operations.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >true</spin:abstract>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      </spin:Function>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >object in graph</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >Gets the object of a given sub"
12:30:57 DEBUG wire                 :: << "ject (?arg1) / predicate (?arg2) combination in a given graph ?arg3. Note that if multiple values are present then the result might be unpredictably random.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >The graph to query in.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg3"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >The predicate to get the object of.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >The subject to get the object from.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      <sp:Select>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "          <sp:NamedGraph>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:graphNameNode rdf:resource="http://spinrdf.org/spin#_arg3"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:elements rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "              <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <sp:subject rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <sp:predicate rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "                  >object</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "                </sp:object>[\r][\n]"
12:30:57 DEBUG wire                 :: << "              </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            </sp:elements>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          </sp:NamedGra"
12:30:57 DEBUG wire                 :: << "ph>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <sp:resultVariables rdf:parseType="Collection">[\r][\n]"
12:30:57 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "            >object</sp:varName>[\r][\n]"
12:30:57 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        </"
12:30:57 DEBUG wire                 :: << "sp:resultVariables>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      </sp:Select>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#round">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MathematicalFunctions"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-round"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >round</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >Returns the number with no fractional part that is closest to the argument. If there are two such numbers, then the one that is closest to positive infinity is returned. An error is raised if ?arg1 is not a numeric value.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >round</spin:symbol>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >The number to round.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#strlen">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      <spin:Function rdf:ID="StringFunctions">[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#Functions"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >String functions</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >A collection of functions that return strings.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >true</spin:abstract>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      </spin:Function>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-strlen"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >strlen</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >Computes the length of a given input string.</rdfs:c"
12:30:57 DEBUG wire                 :: << "omment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >STRLEN</spin:symbol>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >The input string.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <spl:TestCase rdf:ID="Test-instanceOf-untypedString">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spl:testResult rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >true</spl:testResult>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spl:testExpression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      <spl:instanceOf>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <sp:arg2 rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <sp:arg1>test</sp:arg1>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      </spl:instanceOf>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    </spl:testExpression>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </spl:TestCase>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#strends">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-ends"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >strends</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >Returns true if the lexical form of ?arg1 ends with the lexical form of ?arg2, otherwise it returns false.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >STRENDS</spin:symbol>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >The sub-string that the input string is supposed to end with.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    </spin:const"
12:30:57 DEBUG wire                 :: << "raint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >The input string.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:57 DEBUG wire                 :: << "  <spin:Function rdf:ID="hasValueOfType">[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      <spin:Function rdf:ID="BooleanFunctions">[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#Functions"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >Boolean functions</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >A collection of functions that return a boolean value (true or false).</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >true</spin:abstract>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      </spin:Function>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "    >hasValueOfType</rdfs:label>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <rdfs:comment>Checks whether a given subject (?arg1) has at least one value of a given type (?arg3) for a given property (?arg2) or one of its sub-properties.</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >the type to match against</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg3"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:57 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:57 DEBUG wire                 :: << "        >the expected property</rdfs:comment>[\r][\n]"
12:30:57 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:30:57 DEBUG wire                 :: << "     "
12:30:58 DEBUG wire                 :: << "   <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >the subject that is expected to have the value</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:Ask>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:TriplePath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >p</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:path>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:ModPath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:subPath rdf:resource="http://www.w3.org/2000/01/rdf-schema#subPropertyOf"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:modMin rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                >0</sp:modMin>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:modMax rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                >-2</sp:modMax>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:ModPath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:path>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:TriplePath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >p</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:predicate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >value</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <spl:instanceOf>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg2 rdf:resource="http://spinrdf.org/spin#_arg3"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg1 rdf:parse"
12:30:58 DEBUG wire                 :: << "Type="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  >value</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </spl:instanceOf>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </sp:Ask>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:SelectTemplate rdf:ID="AllArguments">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#SelectTemplates"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >All arguments</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Gets a list of all spl:Arguments declared at a given class and its superclasses.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:labelTemplate rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >All spl:Arguments of {?class}</spin:labelTemplate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The class to get the arguments of.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="#class"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:Select>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:TriplePath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >class</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:path>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:ModPath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:subPath rdf:resource="http://www.w3.org/2000/01/rdf-schema#subClassOf"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:modMin rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                >0</sp:modMin>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:modMax rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                >-2</sp:modMax>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:ModPath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:path>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "             "
12:30:58 DEBUG wire                 :: << " <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >atClass</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:TriplePath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >atClass</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#constraint"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >arg</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >arg</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:resource="#Argument"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:resultVariables rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "            >arg</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "            >atClass</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:resultVariables>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </sp:Select>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:SelectTemplate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#sha1">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MiscFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-sha1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >sha1</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Returns the SHA1 checksum, as a hex digit string, calculated on the UTF-8 repres"
12:30:58 DEBUG wire                 :: << "entation of the simple literal or lexical form of the xsd:string. Hex digits SHOULD be in lower case.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >SHA1</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The input literal.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spl:ConstraintTemplate rdf:ID="RegexPropertyConstraint">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:ConstraintTemplate rdf:ID="PropertyConstraintTemplates">[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:subClassOf>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <spl:ConstraintTemplate rdf:ID="ConstraintTemplates">[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#ConstructTemplates"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "            >Constraint templates</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "            >Abstract superclass of templates that can be used as spin:constraints. The subclasses are expected to construct spin:ConstraintViolations and use ?this to talk about the instances of the associated class.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:58 DEBUG wire                 :: << "            >true</spin:abstract>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </spl:ConstraintTemplate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </rdfs:subClassOf>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >Property constraint templates</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >Abstract superclass of constraint templates that constrain exactly one property.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "            >The property being constrai"
12:30:58 DEBUG wire                 :: << "ned.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <spl:predicate rdf:resource="http://spinrdf.org/arg#property"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >true</spin:abstract>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:ConstraintTemplate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Regex property constraint</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:labelTemplate rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Values of {?property} must match the regular expression {?pattern}</spin:labelTemplate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The regular expression to match.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/arg#pattern"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:Construct>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:predicate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >object</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:not>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:regex>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      >pattern</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <"
12:30:58 DEBUG wire                 :: << "/sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      <xsd:string>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          >object</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      </xsd:string>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  </sp:regex>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:not>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:Bind>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:variable rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >message</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:variable>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:concat>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg5>"</sp:arg5>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg4 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  >pattern</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:arg4>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg3> must match the regular expression "</sp:arg3>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  >object</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg1>Value </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:concat>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:Bind>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:templates rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#ConstraintViolation"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#violationRoot"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Descriptio"
12:30:58 DEBUG wire                 :: << "n>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#violationPath"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/2000/01/rdf-schema#label"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >message</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:templates>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </sp:Construct>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spl:ConstraintTemplate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#tz">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#DateFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-tz"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >tz</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Returns the timezone part of ?arg1 as a simple literal. Returns the empty string if there is no timezone.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >TZ</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#now">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#DateFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >now</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Gets the current date and time as an xsd:dateTime literal.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >now</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#dateTime"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spl:Test"
12:30:58 DEBUG wire                 :: << "Case rdf:ID="Test-instanceOf-lingualString">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spl:testResult rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >true</spl:testResult>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spl:testExpression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:instanceOf>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:arg2 rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:arg1 xml:lang="en">test</sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:instanceOf>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spl:testExpression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spl:TestCase>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spl:TestCase rdf:ID="Test-object-noValue">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spl:testExpression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:arg2 rdf:resource="http://www.w3.org/2002/07/owl#versionInfo"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:arg1 rdf:resource="http://www.w3.org/2002/07/owl#versionInfo"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spl:testExpression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spl:TestCase>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#str">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >str</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment>Returns the lexical form of ?arg1 (a literal); returns the codepoint representation of ?arg1 (an IRI). This is useful for examining parts of an IRI, for instance, the host-name.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >str</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment>the node to convert to string</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#ceil">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MathematicalFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-ceil"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >ceil</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Returns the smallest (closest to negative infinity) number with no fractional part that is not less than the v"
12:30:58 DEBUG wire                 :: << "alue of arg. An error is raised if ?arg1 is not a numeric value.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >ceil</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The number to get the ceiling of.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:ID="hasValue">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >hasValue</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment>Checks whether a given resource (?arg1) has a given value (?arg3) for a given property (?arg2) or one of the sub-properties of it.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >the expected value</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg3"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >the property that is expected to hold the value</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >the subject that is expected to have the value</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:Ask"
12:30:58 DEBUG wire                 :: << ">[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:TriplePath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >p</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:path>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:ModPath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:subPath rdf:resource="http://www.w3.org/2000/01/rdf-schema#subPropertyOf"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:modMin rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                >0</sp:modMin>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:modMax rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                >-2</sp:modMax>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:ModPath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:path>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:TriplePath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >p</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:predicate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_arg3"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </sp:Ask>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#floor">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MathematicalFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-floor"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >floor</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Returns the largest (closest to positive infinity) number with no fractional part that is not greater than the value of ?arg1. An error is raised if ?arg1 is not a numeric value.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >floor</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w"
12:30:58 DEBUG wire                 :: << "3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The value to get the floor of.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#timezone">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#DateFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-timezone"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >timezone</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Returns the timezone part of ?arg1 as an xsd:dayTimeDuration. Raises an error if there is no timezone.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >TIMEZONE</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#duration"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The input time.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#dateTime"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#in">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >IN</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Checks whether the value on the left (?arg1) is one of the values on the right (?arg2, ?arg3 ...).</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >IN</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The value to find.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:pred"
12:30:58 DEBUG wire                 :: << "icate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#strstarts">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-starts"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >strstarts</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Returns true if the lexical form of ?arg1 begins with the lexical form of ?arg2, otherwise it returns false.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >STRSTARTS</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The sub-string that the input string is supposed to begin with.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The input string.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#ge">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >ge</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment>Returns true if ?arg1 &gt;= ?arg2.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >&gt;=</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSche"
12:30:58 DEBUG wire                 :: << "ma#boolean"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment>the second operand</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment>the first operand</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:ID="hasArgument">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >has argument</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Checks if a given module class (?module) has at least one declared spl:Argument.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The module class to check.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://spinrdf.org/spin#Module"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="#class"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "     "
12:30:58 DEBUG wire                 :: << " <sp:Ask>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:TriplePath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >class</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:path>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:ModPath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:subPath rdf:resource="http://www.w3.org/2000/01/rdf-schema#subClassOf"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:modMin rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                >0</sp:modMin>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:modMax rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                >-2</sp:modMax>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:ModPath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:path>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >superClass</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:TriplePath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >superClass</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#constraint"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >con</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >con</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:resource="#Argument"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </sp:Ask>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:ID="subject">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#OntologyFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label r"
12:30:58 DEBUG wire                 :: << "df:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >subject</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Gets the "first" subject of a given predicate (?arg1)/object (?arg2) combination. Note that if multiple values are present then the result might be unpredictably random.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The object.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The predicate.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:Select>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >subject</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:resultVariables rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "            >subject</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:resultVariables>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </sp:Select>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#isURI">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >isURI</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:commen"
12:30:58 DEBUG wire                 :: << "t>Checks whether a node is a URI.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >isURI</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment>the node to check</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#hours">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#DateFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >hours</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Extracts the hours from a date/time literal.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >hours</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The dateTime or time argument.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spl:TestCase rdf:ID="Test-instanceOf-typedString">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spl:testResult rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >true</spl:testResult>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spl:testExpression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:instanceOf>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:arg2 rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:arg1 rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >test</sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:instanceOf>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spl:testExpression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spl:TestCase>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#unaryPlus">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MathematicalFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#s"
12:30:58 DEBUG wire                 :: << "tring"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >unary plus</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment>Returns the operand ?arg1 with the sign unchanged. Semantically, this operation performs no operation.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >+</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment>the operand</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#minutes">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#DateFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >minutes</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Extracts the minutes from a date/time literal.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >minutes</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The dateTime or time argument.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#replace">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The replacement string.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg3"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.o"
12:30:58 DEBUG wire                 :: << "rg/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The input string.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The pattern to replace.[\n]"
12:30:58 DEBUG wire                 :: << "</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Replaces each non-overlapping occurrence of a regular expression pattern with a replacement string. Regular expession matching may involve modifier flags.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >Additional flags for the replacement.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg4"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >true</spl:optional>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-replace"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >replace</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >REPLACE</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#notIn">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >NOT IN</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment"
12:30:58 DEBUG wire                 :: << " rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Checks whether the value on the left (?arg1) is none of the values on the right (?arg2, ?arg3 ...).</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >NOT IN</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The value to find.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#strafter">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-strafter"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >strafter</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Returns a literal of the same kind (simple literal, plain literal same language tag, xsd:string) as the first argument arg1. The lexical form of the result is the substring of the value of arg1 that proceeds in arg1 the first occurrence of the lexical form of arg2; otherwise the lexical form of the result is the empty string. If the lexical form of arg2 is the empty string, the lexical form of the result is the emprty string.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >STRAFTER</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The pattern to find within the input string.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The input string.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#sha384">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MiscFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-sha384"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >sha384</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Returns the SHA384 checksum, as a hex digit string, calculated on the UTF-8 representation of the simple literal or lexical form of the xsd:string. Hex digits SHOULD be in lower case.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >SHA384</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The input literal.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#lang">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >lang</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment>Returns the language tag of ?arg1, if it has one. It returns "" if the literal has no language tag. Node that the RDF data model does not include literals with an empty language tag.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >lang</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XM"
12:30:58 DEBUG wire                 :: << "LSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment>the literal to get the language of</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#md5">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MiscFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-md5"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >md5</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Returns the MD5 checksum, as a hex digit string, calculated on the UTF-8 representation of the simple literal or lexical form of the xsd:string. Hex digits SHOULD be in lower case.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >MD5</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The input literal.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#sha256">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MiscFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-sha256"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >sha256</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Returns the SHA256 checksum, as a hex digit string, calculated on the UTF-8 representation of the simple literal or lexical form of the xsd:string. Hex digits SHOULD be in lower case.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r]"
12:30:58 DEBUG wire                 :: << "[\n]"
12:30:58 DEBUG wire                 :: << "    >SHA256</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The input literal.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#strbefore">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-strbefore"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >strbefore</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Returns a literal of the same kind (simple literal, plain literal same language tag, xsd:string) as the first argument arg1. The lexical form of the result is the substring of the value of arg1 that precedes in arg1 the first occurrence of the lexical form of arg2; otherwise the lexical form of the result is the empty string. If the lexical form of arg2 is the empty string, the lexical form of the result is the emprty string.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >STRBEFORE</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The pattern to find within the input string.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The input string.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchem"
12:30:58 DEBUG wire                 :: << "a#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spl:ConstraintTemplate rdf:ID="ExistencePropertyPairConstraint">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:ConstraintTemplate rdf:ID="PropertyPairConstraintTemplates">[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:subClassOf rdf:resource="#PropertyConstraintTemplates"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >Property pair constraint templates</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >Abstract base class for templates that take two properties as arguments and establish a relationship between them.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "            >The "other" property.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <spl:predicate rdf:resource="http://spinrdf.org/arg#otherProperty"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >true</spin:abstract>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:ConstraintTemplate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Existence property pair constraint</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:labelTemplate rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >The property {?property} must have a value whenever {?otherProperty} has a value</spin:labelTemplate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:Construct>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:exists>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:elements rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "        "
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      >otherProperty</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    </sp:predicate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      >someValue</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:elements>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:exists>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:notExists>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:elements rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      >property</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    </sp:predicate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      >object</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:elements>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:notExists>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:Bind>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:variable rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >message</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:variable>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:concat>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg3> has</sp:arg3>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  >otherProperty</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg1>Property must have a value because </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:conc"
12:30:58 DEBUG wire                 :: << "at>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:Bind>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:templates rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A3"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#ConstraintViolation"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A3"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#violationRoot"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A3"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#violationPath"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A3"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/2000/01/rdf-schema#label"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >message</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:templates>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </sp:Construct>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spl:ConstraintTemplate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#strlang">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-strlang"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >strlang</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Takes a string (?arg1) and a language (?arg2) and constructs a literal with a corresponding language tag.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol"
12:30:58 DEBUG wire                 :: << " rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >STRLANG</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The language tag, e.g. "en-AU".</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The string value.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#lcase">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-lcase"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >LCASE</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Converts a string to lower case characters.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >LCASE</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The input string.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spl:TestCase rdf:ID="Test-instanceOf-typedString-false">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spl:testResult rdf:datatype="http://ww"
12:30:58 DEBUG wire                 :: << "w.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >false</spl:testResult>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spl:testExpression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:instanceOf>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:arg2 rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:arg1 rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >test</sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:instanceOf>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spl:testExpression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spl:TestCase>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#uri">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#OntologyFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >URI</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Equivalent to IRI.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >URI</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The IRI string to convert to a resource.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#le">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >le</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment>Returns true if ?arg1 &lt;= ?arg2.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >&lt;=</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment>the second operand</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>"
12:30:58 DEBUG wire                 :: << "[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment>the first operand</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#bnode">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#OntologyFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-bnode"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >bnode</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Constructs a blank node that is distinct from all blank nodes in the dataset being queried and distinct from all blank nodes created by calls to this constructor for other query solutions. If the no argument form is used, every call results in a distinct blank node. If the form with a simple literal is used, every call results in distinct blank nodes for different simple literals, and the same blank node for calls with the same simple literal within expressions for one solution mapping. This functionality is compatible with the treatment of blank nodes in SPARQL CONSTRUCT templates.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >BNODE</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >A literal input node.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >true</spl:optional>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:ID="min">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MathematicalFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >min</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSche"
12:30:58 DEBUG wire                 :: << "ma#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Takes two arguments and returns the smaller one of them.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The second argument.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The first argument.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:Select>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:Bind>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:variable rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >result</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:variable>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:if>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg3 rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg2 rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:lt>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg2 rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg1 rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  </sp:lt>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:if>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:Bind>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:resultVariables rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "            >result</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:resultVariables>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </sp:Se"
12:30:58 DEBUG wire                 :: << "lect>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#struuid">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >struuid</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Returns a string that is the scheme specific part of UUID. That is, as a simple literal, the result of generating a UUID, converting to a simple literal and removing the initial urn:uuid:.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >STRUUID</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:ID="max">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MathematicalFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >max</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Takes two arguments and returns the larger one of them.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The second argument.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The first argument.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:Select>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:Bind>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:variable rdf:pa"
12:30:58 DEBUG wire                 :: << "rseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >result</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:variable>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:if>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg3 rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg2 rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:gt>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg2 rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg1 rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  </sp:gt>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:if>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:Bind>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:resultVariables rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "            >result</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:resultVariables>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </sp:Select>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#seconds">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#DateFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >seconds</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Extracts the seconds from a date/time literal.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >seconds</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The dateTime or time argument.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:ID="subPropertyOf">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClass"
12:30:58 DEBUG wire                 :: << "Of rdf:resource="#OntologyFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >sub property of</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Checks whether a given property (?arg1) is a (transitive) sub-property of another property (?arg2).</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The potential super-property.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The potential sub-property.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "     "
12:30:58 DEBUG wire                 :: << " </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:Ask>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:TriplePath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:path>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:ModPath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:subPath rdf:resource="http://www.w3.org/2000/01/rdf-schema#subPropertyOf"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:modMin rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                >0</sp:modMin>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:modMax rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                >-2</sp:modMax>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:ModPath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:path>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:TriplePath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </sp:Ask>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spl:ConstraintTemplate rdf:ID="RangePropertyConstraint">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#PropertyConstraintTemplates"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Range property constraint</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Represents a constraint that narrows down a property by a minimum and maximum value compared by &lt;= and &gt;=.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:labelTemplate rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Values of {?property} must be within the interval [ {?min} , {?max} ]</spin:labelTemplate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The minimum value.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/arg#min"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >true</spl:optional>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSch"
12:30:58 DEBUG wire                 :: << "ema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The maximum value.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/arg#max"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >true</spl:optional>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:Construct>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:predicate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >object</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:or>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:and>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      <sp:gt>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          >max</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        </sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          >object</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      </sp:gt>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    </sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      <sp:bound>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          >max</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      </sp:bound>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    "
12:30:58 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  </sp:and>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:and>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      <sp:lt>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          >min</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        </sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          >object</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      </sp:lt>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    </sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      <sp:bound>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          >min</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      </sp:bound>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  </sp:and>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:or>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:Bind>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:variable rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >message</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:variable>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:concat>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg7>]</sp:arg7>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg6 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  >max</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:arg6>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg5>, </sp:arg5>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg4 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  >min</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:arg4>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg3> must be in the interva"
12:30:58 DEBUG wire                 :: << "l [</sp:arg3>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  >object</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg1>Value </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:concat>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:Bind>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:templates rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A4"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#ConstraintViolation"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A4"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#violationRoot"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A4"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#violationPath"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A4"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/2000/01/rdf-schema#label"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >message</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:templates>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </sp:Construct>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >true</spin:abstract>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spl:ConstraintTemplate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:ID="subClassOf">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#OntologyFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://ww"
12:30:58 DEBUG wire                 :: << "w.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >sub class of</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Checks whether a given class (?arg1) is a (transitive) sub-class of another class (?arg2).</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The potential super-class.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The potential sub-class.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:Ask>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:TriplePath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:path>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:ModPath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:subPath rdf:resource="http://www.w3.org/2000/01/rdf-schema#subClassOf"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:modMin rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                >0</sp:modMin>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:modMax rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                >-2</sp:modMax>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:ModPath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:path>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:TriplePath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </sp:Ask>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#divide">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MathematicalFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#s"
12:30:58 DEBUG wire                 :: << "tring"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >divide</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment>Returns the arithmetic quotient of its operands.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >/</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment>the second operand</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment>the first operand</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#isNumeric">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-isNumeric"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >is numeric</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Returns true if arg1 is a numeric value. Returns false otherwise. term is numeric if it has an appropriate datatype (see the section Operand Data Types) and has a valid lexical form, making it a valid argument to functions and operators taking numeric arguments.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >isNumeric</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The node to check whether it's numeric.[\n]"
12:30:58 DEBUG wire                 :: << "</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http"
12:30:58 DEBUG wire                 :: << "://spinrdf.org/sp#day">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#DateFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >day</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Extracts the day from a date/time literal.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >day</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The date or dateTime argument.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spl:ConstraintTemplate rdf:ID="ObjectCountPropertyConstraint">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:ConstraintTemplate rdf:ID="CountPropertyConstraintTemplates">[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:subClassOf rdf:resource="#PropertyConstraintTemplates"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >Count property constraint templates</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >Abstract superclass of property constraints that compare the number of values with either min or max count.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "            >The minimum number of values that the property must have.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <spl:predicate rdf:resource="http://spinrdf.org/arg#minCount"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:58 DEBUG wire                 :: << "            >true</spl:optional>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spin:constr"
12:30:58 DEBUG wire                 :: << "aint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "            >The maximum number of values that the property must have.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <spl:predicate rdf:resource="http://spinrdf.org/arg#maxCount"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:58 DEBUG wire                 :: << "            >true</spl:optional>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >true</spin:abstract>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:ConstraintTemplate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Object count property constraint</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Represents a constraint that can be attached to a class to specify that a given property must have between min and max values.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:labelTemplate rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >The property {?property} must have between {?minCount} and {?maxCount} values</spin:labelTemplate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:Construct>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:Bind>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:variable rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >objectCount</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:variable>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <spl:objectCount>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  >property</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg1 rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </spl:objectCount>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:Bind>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          "
12:30:58 DEBUG wire                 :: << "    <sp:or>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:and>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      <sp:gt>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          >maxCount</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        </sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          >objectCount</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      </sp:gt>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    </sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      <sp:bound>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          >maxCount</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      </sp:bound>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  </sp:and>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:and>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      <sp:lt>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          >minCount</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        </sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          >objectCount</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      </sp:lt>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    </sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      <sp:bound>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          >minCount</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "         "
12:30:58 DEBUG wire                 :: << "               </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      </sp:bound>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  </sp:and>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:or>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:Bind>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:variable rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >message</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:variable>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:concat>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  >objectCount</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg1>Invalid number of values: </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:concat>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:Bind>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:templates rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A5"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#ConstraintViolation"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A5"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#violationRoot"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A5"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#violationPath"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A5"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/2000/01/rdf-schema#label"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resour"
12:30:58 DEBUG wire                 :: << "ce">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >message</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:templates>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </sp:Construct>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spl:ConstraintTemplate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#unaryMinus">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MathematicalFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >unary minus</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment>Returns the operand ?arg1 with the sign reversed. If ?arg1 is positive, its negative is returned; if it is negative, its positive is returned.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >-</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment>the operand</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#iri">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#OntologyFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >IRI</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Creates a IRI resource (node) from a given IRI string (?arg1).</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >IRI</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The IRI string to convert to a resource.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spl:ConstraintTemplate rdf:ID="UntypedObjectPropertyConstraint">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#PropertyConstraintTemplates"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Untyped object property constraint</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >A generic SPIN template that can be used to declare a constraint that all values of a given property must have an rdf:type.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:labelTemplate rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Values of {?property} must have a type</spin:labelTemplate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:Construct>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:predicate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >object</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:notExists>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:elements rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      >object</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    </sp:subject>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      >anyType</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:elements>[\r][\n]"
12:30:58 DEBUG wire                 :: << "     "
12:30:58 DEBUG wire                 :: << "         </sp:notExists>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:Bind>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:variable rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >message</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:variable>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:concat>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg3> must have a type</sp:arg3>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  >object</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg1>Value </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:concat>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:Bind>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:templates rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A6"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#ConstraintViolation"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A6"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#violationRoot"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A6"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#violationPath"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A6"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/2000/01/rdf-schema#label"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >message</sp:varNa"
12:30:58 DEBUG wire                 :: << "me>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:templates>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </sp:Construct>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spl:ConstraintTemplate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spl:TestCase rdf:ID="Test-instanceOf-rdfsLiteral">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spl:testResult rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >true</spl:testResult>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spl:testExpression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:instanceOf>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:arg2 rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:arg1 rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >test</sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:instanceOf>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spl:testExpression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spl:TestCase>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spl:TestCase rdf:ID="Test-instanceOf-rdfsClass">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spl:testResult rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >true</spl:testResult>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spl:testExpression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:instanceOf>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:arg2 rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:arg1 rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:instanceOf>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spl:testExpression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spl:TestCase>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#month">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#DateFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >month</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Extracts the month from a date/time literal.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >month</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The date or dateTime argument.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#encode_for_uri">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >encode_for_uri</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >ENCODE_FOR_URI</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The string to convert.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spl:TestCase rdf:ID="Test-object-labelOfArgument">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spl:testResult rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Argument</spl:testResult>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spl:testExpression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:Select>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:NamedGraph>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:graphNameNode rdf:resource=""/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:elements rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:Bind>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:variable rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  >value</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:variable>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <spl:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg2 rdf:resource="http://www.w3.org/2000/01/rdf-schema#label"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg1 rdf:resource="#Argument"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  </spl:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:Bind>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:elements>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:NamedGraph>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:resultVariables rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "            >value</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:resultVariables>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </sp:Select>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spl:testExpression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spl:TestCase>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#ucase">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-ucase"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >UCASE</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Converts a string to upper case characters.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >UCASE</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The input string.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#mul">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MathematicalFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >mul</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment>Returns the arithmetic product of its operands.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >*</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment>the second operand</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment>the first operand</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:ConstructT"
12:30:58 DEBUG wire                 :: << "emplate rdf:ID="ConstructDefaultValues">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#ConstructTemplates"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Construct default values</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment>This template can be attached as spin:constructor to a root class such as rdfs:Resource to ensure that SPIN processors assign default values to certain properties. Looks for any templates attached as spin:constraints to the types of ?this and then assigns their declared spl:defaultValues.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:labelTemplate rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Construct default values</spin:labelTemplate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:Construct>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >directType</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:TriplePath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >directType</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:path>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:ModPath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:subPath rdf:resource="http://www.w3.org/2000/01/rdf-schema#subClassOf"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:modMin rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                >0</sp:modMin>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:modMax rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                >-2</sp:modMax>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:ModPath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:path>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >type</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      "
12:30:58 DEBUG wire                 :: << "      </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:TriplePath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >type</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#constraint"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >attribute</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >attribute</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="#defaultValue"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >defaultValue</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >attribute</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="#predicate"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >predicate</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:templates rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >predicate</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:predicate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:v"
12:30:58 DEBUG wire                 :: << "arName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >defaultValue</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:templates>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </sp:Construct>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:ConstructTemplate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:SelectTemplate rdf:ID="RunTestCases">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#SelectTemplates"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Run test cases</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Runs all spl:TestCases on the current model.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:Select>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >testCase</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="#testExpression"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >expr</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:Optional>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:elements rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  >testCase</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:subject>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:predicate rdf:resource="#testResult"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  >expected</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:elements>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:Optional>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:Bind>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:variable rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XM"
12:30:58 DEBUG wire                 :: << "LSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >actual</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:variable>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <spin:eval>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  >expr</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </spin:eval>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:Bind>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:or>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:and>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      <sp:ne>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          >expected</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        </sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          >actual</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      </sp:ne>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    </sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      <sp:bound>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          >expected</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      </sp:bound>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  </sp:and>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:ne>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      <sp:bound>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          >actual</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      </sp:bound>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    </sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "         "
12:30:58 DEBUG wire                 :: << "             <sp:bound>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          >expected</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      </sp:bound>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  </sp:ne>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:or>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:resultVariables rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "            >testCase</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "            >expected</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "            >actual</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:resultVariables>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </sp:Select>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:SelectTemplate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spl:TestCase rdf:ID="Test-instanceOf-rdfsClass-false">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spl:testResult rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >false</spl:testResult>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spl:testExpression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:instanceOf>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:arg2 rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:arg1 rdf:resource="http://www.w3.org/2002/07/owl#versionInfo"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:instanceOf>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spl:testExpression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spl:TestCase>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#substr">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The start index.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:d"
12:30:58 DEBUG wire                 :: << "atatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Gets the sub-string of a given string. The index of the first character is 1.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The input string.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The end index.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg3"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "     "
12:30:58 DEBUG wire                 :: << "   <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >true</spl:optional>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >substr</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >SUBSTR</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-substr"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spl:TestCase rdf:ID="Test-instanceOf-rdfsLiteral-false">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spl:testResult rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >false</spl:testResult>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spl:testExpression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:instanceOf>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:arg2 rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:arg1 rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:instanceOf>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spl:testExpression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spl:TestCase>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:ID="objectSubProp">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#OntologyFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >object sub prop</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Gets the object of a given subject (?arg1) / predicate (?arg2) combination, also taking the sub-properties of ?arg2 into account. Note that if multiple values are present then the result might be unpredictably random.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The predicate to get the object of (including sub-properties of it).</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:data"
12:30:58 DEBUG wire                 :: << "type="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The subject to get the object from.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:Select>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:TriplePath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:path>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:ModPath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:subPath rdf:resource="http://www.w3.org/2000/01/rdf-schema#subPropertyOf"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:modMin rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                >0</sp:modMin>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:modMax rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                >-2</sp:modMax>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:ModPath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:path>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:TriplePath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:predicate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >object</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:resultVariables rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "            >object</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:resultVariables>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </sp:Select>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:"
12:30:58 DEBUG wire                 :: << "about="http://spinrdf.org/sp#sub">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MathematicalFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >sub</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment>Returns the arithmetic difference of its operands.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >-</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment>the second operand</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment>the first operand</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:ID="subjectCount">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#OntologyFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >subjectCount</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Gets the number of values of a given property (?arg1) at a given object (?arg2). The result is the number of matches of (?subject, ?arg1, ?arg2).</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >the object to get the number of subjects of</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >the predicate to get the number of subjects of</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueTy"
12:30:58 DEBUG wire                 :: << "pe rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:Select>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >subject</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:resultVariables rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "            >result</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:Count>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:expression rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  >subject</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:Count>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:resultVariables>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </sp:Select>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spl:ConstraintTemplate rdf:ID="NonExistencePropertyPairConstraint">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#PropertyPairConstraintTemplates"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Non-existence property pair constraint</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:labelTemplate rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >The property {?property} must have no values as long as {?otherProperty} has none</spin:labelTemplate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:Construct>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:notExists>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:elements rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "     "
12:30:58 DEBUG wire                 :: << "             <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      >otherProperty</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    </sp:predicate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      >someValue</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:elements>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:notExists>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:exists>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:elements rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      >property</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    </sp:predicate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      >object</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:elements>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:exists>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:Bind>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:variable rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >message</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:variable>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:concat>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg3> has none</sp:arg3>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSch"
12:30:58 DEBUG wire                 :: << "ema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  >otherProperty</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg1>Property must have no values because </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:concat>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:Bind>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:templates rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A7"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#ConstraintViolation"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A7"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#violationRoot"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A7"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#violationPath"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A7"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/2000/01/rdf-schema#label"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "              >message</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:templates>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </sp:Construct>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spl:ConstraintTemplate>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#abs">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MathematicalFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-abs"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >abs</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3"
12:30:58 DEBUG wire                 :: << ".org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Returns the absolute value of arg. An error is raised if arg is not a numeric value.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >abs</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The input value.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#add">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MathematicalFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >add</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment>Returns the arithmetic sum of its operands.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >+</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment>the second number</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment>the first number</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#sha512">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MiscFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-sha512"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >sha512</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Returns the SHA512 checksum, as a hex digit string, calculated on the UTF-8 representation of the simple literal or lexical form"
12:30:58 DEBUG wire                 :: << " of the xsd:string. Hex digits SHOULD be in lower case.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >SHA512</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The input literal.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#UUID">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spin:Function rdf:ID="URIFunctions">[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#Functions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >URI functions</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >A collection of functions that create URI resources.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >true</spin:abstract>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >UUID</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Returns a fresh IRI from the UUID URN scheme. Each call of UUID() returns a different UUID. It must not be the "nil" UUID (all zeroes). The variant and version of the UUID is implementation dependent.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >UUID</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#langMatches">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >langMatches</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment>Returns true if language-ta"
12:30:58 DEBUG wire                 :: << "g (first argument) matches language-range (second argument) per the basic filtering scheme defined in [RFC4647] section 3.3.1.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >langMatches</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment>the language tag that ?arg1 must have</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment>the literal that is expected to have ?arg2 as language tag</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#strdt">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#OntologyFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-strdt"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >strdt</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Constructs a literal with lexical form and type as specified by the arguments.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >STRDT</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The datatype of the new literal.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Datatype"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http:"
12:30:58 DEBUG wire                 :: << "//www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The lexical form of the new literal.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#contains">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-contains"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >contains</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Returns an xsd:boolean indicating whether or not the value of ?arg1 contains (at the beginning, at the end, or anywhere within) at least one sequence of collation units that provides a minimal match to the collation units in the value of ?arg2, according to the collation that is used.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >CONTAINS</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The sub-string to search for in the input string.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The input string.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:ID="isUntypedLiteral">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#stri"
12:30:58 DEBUG wire                 :: << "ng"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >isUntypedLiteral</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment>Checks whether a given literal is untyped. This function was introduced because the built-in datatype operand in SPARQL casts untyped literals to xsd:string, making it impossible to check it this way. This function here uses a work-around using sameTerm instead.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The literal to test.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:Ask>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:and>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:not>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      <sp:sameTerm>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        <sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          <xsd:string>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                            <sp:arg1 rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          </xsd:string>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        </sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        <sp:arg1 rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      </sp:sameTerm>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  </sp:not>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:isLiteral>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg1 rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  </sp:isLiteral>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:and>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </sp:Ask>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <sp:isIRI rdf:nodeID="A8">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <sp:arg1 rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </sp:isIRI>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A9">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment>the input string</rdfs"
12:30:58 DEBUG wire                 :: << ":comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <rdf:Description rdf:about="http://spinrdf.org/spin#eval">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The expression to evaluate. Should be a sp:Select, sp:Ask, a sp:Variable or an instance of a SPARQL function class, but may also be a simple RDF value.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <sp:eq rdf:nodeID="A10">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <sp:arg2 rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <sp:arg1 rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </sp:eq>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#if">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MiscFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >IF</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >The SPARQL 1.1 built-in function IF.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >IF</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The function result if ?arg1 is false.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg3"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >The function result if ?arg1 is true.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >A condition to evaluate - if t"
12:30:58 DEBUG wire                 :: << "rue then the ?arg2 will be returned, otherwise ?arg3.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A11">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment>the second operand</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <sp:TriplePath rdf:nodeID="A12">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <sp:subject rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "      >class</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </sp:subject>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <sp:path>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:ModPath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:subPath rdf:resource="http://www.w3.org/2000/01/rdf-schema#subClassOf"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:modMin rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >0</sp:modMin>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:modMax rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >-2</sp:modMax>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </sp:ModPath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </sp:path>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <sp:object rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </sp:TriplePath>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <rdf:Description rdf:nodeID="A13">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >object</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A14">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment>the first operand</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A15">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment>the second operand</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <rdf:Description rdf:nodeID="A16">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdf:first>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:Filter>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:or>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:and>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "               "
12:30:58 DEBUG wire                 :: << "   <sp:eq>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg2 rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg1 rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  </sp:eq>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:or>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      <sp:eq>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          >datatype</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        </sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        <sp:arg1 rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#langString"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      </sp:eq>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    </sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      <sp:not>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        <sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          <sp:bound>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                            <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                              >datatype</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                            </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                          </sp:bound>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                        </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      </sp:not>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  </sp:or>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:and>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:arg2>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <sp:or>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg2 rdf:nodeID="A10"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:eq>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg2 rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "                      >datatype</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  </sp:eq>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "              </sp:or>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            </sp:arg1>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          </sp:or>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </sp:Filter>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </rdf:first>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </rdf:Description>"
12:30:58 DEBUG wire                 :: << "[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <sp:datatype rdf:nodeID="A17">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <sp:arg1 rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </sp:datatype>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <rdf:Description rdf:nodeID="A18">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdf:first rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "      >object</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </rdf:first>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <rdf:Description rdf:nodeID="A19">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >class</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <rdf:Description rdf:nodeID="A20">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdf:first rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:subject rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:predicate rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:object rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "        >object</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </sp:object>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </rdf:first>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <rdf:Description rdf:nodeID="A21">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >object</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <rdf:Description rdf:nodeID="A22">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdf:first rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "      >result</sp:varName>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:Count>[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:expression rdf:nodeID="A21"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        </sp:Count>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </sp:expression>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </rdf:first>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A23">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >The predicate to get the object of.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <rdf:Description rdf:nodeID="A24">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    "
12:30:58 DEBUG wire                 :: << "<rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdf:first rdf:parseType="Resource">[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:subject rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:predicate rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:object rdf:nodeID="A13"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </rdf:first>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A25">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment>the node being checked</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#not">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >not</rdfs:label>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <rdfs:comment>Returns the boolean negation of the argument.</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >!</spin:symbol>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <rdfs:comment>the operand to negate</rdfs:comment>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  <spin:Function rdf:ID="instanceOf">[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <owl:versionInfo rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:58 DEBUG wire                 :: << "    >Note that in TopBraid this function has been implemented in native Java code, for performance reasons.</owl:versionInfo>[\r][\n]"
12:30:58 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:30:58 DEBUG wire                 :: << "      <sp:Ask>[\r][\n]"
12:30:58 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "          <sp:Union>[\r][\n]"
12:30:58 DEBUG wire                 :: << "            <sp:elements rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "              <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                <rdf:rest rdf:parseType="Collection">[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <sp:TriplePath rdf:nodeID="A12"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                  <rdf:Description>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:subject rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "                    <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:30:58 DEBUG wire                 :: << "  "
12:30:59 DEBUG wire                 :: << "                  <sp:object rdf:nodeID="A19"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                  </rdf:Description>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                </rdf:rest>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                <rdf:first rdf:parseType="Collection">[\r][\n]"
12:30:59 DEBUG wire                 :: << "                  <sp:Filter>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                    <sp:expression>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                      <sp:or>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                        <sp:arg2>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                          <sp:isBlank>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                            <sp:arg1 rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                          </sp:isBlank>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                        </sp:arg2>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                        <sp:arg1 rdf:nodeID="A8"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                      </sp:or>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                    </sp:expression>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                  </sp:Filter>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                </rdf:first>[\r][\n]"
12:30:59 DEBUG wire                 :: << "              </rdf:Description>[\r][\n]"
12:30:59 DEBUG wire                 :: << "              <rdf:Description>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                <rdf:rest rdf:parseType="Resource">[\r][\n]"
12:30:59 DEBUG wire                 :: << "                  <rdf:rest rdf:nodeID="A16"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                  <rdf:first>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                    <sp:Bind>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                      <sp:variable rdf:parseType="Resource">[\r][\n]"
12:30:59 DEBUG wire                 :: << "                        <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "                        >datatype</sp:varName>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                      </sp:variable>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                      <sp:expression rdf:nodeID="A17"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                    </sp:Bind>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                  </rdf:first>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                </rdf:rest>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                <rdf:first rdf:parseType="Collection">[\r][\n]"
12:30:59 DEBUG wire                 :: << "                  <sp:Filter>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                    <sp:expression>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                      <sp:isLiteral>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                        <sp:arg1 rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                      </sp:isLiteral>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                    </sp:expression>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                  </sp:Filter>[\r][\n]"
12:30:59 DEBUG wire                 :: << "                </rdf:first>[\r][\n]"
12:30:59 DEBUG wire                 :: << "              </rdf:Description>[\r][\n]"
12:30:59 DEBUG wire                 :: << "            </sp:elements>[\r][\n]"
12:30:59 DEBUG wire                 :: << "          </sp:Union>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      </sp:Ask>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <rdfs:comment>the type that the instance must have</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <"
12:30:59 DEBUG wire                 :: << "spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment>Checks whether a given resource (?arg1) has a given type (?arg2). In order to fulfill this condition, there must either be a triple ?arg1 rdf:type ?arg2, or ?instance rdf:type ?subClass where ?subClass is a subclass of ?arg2. If the first argument is a literal, then the second argument must be the matching XSD datatype.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:labelTemplate rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >{?arg1} instance of {?arg2}</spin:labelTemplate>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <rdfs:comment>the instance being tested</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >instanceOf</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <sp:Select rdf:nodeID="A26">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <sp:where rdf:nodeID="A20"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <sp:resultVariables rdf:nodeID="A18"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </sp:Select>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A27">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >The subject to get the object from.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A28">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >the subject to get the number of objects of</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#lt">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:re"
12:30:59 DEBUG wire                 :: << "source="#BooleanFunctions"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >lt</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment>Returns true if ?arg1 &lt; ?arg2.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >&lt;</spin:symbol>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A11"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <rdfs:comment>the first operand</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#eq">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >eq</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment>Returns true if both arguments are equal.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >=</spin:symbol>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <rdfs:comment>the second value to compare</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <rdfs:comment>the first value to compare</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#notExists">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >NOT EXISTS</rdfs:la"
12:30:59 DEBUG wire                 :: << "bel>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >The filter function NOT EXISTS. The graph pattern is stored in sp:elements.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >NOT EXISTS</spin:symbol>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#concat">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >concat</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >The CONCAT built-in function. Creates a single string by concatenating all arguments from left to right. Note that if any one of the arguments is unbound (null) then the whole result string will be unbound.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >CONCAT</spin:symbol>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A29">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment>the node being tested</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A30">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment>the first operand</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#isIRI">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >isIRI</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment>Checks whether a given node is a IRI node.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >isIRI</spin:symbol>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "     "
12:30:59 DEBUG wire                 :: << "   <rdfs:comment>the node being tested</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A31">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment>the first operand of the intersection</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A32">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment>the property to get the number of values of</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A33">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment>the first argument</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#datatype">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#OntologyFunctions"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >datatype</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment>Returns the datatype IRI of argument ?arg1; returns xsd:string if the parameter is a simple literal.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >datatype</spin:symbol>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <rdfs:comment>the literal to get the datatype of</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#gt">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >gt</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment>Returns true if ?arg1 &gt; arg2"
12:30:59 DEBUG wire                 :: << ".</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >&gt;</spin:symbol>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A15"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A30"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A34">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment>the flags</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg3"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >true</spl:optional>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#ne">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >ne</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment>Returns true if ?arg1 != ?arg2.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >!=</spin:symbol>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <rdfs:comment>the second operand</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A14"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spin:Function rdf:ID="object">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <owl:versionInfo rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >Note that in TopBraid this function has been implemented in native Java code, for performance reasons.</owl:versionInfo>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#OntologyFunctions"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >object</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >Gets the object of a given subject (?arg1) / predicate (?arg2) combination. Note that if multiple values are present then the result might be unpredictably random.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint rdf:node"
12:30:59 DEBUG wire                 :: << "ID="A23"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A27"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:body rdf:nodeID="A26"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#bound">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >bound</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment>Returns true if ?arg1 is bound to a value. Returns false otherwise. Variables with the value NaN or INF are considered bound.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >bound</spin:symbol>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <rdfs:comment>the variable or expression that is checked</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spin:Function rdf:ID="objectCount">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#OntologyFunctions"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >objectCount</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment>Gets the number of values of a given property (?arg2) at a given subject (?arg1). The result is the number of matches of (?arg1, ?arg2, ?object).</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A32"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A28"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      <sp:Select>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <sp:where rdf:nodeID="A24"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <sp:resultVariables rdf:nodeID="A22"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      </sp:Select>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A35">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment>the match pattern</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A36">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment>the second operand of the intersection</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spl:valueType rdf:resource="http://w"
12:30:59 DEBUG wire                 :: << "ww.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#regex">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A9"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment>Returns true if a string (?arg1) matches the regular expression supplied as a pattern (?arg2) as influenced by the value of flags (?arg3), otherwise returns false.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-regex"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A34"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A35"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >regex</spin:symbol>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >regex</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#and">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >and</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment>Return the logical AND between two (boolean) operands.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >&amp;&amp;</spin:symbol>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A36"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A31"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A37">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment>the second operand</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#isBlank">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >isBlank</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment>Checks whether a given node is a blank node.<"
12:30:59 DEBUG wire                 :: << "/rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >isBlank</spin:symbol>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A25"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#or">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >or</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment>Returns the logical OR between two (boolean) operands"
12:30:59 DEBUG wire                 :: << ".</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >||</spin:symbol>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A37"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <rdfs:comment>the first operand</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A38">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment>the second argument</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#sameTerm">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-sameTerm"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >same term</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >Returns TRUE if ?arg1 and ?arg2 are the same RDF term as defined in Resource Description Framework (RDF): Concepts and Abstract Syntax; returns FALSE otherwise.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >sameTerm</spin:symbol>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A38"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A33"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#exists">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >EXISTS</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >The filter function EXISTS. The graph pattern is stored in sp:elements.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >EXISTS</spin:sym"
12:30:59 DEBUG wire                 :: << "bol>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#isLiteral">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >isLiteral</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment>Checks whether a given node is a literal.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >isLiteral</spin:symbol>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A29"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:30:59 DEBUG wire                 :: << "</rdf:RDF>[\r][\n]"
12:30:59 DEBUG wire                 :: << "[\r][\n]"
12:30:59 DEBUG wire                 :: << "<!-- Created with TopBraid -->[\r][\n]"
12:30:59 DEBUG PoolingClientConnectionManager :: Connection [id: 0][route: {}->http://spinrdf.org] can be kept alive for 3000 MILLISECONDS
12:30:59 DEBUG PoolingClientConnectionManager :: Connection released: [id: 0][route: {}->http://spinrdf.org][total kept alive: 1; route allocated: 1 of 5; total allocated: 1 of 10]
12:30:59 DEBUG StreamManager        :: open(http://spinrdf.org/spin)
12:30:59 DEBUG StreamManager        :: Not mapped: http://spinrdf.org/spin
12:30:59 DEBUG HttpOp               :: [2] GET http://spinrdf.org/spin
12:30:59 DEBUG PoolingClientConnectionManager :: Connection request: [route: {}->http://spinrdf.org][total kept alive: 0; route allocated: 0 of 5; total allocated: 0 of 10]
12:30:59 DEBUG PoolingClientConnectionManager :: Connection leased: [id: 1][route: {}->http://spinrdf.org][total kept alive: 0; route allocated: 1 of 5; total allocated: 1 of 10]
12:30:59 DEBUG DefaultClientConnectionOperator :: Connecting to spinrdf.org:80
12:30:59 DEBUG RequestAddCookies    :: CookieSpec selected: best-match
12:30:59 DEBUG RequestAuthCache     :: Auth cache not set in the context
12:30:59 DEBUG RequestTargetAuthentication :: Target auth state: UNCHALLENGED
12:30:59 DEBUG RequestProxyAuthentication :: Proxy auth state: UNCHALLENGED
12:30:59 DEBUG SystemDefaultHttpClient :: Attempt 1 to execute request
12:30:59 DEBUG DefaultClientConnection :: Sending request: GET /spin HTTP/1.1
12:30:59 DEBUG wire                 :: >> "GET /spin HTTP/1.1[\r][\n]"
12:30:59 DEBUG wire                 :: >> "Accept: text/turtle,application/n-triples;q=0.9,application/ld+json;q=0.8,application/rdf+xml;q=0.7,*/*;q=0.5[\r][\n]"
12:30:59 DEBUG wire                 :: >> "User-Agent: Apache-Jena-ARQ/2.11.2[\r][\n]"
12:30:59 DEBUG wire                 :: >> "Host: spinrdf.org[\r][\n]"
12:30:59 DEBUG wire                 :: >> "Connection: Keep-Alive[\r][\n]"
12:30:59 DEBUG wire                 :: >> "[\r][\n]"
12:30:59 DEBUG headers              :: >> GET /spin HTTP/1.1
12:30:59 DEBUG headers              :: >> Accept: text/turtle,application/n-triples;q=0.9,application/ld+json;q=0.8,application/rdf+xml;q=0.7,*/*;q=0.5
12:30:59 DEBUG headers              :: >> User-Agent: Apache-Jena-ARQ/2.11.2
12:30:59 DEBUG headers              :: >> Host: spinrdf.org
12:30:59 DEBUG headers              :: >> Connection: Keep-Alive
12:30:59 DEBUG wire                 :: << "HTTP/1.1 200 OK[\r][\n]"
12:30:59 DEBUG wire                 :: << "Date: Sun, 02 Aug 2015 09:30:59 GMT[\r][\n]"
12:30:59 DEBUG wire                 :: << "Server: Apache[\r][\n]"
12:30:59 DEBUG wire                 :: << "Last-Modified: Thu, 21 Aug 2014 23:25:03 GMT[\r][\n]"
12:30:59 DEBUG wire                 :: << "Accept-Ranges: bytes[\r][\n]"
12:30:59 DEBUG wire                 :: << "Content-Length: 40053[\r][\n]"
12:30:59 DEBUG wire                 :: << "Keep-Alive: timeout=3, max=100[\r][\n]"
12:30:59 DEBUG wire                 :: << "Connection: Keep-Alive[\r][\n]"
12:30:59 DEBUG wire                 :: << "Content-Type: text/plain[\r][\n]"
12:30:59 DEBUG wire                 :: << "[\r][\n]"
12:30:59 DEBUG DefaultClientConnection :: Receiving response: HTTP/1.1 200 OK
12:30:59 DEBUG headers              :: << HTTP/1.1 200 OK
12:30:59 DEBUG headers              :: << Date: Sun, 02 Aug 2015 09:30:59 GMT
12:30:59 DEBUG headers              :: << Server: Apache
12:30:59 DEBUG headers              :: << Last-Modified: Thu, 21 Aug 2014 23:25:03 GMT
12:30:59 DEBUG headers              :: << Accept-Ranges: bytes
12:30:59 DEBUG headers              :: << Content-Length: 40053
12:30:59 DEBUG headers              :: << Keep-Alive: timeout=3, max=100
12:30:59 DEBUG headers              :: << Connection: Keep-Alive
12:30:59 DEBUG headers              :: << Content-Type: text/plain
12:30:59 DEBUG SystemDefaultHttpClient :: Connection can be kept alive for 3000 MILLISECONDS
12:30:59 DEBUG StreamManager        :: Found: http://spinrdf.org/spin (LocatorHTTP)
12:30:59 DEBUG wire                 :: << "<"
12:30:59 DEBUG wire                 :: << "?"
12:30:59 DEBUG wire                 :: << "x"
12:30:59 DEBUG wire                 :: << "m"
12:30:59 DEBUG wire                 :: << "l"
12:30:59 DEBUG wire                 :: << " "
12:30:59 DEBUG wire                 :: << "v"
12:30:59 DEBUG wire                 :: << "e"
12:30:59 DEBUG wire                 :: << "r"
12:30:59 DEBUG wire                 :: << "s"
12:30:59 DEBUG wire                 :: << "i"
12:30:59 DEBUG wire                 :: << "o"
12:30:59 DEBUG wire                 :: << "n"
12:30:59 DEBUG wire                 :: << "="
12:30:59 DEBUG wire                 :: << """
12:30:59 DEBUG wire                 :: << "1"
12:30:59 DEBUG wire                 :: << "."
12:30:59 DEBUG wire                 :: << "0"
12:30:59 DEBUG wire                 :: << """
12:30:59 DEBUG wire                 :: << "?"
12:30:59 DEBUG wire                 :: << ">"
12:30:59 DEBUG wire                 :: << "[\r][\n]"
12:30:59 DEBUG wire                 :: << "<rdf:RDF[\r][\n]"
12:30:59 DEBUG wire                 :: << "    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    xmlns:spin="http://spinrdf.org/spin#"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    xmlns:sp="http://spinrdf.org/sp#"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    xmlns:owl="http://www.w3.org/2002/07/owl#"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    xmlns:arg="http://spinrdf.org/arg#"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    xmlns:xsd="http://www.w3.org/2001/XMLSchema#"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    xmlns:spl="http://spinrdf.org/spl#"[\r][\n]"
12:30:59 DEBUG wire                 :: << "  xml:base="http://spinrdf.org/spin">[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <owl:Ontology rdf:about="">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <owl:versionInfo rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >1.3.2</owl:versionInfo>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <owl:imports rdf:resource="http://spinrdf.org/sp"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >SPIN Modeling Vocabulary</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >An RDF Schema that can be used to attach constraints and rules to RDFS classes, and to encapsulate reusable SPARQL queries into functions and templates.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </owl:Ontology>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Function">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      <rdfs:Class rdf:ID="Module"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >Function</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >Metaclass for functions that can be used in SPARQL expressions (e.g. FILTER or BIND). The function themselves are classes that are instances of this metaclass. Function calls are instances of the function classes, with property values for the arguments.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      <spl:Attribute>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "        >the body of the function</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:predicate>[\r][\n]"
12:30:59 DEBUG wire                 :: << "          <rdf:Property rdf:ID="body"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        </spl:predicate>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:minCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:59 DEBUG wire                 :: << "        >0</spl:minCount>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:maxCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:59 DEBUG wire                 :: << "        >1</spl:maxCo"
12:30:59 DEBUG wire                 :: << "unt>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      </spl:Attribute>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="TableDataProvider">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >Table data provider</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >An abstraction of objects that can produce tabular data. This serves as a base class of spin:SelectTemplate, because SELECT queries can produce tables with columns for each result variable. However, other types of TableDataProviders are conceivable by other frameworks, and this class may prove as a useful shared foundation.[\n]"
12:30:59 DEBUG wire                 :: << "[\n]"
12:30:59 DEBUG wire                 :: << "TableDataProviders can link to definitions of columns via spin:column, and these definitions can inform rendering engines.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="ConstructTemplate">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      <rdfs:Class rdf:ID="Template"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >Construct template</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      <spl:Attribute>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "        >The CONSTRUCT query wrapped by this template.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:valueType>[\r][\n]"
12:30:59 DEBUG wire                 :: << "          <rdf:Description rdf:about="http://spinrdf.org/sp#Construct">[\r][\n]"
12:30:59 DEBUG wire                 :: << "            <rdfs:subClassOf>[\r][\n]"
12:30:59 DEBUG wire                 :: << "              <rdfs:Class rdf:ID="Rule"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "            </rdfs:subClassOf>[\r][\n]"
12:30:59 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        </spl:valueType>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:predicate>[\r][\n]"
12:30:59 DEBUG wire                 :: << "          <rdf:Property rdf:about="#body"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        </spl:predicate>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:minCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:59 DEBUG wire                 :: << "        >0</spl:minCount>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:maxCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:59 DEBUG wire                 :: << "        >1</spl:maxCount>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      </spl:Attribute>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="ConstraintViolationLevel">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://www.w3.org/"
12:30:59 DEBUG wire                 :: << "2000/01/rdf-schema#Resource"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >Constraint violation level</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >The type of the supported levels of constraint violations, including spin:Error and spin:Warning.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <rdfs:Class rdf:about="#Rule">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://spinrdf.org/sp#Command"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >Rule</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >Groups together the kinds of SPARQL commands that can appear as SPIN rules and constructors: CONSTRUCT, DELETE WHERE and DELETE/INSERT. This class is never to be instantiated directly.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <rdfs:Class rdf:about="#Module">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >Module</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >An abstract building block of a SPARQL system. A Module can take Arguments as input and applies them on an input RDF Graph. The Arguments should be declared as spin:constraints.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="AskTemplate">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Template"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >Ask template</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >A SPIN template that wraps an ASK query.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      <spl:Attribute>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "        >The ASK query wrapped by this template.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://spinrdf.org/sp#Ask"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:predicate>[\r][\n]"
12:30:59 DEBUG wire                 :: << "          <rdf:Property rdf:about="#bo"
12:30:59 DEBUG wire                 :: << "dy"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        </spl:predicate>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:minCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:59 DEBUG wire                 :: << "        >0</spl:minCount>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:maxCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:59 DEBUG wire                 :: << "        >1</spl:maxCount>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      </spl:Attribute>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="UpdateTemplate">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Template"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >Update template</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >A SPIN template that has an UPDATE command as its body.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      <spl:Attribute>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "        >The UPDATE command wrapped by this template.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://spinrdf.org/sp#Update"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:predicate>[\r][\n]"
12:30:59 DEBUG wire                 :: << "          <rdf:Property rdf:about="#body"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        </spl:predicate>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:minCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:59 DEBUG wire                 :: << "        >0</spl:minCount>[\r][\n]"
12:30:59 DEBUG wire                 :: << "        <spl:maxCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:30:59 DEBUG wire                 :: << "        >1</spl:maxCount>[\r][\n]"
12:30:59 DEBUG wire                 :: << "      </spl:Attribute>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="RuleProperty">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >Rule property</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >The metaclass of spin:rule and its subproperties. spin:RuleProperties can have additional metadata attached to them.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </rdfs:C"
12:30:59 DEBUG wire                 :: << "lass>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="ConstraintViolation">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:30:59 DEBUG wire                 :: << "    >Constraint violation</rdfs:label>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:comment>An object that can be created by spin:constraints to provide information about a constraint violation.</rdfs:comment>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:30:59 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Modules">[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:30:59 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org"
12:31:00 DEBUG wire                 :: << "/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Modules</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment>An "artificial" parent class for all Functions and Templates.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <spin:constructor>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <spl:ConstructDefaultValues/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </spin:constructor>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="SelectTemplate">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Template"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#TableDataProvider"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Select template</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >A SPIN template that wraps a SELECT query.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <spl:Attribute>[\r][\n]"
12:31:00 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "        >The SELECT query wrapped by this template.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://spinrdf.org/sp#Select"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "        <spl:predicate>[\r][\n]"
12:31:00 DEBUG wire                 :: << "          <rdf:Property rdf:about="#body"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "        </spl:predicate>[\r][\n]"
12:31:00 DEBUG wire                 :: << "        <spl:minCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:00 DEBUG wire                 :: << "        >0</spl:minCount>[\r][\n]"
12:31:00 DEBUG wire                 :: << "        <spl:maxCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:00 DEBUG wire                 :: << "        >1</spl:maxCount>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      </spl:Attribute>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Column">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Column</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Provides metadata about a column in the result set of a (SPARQL) query, for example of the body queries of SPIN templates. Columns can define human-readable labels that serve as column titles, using rdfs:label.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="LibraryOntology">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://www.w3.org/2002/07/owl#Ontology"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Library ontology</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment>A marker class that can be attached to base URIs (ontologies) to instruct SPIN engines that this ontology only contains a library of SPIN declarations. Library Ontologies should be ignored by SPIN inference engines even if they have been imported by a domain model. For example, a SPIN version of OWL RL may contain all the OWL RL axioms, attached to owl:Thing, but nothing else. However, when executed, these axioms should not be executed over themselves, because we don't want the system to reason about the SPIN triples to speed up things.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="MagicProperty">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Function"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Magic property</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdfs:Class rdf:about="#Template">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Module"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Template</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >The metaclass of SPIN templates. Templates are classes that are instances of this class. A template represents a reusable SPARQL query or update request that can be parameterized with arguments. Templates can be instantiated in places where normally a SPARQL query or update request is used, in particular as spin:rules and spin:constraints.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <spl:Attribute>[\r][\n]"
12:31:00 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "        >the body of the Template</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "        <spl:predicate>[\r][\n]"
12:31:00 DEBUG wire                 :: << "          <rdf:Property rdf:about="#body"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "        </spl:predicate>[\r][\n]"
12:31:00 DEBUG wire                 :: << "        <spl:minCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:00 DEBUG wire                 :: << "        >0</spl:minCount>[\r][\n]"
12:31:00 DEBUG wire                 :: << "        <spl:maxCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:00 DEBUG wire                 :: << "        >1</spl:maxCount>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      </spl:"
12:31:00 DEBUG wire                 :: << "Attribute>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Property rdf:ID="update">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <rdf:Property rdf:ID="command"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://spinrdf.org/sp#Update"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >update</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Can be used to point from any resource to an Update.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Property rdf:ID="returnType">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <rdf:Property rdf:ID="systemProperty"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >return type</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Function"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment>The return type of a Function, e.g. xsd:string.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Property rdf:ID="violationValue">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <rdf:Property rdf:about="#systemProperty"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >violation value</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#ConstraintViolation"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >An optional attribute of ConstraintViolations to point at a specific RDF node that caused the violation. Should be accessible from the root via the violationPath.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Property rdf:about="#body">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <rdf:Property rdf:about="#systemProperty"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://spinrdf.org/sp#Command"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >body</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment>The body of a Function or Template. This points to a Query instance. For Functions, this is limited to either ASK or SELECT type queries. If the body is the ASK functio"
12:31:00 DEBUG wire                 :: << "n then the return value is xsd:boolean. Otherwise, the SELECT query must have a single return variable. The first binding of this SELECT query will be returned as result of the function call.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Property rdf:ID="violationRoot">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <rdf:Property rdf:about="#systemProperty"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >violation root</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#ConstraintViolation"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment>The root resource of the violation (often ?this in the constraint body).</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Property rdf:about="#systemProperty">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >system property</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment>An "abstract" base property that groups together those system properties that the user will hardly ever need to see in property trees. This property may be dropped in future versions of this ontology - right now it's mainly here for convenience.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Property rdf:ID="private">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >private</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Module"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Can be set to true to indicate that a SPIN function or template is only meant to be used as a helper of other modules, but not directly. Among others, this allows user interfaces to filter out private modules. Furthermore, it tells potential users of this module that they should avoid using this module, as it may not be stable.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Property rdf:ID="nextRuleProperty">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#RuleProperty"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >next rule property</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#RuleProperty"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Can be used to link two sub-properties of spin:rule (or spin:rule itself) to instruct the SPIN engine to execute one set of rules before another one. The values of the subject property will be executed before those of the object property.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Property rdf:ID="labelTemplate">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >label template</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Template"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment>A template string for displaying instantiations of a module in human-readable form. The template may contain the argument variable names in curly braces to support substitution. For example, "The number of values of the {?arg1} property."</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Property rdf:ID="constructor">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <rdf:Property rdf:about="#command"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#Rule"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >constructor</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Can be used to attach a "constructor" to a class. A constructor is a SPARQL CONSTRUCT query or INSERT/DELETE Update operation that can add initial values to the current instance. At execution time, the variable ?this is bound to the current instance. Tools can call constructors of a class and its superclasses when an instance of a class has been created. Constructors will also be used to initialize resources that have received a new"
12:31:00 DEBUG wire                 :: << " rdf:type triple as a result of spin:rules firing.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Property rdf:ID="violationPath">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >violation path</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#ConstraintViolation"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment>An optional attribute of ConstraintViolations to provide a path expression from the root resource to the value that is invalid. If this is a URI then the path represents the predicate of a subject/predicate combination. Otherwise it should be a blank node of type sp:Path.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Property rdf:ID="abstract">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >abstract</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Module"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment>Can be set to true to indicate that this module shall not be instantiated. Abstract modules are only there to organize other modules into hierarchies.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Property rdf:ID="fix">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#UpdateTemplate"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >fix</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#ConstraintViolation"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Can be used to link a ConstraintViolation with one or more UPDATE Templates that would help fix the violation.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Property rdf:ID="columnWidth">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >column width</r"
12:31:00 DEBUG wire                 :: << "dfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Column"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >The preferred width of the associated Column, for display purposes. Values in pixels (rendering engines may multiply the values depending on resolution).</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Property rdf:ID="columnIndex">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >column index</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Column"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >The index of a column (from left to right) starting at 0.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Property rdf:ID="column">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#Column"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >column</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#TableDataProvider"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Can link a TableDataProvider (esp. SelectTemplate) with one or more columns that provide metadata for rendering purposes. Columns can be sorted by their spin:columnIndex (which must align with the ordering of variables in the SELECT query starting with 0). Not all result variables of the underlying query need to have a matching spin:Column.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Property rdf:ID="symbol">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >symbol</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Function"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment>The symbol of a function, e.g. "=" for the eq function.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Property rdf:ID="violationLevel">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:re"
12:31:00 DEBUG wire                 :: << "source="#systemProperty"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#ConstraintViolationLevel"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >violation level</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#ConstraintViolation"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment "
12:31:00 DEBUG wire                 :: << "rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >An optional attribute of ConstraintViolations to point at a violation level (such as Error and Warning). Defaults to spin:Error.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Property rdf:ID="columnType">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >column type</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Column"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >The datatype or resource type of a spin:Column. For example this is useful as metadata to inform a rendering engine that numeric columns (e.g. xsd:float) need to be right-aligned.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Property rdf:ID="constraint">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <rdf:Property rdf:ID="query"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >constraint</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment>Links a class with constraints on its instances. The values of this property are "axioms" expressed as CONSTRUCT or ASK queries where the variable ?this refers to the instances of the surrounding class. ASK queries must evaluate to false for each member of this class - returning true means that the instance ?this violates the constraint. CONSTRUCT queries must create instances of spin:ConstraintViolation to provide details on the reason for the violation.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Property rdf:ID="violationSource">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >violation source</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#ConstraintViolation"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www."
12:31:00 DEBUG wire                 :: << "w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Can be used to link a spin:ConstraintViolation with the query or template call that caused it. This property is typically filled in automatically by the constraint checking engine and does not need to be set manually. However, it can be useful to learn more about the origin of a violation.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Property rdf:about="#query">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <rdf:Property rdf:about="#command"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://spinrdf.org/sp#Query"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >query</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment>Can be used to point from any resource to a Query.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Property rdf:ID="thisUnbound">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >this unbound</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="http://spinrdf.org/sp#Construct"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Can be set to true for SPIN rules and constraints that do not require pre-binding the variable ?this with all members of the associated class. This flag should only be set to true if the WHERE clause is sufficiently strong to only bind instances of the associated class, or its subclasses. In those cases, the engine can greatly improve performance of query execution, because it does not need to add clauses to narrow down the WHERE clause.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Property rdf:ID="cachable">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >cachable</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Function"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "  "
12:31:00 DEBUG wire                 :: << "  >Can be set to true to instruct the SPIN engine that it may cache the results of all calls to the associated function. Functions should only be marked as cachable if the same combination of input arguments always returns the same result. Functions that query a graph or other background data that may change over time should not be cached. Caching can significantly improve performance of frequently needed functions.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Property rdf:about="#command">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://spinrdf.org/sp#Command"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >command</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Can be used to link a resource with a SPARQL query or update request (sp:Command).</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Property rdf:ID="rulePropertyMaxIterationCount">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >rule property max iteration count</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#RuleProperty"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Can be attached to spin:rule (or subclasses thereof) to instruct a SPIN rules engine that it shall only execute the rules max times. If no value is specified, then the rules will be executed with no specific limit.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <owl:OntologyProperty rdf:ID="imports">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Ontology"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >imports</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Ontology"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Can be used to link an RDF graph (usually the instance of owl:Ontology) wit"
12:31:00 DEBUG wire                 :: << "h a SPIN library to define constraints. SPIN-aware tools should include the definitions from those libraries for constraint checking. Using such libraries is a simpler alternative than explicitly importing them using owl:imports, because it does not force all the SPIN triples into the RDF model.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </owl:OntologyProperty>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <spin:ConstraintViolationLevel rdf:ID="Warning">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Warning</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Indicates that the associated constraint violation is a problem that may not have to be fixed but may lead to issues in the future.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </spin:ConstraintViolationLevel>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <spin:MagicProperty rdf:ID="construct">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <spin:MagicProperty rdf:ID="MagicProperties">[\r][\n]"
12:31:00 DEBUG wire                 :: << "        <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "        <rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "          <spin:Function rdf:ID="Functions">[\r][\n]"
12:31:00 DEBUG wire                 :: << "            <rdfs:subClassOf rdf:resource="#Modules"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "            <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "            >Functions</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "            <rdfs:comment>An abstract base class for all defined functions. This class mainly serves as a shared root so that the various instances of the Function metaclass are grouped together.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "            <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:00 DEBUG wire                 :: << "            >true</spin:abstract>[\r][\n]"
12:31:00 DEBUG wire                 :: << "          </spin:Function>[\r][\n]"
12:31:00 DEBUG wire                 :: << "        </rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "        <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "        >Magic properties</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "        >An abstract superclass that can be used to group all spin:MagicProperty instances under a single parent class.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "        <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:00 DEBUG wire                 :: << "        >true</spin:abstract>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      </spin:MagicProperty>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs"
12:31:00 DEBUG wire                 :: << ":subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >construct</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Evaluates a given sp:Construct or SPIN template call (first argument on the left hand side) and binds the resulting triples to the variables on the right hand side.[\n]"
12:31:00 DEBUG wire                 :: << "[\n]"
12:31:00 DEBUG wire                 :: << "Example:[\n]"
12:31:00 DEBUG wire                 :: << "[\n]"
12:31:00 DEBUG wire                 :: << "    (?query "this" owl:Thing) spin:construct (?s ?p ?o)[\n]"
12:31:00 DEBUG wire                 :: << "[\n]"
12:31:00 DEBUG wire                 :: << "will execute the sp:Construct ?query using the binding of owl:Thing to ?this. The resulting triples will be bound to ?s, ?p and ?o. If any of ?s ?p ?o are bound, it will only return the matching triples.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </spin:MagicProperty>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <sp:Variable rdf:ID="_arg4">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >arg4</sp:varName>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </sp:Variable>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <spin:ConstructTemplate rdf:ID="ConstructTemplates">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <spin:Template rdf:ID="Templates">[\r][\n]"
12:31:00 DEBUG wire                 :: << "        <rdfs:subClassOf rdf:resource="#Modules"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "        <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "        >Templates</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "        >Suggested abstract base class for all Templates.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "        <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:00 DEBUG wire                 :: << "        >true</spin:abstract>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      </spin:Template>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Construct templates</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Suggested abstract base class for all ConstructTemplates.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >true</spin:abstract>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </spin:ConstructTemplate>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <spin:Function rdf:ID="ask">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Functions"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >ask</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSc"
12:31:00 DEBUG wire                 :: << "hema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Executes a given ASK query and returns its boolean result. The first argument must point to an sp:Ask or a SPIN template call that has an ASK query as its body. All subsequent argument can come in pairs, with the first one being a variable name and the second its binding.[\n]"
12:31:00 DEBUG wire                 :: << "[\n]"
12:31:00 DEBUG wire                 :: << "Example:[\n]"
12:31:00 DEBUG wire                 :: << "[\n]"
12:31:00 DEBUG wire                 :: << "    BIND (spin:ask(?query, "this", owl:Thing) AS ?result) .[\n]"
12:31:00 DEBUG wire                 :: << "[\n]"
12:31:00 DEBUG wire                 :: << "will execute the sp:Ask behind ?query with the variable ?this pre-bound to owl:Thing.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <spin:ConstraintViolationLevel rdf:ID="Info">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Indicates that the associated constraint violation is a not a problem. This level can be used for diagnostic and debugging purposes.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Info</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </spin:ConstraintViolationLevel>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Description rdf:about="http://spinrdf.org/sp#Modify">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Rule"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Description>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <spin:ConstraintViolationLevel rdf:ID="Fatal">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Fatal</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Indicates that the associated constraint violation is a severe error that must be fixed. Constraint checking engines may decide to stop further evaluation once a fatal error has been detected.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </spin:ConstraintViolationLevel>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <spin:MagicProperty rdf:ID="select">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MagicProperties"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >select</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Executes a given SELECT or ASK query (or a corresponding SPIN template call) and binds its result rows to the variables specified on the right hand side. May also pre-bind variables for the query execution, using name-value pairs on the left hand side.[\n]"
12:31:00 DEBUG wire                 :: << "[\n]"
12:31:00 DEBUG wire                 :: << "Example:[\n]"
12:31:00 DEBUG wire                 :: << "[\n]"
12:31:00 DEBUG wire                 :: << "    (?query "thi"
12:31:00 DEBUG wire                 :: << "s" owl:Thing) spin:select (?a ?b)[\n]"
12:31:00 DEBUG wire                 :: << "[\n]"
12:31:00 DEBUG wire                 :: << "will execute the sp:Select or sp:Ask that ?query points to and pre-bind ?this with the value of owl:Thing for the execution of the query. The first result variable of the query's result set will be bound to ?a, the second to ?b etc. If the nodes on the right are bound (or constants) then it will match with the values from the result set.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </spin:MagicProperty>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <spin:Function rdf:ID="eval">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Functions"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >eval</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Evaluates a given SPIN expression or SELECT or ASK query, and returns its result. The first argument must be the expression in SPIN RDF syntax. All other arguments must come in pairs: first a property name, and then a value. These name/value pairs will be pre-bound variables for the execution of the expression.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <sp:Variable rdf:ID="_arg5">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >arg5</sp:varName>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </sp:Variable>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <sp:Variable rdf:ID="_arg1">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >arg1</sp:varName>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </sp:Variable>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <spin:ConstraintViolationLevel rdf:ID="Error">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Error</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Indicates that the associated constraint violation is an error that should be fixed.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </spin:ConstraintViolationLevel>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <spin:AskTemplate rdf:ID="AskTemplates">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Templates"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Ask templates</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Suggested abstract base class for all AskTemplates.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <spin:abstract rdf:d"
12:31:00 DEBUG wire                 :: << "atatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >true</spin:abstract>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </spin:AskTemplate>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <spin:SelectTemplate rdf:ID="SelectTemplates">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Templates"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Select templates</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Suggested abstract base class for all SelectTemplates.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >true</spin:abstract>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </spin:SelectTemplate>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <sp:Variable rdf:ID="_arg2">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >arg2</sp:varName>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </sp:Variable>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <sp:Variable rdf:ID="_this">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >_this</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment>A system variable representing the current context instance in a rule or constraint.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >this</sp:varName>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </sp:Variable>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdf:Description rdf:about="http://spinrdf.org/sp#DeleteWhere">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Rule"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdf:Description>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <spin:UpdateTemplate rdf:ID="UpdateTemplates">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Templates"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Update templates</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Suggested abstract base class for all UpdateTemplates.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >true</spin:abstract>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </spin:UpdateTemplate>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <spin:RuleProperty rdf:ID="rule">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#command"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#Rule"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >rule</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:d"
12:31:00 DEBUG wire                 :: << "atatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >An inferencing rule attached to a class. Rules are expressed as CONSTRUCT queries or INSERT/DELETE operations where the variable ?this will be bound to the current instance of the class. These inferences can be used to derive new values from existing values at the instance.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </spin:RuleProperty>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <sp:Variable rdf:ID="_arg3">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >arg3</sp:varName>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </sp:Variable>[\r][\n]"
12:31:00 DEBUG wire                 :: << "</rdf:RDF>[\r][\n]"
12:31:00 DEBUG wire                 :: << "[\r][\n]"
12:31:00 DEBUG wire                 :: << "<!-- Created with TopBraid -->[\r][\n]"
12:31:00 DEBUG PoolingClientConnectionManager :: Connection [id: 1][route: {}->http://spinrdf.org] can be kept alive for 3000 MILLISECONDS
12:31:00 DEBUG PoolingClientConnectionManager :: Connection released: [id: 1][route: {}->http://spinrdf.org][total kept alive: 1; route allocated: 1 of 5; total allocated: 1 of 10]
12:31:00 DEBUG StreamManager        :: open(http://spinrdf.org/sp)
12:31:00 DEBUG StreamManager        :: Not mapped: http://spinrdf.org/sp
12:31:00 DEBUG HttpOp               :: [3] GET http://spinrdf.org/sp
12:31:00 DEBUG PoolingClientConnectionManager :: Connection request: [route: {}->http://spinrdf.org][total kept alive: 0; route allocated: 0 of 5; total allocated: 0 of 10]
12:31:00 DEBUG PoolingClientConnectionManager :: Connection leased: [id: 2][route: {}->http://spinrdf.org][total kept alive: 0; route allocated: 1 of 5; total allocated: 1 of 10]
12:31:00 DEBUG DefaultClientConnectionOperator :: Connecting to spinrdf.org:80
12:31:00 DEBUG RequestAddCookies    :: CookieSpec selected: best-match
12:31:00 DEBUG RequestAuthCache     :: Auth cache not set in the context
12:31:00 DEBUG RequestTargetAuthentication :: Target auth state: UNCHALLENGED
12:31:00 DEBUG RequestProxyAuthentication :: Proxy auth state: UNCHALLENGED
12:31:00 DEBUG SystemDefaultHttpClient :: Attempt 1 to execute request
12:31:00 DEBUG DefaultClientConnection :: Sending request: GET /sp HTTP/1.1
12:31:00 DEBUG wire                 :: >> "GET /sp HTTP/1.1[\r][\n]"
12:31:00 DEBUG wire                 :: >> "Accept: text/turtle,application/n-triples;q=0.9,application/ld+json;q=0.8,application/rdf+xml;q=0.7,*/*;q=0.5[\r][\n]"
12:31:00 DEBUG wire                 :: >> "User-Agent: Apache-Jena-ARQ/2.11.2[\r][\n]"
12:31:00 DEBUG wire                 :: >> "Host: spinrdf.org[\r][\n]"
12:31:00 DEBUG wire                 :: >> "Connection: Keep-Alive[\r][\n]"
12:31:00 DEBUG wire                 :: >> "[\r][\n]"
12:31:00 DEBUG headers              :: >> GET /sp HTTP/1.1
12:31:00 DEBUG headers              :: >> Accept: text/turtle,application/n-triples;q=0.9,application/ld+json;q=0.8,application/rdf+xml;q=0.7,*/*;q=0.5
12:31:00 DEBUG headers              :: >> User-Agent: Apache-Jena-ARQ/2.11.2
12:31:00 DEBUG headers              :: >> Host: spinrdf.org
12:31:00 DEBUG headers              :: >> Connection: Keep-Alive
12:31:00 DEBUG wire                 :: << "HTTP/1.1 200 OK[\r][\n]"
12:31:00 DEBUG wire                 :: << "Date: Sun, 02 Aug 2015 09:31:00 GMT[\r][\n]"
12:31:00 DEBUG wire                 :: << "Server: Apache[\r][\n]"
12:31:00 DEBUG wire                 :: << "Last-Modified: Thu, 12 Sep 2013 01:29:39 GMT[\r][\n]"
12:31:00 DEBUG wire                 :: << "Accept-Ranges: bytes[\r][\n]"
12:31:00 DEBUG wire                 :: << "Content-Length: 45280[\r][\n]"
12:31:00 DEBUG wire                 :: << "Keep-Alive: timeout=3, max=100[\r][\n]"
12:31:00 DEBUG wire                 :: << "Connection: Keep-Alive[\r][\n]"
12:31:00 DEBUG wire                 :: << "Content-Type: text/plain[\r][\n]"
12:31:00 DEBUG wire                 :: << "[\r][\n]"
12:31:00 DEBUG DefaultClientConnection :: Receiving response: HTTP/1.1 200 OK
12:31:00 DEBUG headers              :: << HTTP/1.1 200 OK
12:31:00 DEBUG headers              :: << Date: Sun, 02 Aug 2015 09:31:00 GMT
12:31:00 DEBUG headers              :: << Server: Apache
12:31:00 DEBUG headers              :: << Last-Modified: Thu, 12 Sep 2013 01:29:39 GMT
12:31:00 DEBUG headers              :: << Accept-Ranges: bytes
12:31:00 DEBUG headers              :: << Content-Length: 45280
12:31:00 DEBUG headers              :: << Keep-Alive: timeout=3, max=100
12:31:00 DEBUG headers              :: << Connection: Keep-Alive
12:31:00 DEBUG headers              :: << Content-Type: text/plain
12:31:00 DEBUG SystemDefaultHttpClient :: Connection can be kept alive for 3000 MILLISECONDS
12:31:00 DEBUG StreamManager        :: Found: http://spinrdf.org/sp (LocatorHTTP)
12:31:00 DEBUG wire                 :: << "<"
12:31:00 DEBUG wire                 :: << "?"
12:31:00 DEBUG wire                 :: << "x"
12:31:00 DEBUG wire                 :: << "m"
12:31:00 DEBUG wire                 :: << "l"
12:31:00 DEBUG wire                 :: << " "
12:31:00 DEBUG wire                 :: << "v"
12:31:00 DEBUG wire                 :: << "e"
12:31:00 DEBUG wire                 :: << "r"
12:31:00 DEBUG wire                 :: << "s"
12:31:00 DEBUG wire                 :: << "i"
12:31:00 DEBUG wire                 :: << "o"
12:31:00 DEBUG wire                 :: << "n"
12:31:00 DEBUG wire                 :: << "="
12:31:00 DEBUG wire                 :: << """
12:31:00 DEBUG wire                 :: << "1"
12:31:00 DEBUG wire                 :: << "."
12:31:00 DEBUG wire                 :: << "0"
12:31:00 DEBUG wire                 :: << """
12:31:00 DEBUG wire                 :: << "?"
12:31:00 DEBUG wire                 :: << ">"
12:31:00 DEBUG wire                 :: << "[\r][\n]"
12:31:00 DEBUG wire                 :: << "<rdf:RDF[\r][\n]"
12:31:00 DEBUG wire                 :: << "    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    xmlns:spin="http://spinrdf.org/spin#"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    xmlns:sp="http://spinrdf.org/sp#"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    xmlns:owl="http://www.w3.org/2002/07/owl#"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    xmlns:xsd="http://www.w3.org/2001/XMLSchema#"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    xmlns:spl="http://spinrdf.org/spl#"[\r][\n]"
12:31:00 DEBUG wire                 :: << "  xml:base="http://spinrdf.org/sp">[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <owl:Ontology rdf:about="">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <owl:versionInfo rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >1.5.0</owl:versionInfo>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >SPIN SPARQL Syntax</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >An RDF schema to syntactically represent SPARQL queries and update commands as RDF triples.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </owl:Ontology>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Path">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <rdfs:Class rdf:ID="SystemClass"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Path</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment>The base class of SPARQL property path expressions. Paths are used by sp:TriplePath triple paths.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Asc">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <rdfs:Class rdf:ID="OrderByCondition"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Asc</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment>Marker to indicate ascending order.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Sum">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <rdfs:Class rdf:ID="Aggregation"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >SUM</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Represents sum aggregations, e.g. SELECT SUM(?varName)...</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Union">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <rdfs:Class rdf:ID="ElementGroup"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="htt"
12:31:00 DEBUG wire                 :: << "p://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Union</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment>A UNION group.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="TriplePattern">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <rdfs:Class rdf:ID="Triple"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <rdfs:Class rdf:ID="Element"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Triple pattern</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment>A triple pattern used in the body of a query.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="GroupConcat">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Aggregation"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >GROUP_CONCAT</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Represents GROUP_CONCAT aggregations.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Load">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <rdfs:Class rdf:ID="Update"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Load</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >A LOAD Update operation. The document to load is specified using sp:document, and the (optional) target graph using sp:into.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="DeleteData">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Update"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Delete data</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >An Update operation to delete specific triples. The graph triples are represented using sp:data, which points to an rdf:List of sp:Triples or sp:NamedGraphs.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Desc">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#OrderByCondition"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/200"
12:31:00 DEBUG wire                 :: << "1/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Desc</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment>Marker to indicate descending order.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="TripleTemplate">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Triple"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Triple template</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment>A prototypical triple used as template in the head of a Construct query. May contain variables.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Max">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Aggregation"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >MAX</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Represents MAX aggregations.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Avg">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Aggregation"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >AVG</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Represents AVG aggregations.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Modify">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Update"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Modify</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Represents a MODIFY (part of SPARQL UPDATE language). The graph IRIs are stored in sp:graphIRI. The template patterns are stored in sp:deletePattern and sp:insertPattern. The WHERE clause is represented using sp:where.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdfs:Class rdf:about="#Element">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#SystemClass"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Element</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment>An abstract base clas"
12:31:00 DEBUG wire                 :: << "s for all pattern elements.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="TriplePath">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <rdfs:Class rdf:ID="Tuple"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Element"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Triple path</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment>Similar to a TriplePattern, but with a path expression as its predicate. For example, this can be used to express transitive sub-class relationships (?subClass rdfs:subClassOf* ?superClass).</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdfs:Class rdf:about="#ElementGroup">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Element"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Element group</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment>Abstract base class of group patterns.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="ElementList">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#ElementGroup"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Element list</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment>A list of Elements. This class is never instantiated directly as SPIN will use plain rdf:Lists to store element lists.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="SubQuery">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Element"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Sub query</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >A nested SELECT query inside of an element list. The query is stored in sp:query.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Min">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Aggregation"/>"
12:31:00 DEBUG wire                 :: << "[\r][\n]"
12:31:00 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >MIN</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Represents MIN aggregations.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Bind">[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Element"/>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >Bind</rdfs:label>[\r][\n]"
12:31:00 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:00 DEBUG wire                 :: << "    >A BIND element.</rdfs:comment>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:00 DEBUG wire                 :: << "  <r"
12:31:01 DEBUG wire                 :: << "dfs:Class rdf:ID="Optional">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#ElementGroup"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Optional</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>An optional element in a query.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="AltPath">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Path"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Alt path</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>An alternative path with the union of sp:path1 and sp:path2.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Count">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Aggregation"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >COUNT</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Counts the number of times a variable is used. The variable is stored in the variable property. This might be left blank to indicate COUNT(*).</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="ReversePath">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Path"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Reverse path</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>A path with reversed direction.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Construct">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "      <rdfs:Class rdf:ID="Query"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Construct</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>A CONSTRUCT-type query that can be used to construct new triples from template triples (head) that use variable bindings from the match patterns (body).</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Variable">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#SystemClass"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Variable</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>A variable mentioned in a Triple or expression. Variables are often blank node"
12:31:01 DEBUG wire                 :: << "s with the variable name stored in ts:name. Variables can also be supplied with a URI in which case the system will attempt to reuse the same variable instance across multiple query definitions.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Ask">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Query"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Ask</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>An ASK query that returns true if the condition in the body is met by at least one result set.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="ModPath">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Path"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Mod path</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>A modified path such as rdfs:subClassOf*.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:about="#Tuple">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#SystemClass"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Tuple</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>Abstract base class for things that have subject and object.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Create">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Update"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Create</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >An Update operation that creates a new empty graph with a name specified by sp:graphIRI. May have sp:silent set to true.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:about="#Aggregation">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#SystemClass"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Aggregation</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>Base class of aggregation types (not part of the SPARQL 1.0 standard but supported by ARQ and other engines).</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf"
12:31:01 DEBUG wire                 :: << "s:Class rdf:ID="NamedGraph">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#ElementGroup"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Named graph</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>A named Graph element such as GRAPH &lt;uri&gt; {...}.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:about="#Query">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "      <rdfs:Class rdf:ID="Command"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Query</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>Abstract base class of the various types of supported queries. Common to all types of queries is that they can have a body ("WHERE clause").</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="ReverseLinkPath">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Path"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Reverse link path</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Values">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Element"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Values</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >A VALUES element. sp:varNames points to an rdf:List of strings for the variables, sp:values to an rdf:List of rdf:Lists with nodes for each variable, in the order defined by the variables list.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="NotExists">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#ElementGroup"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Not exists</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >A NOT EXISTS element group.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:about="#Update">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Command"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Update</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Abstract base cl"
12:31:01 DEBUG wire                 :: << "ass to group the various SPARQL UPDATE commands.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Drop">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Update"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Drop</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >An Update operation that removes a specified graph from the Graph Store. Must specify the graph using sp:graphIRI, or sp:default, sp:named or sp:all. May have the SILENT flag, encoded using sp:silent.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:about="#Triple">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Tuple"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Triple</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >A base class for TriplePattern and TripleTemplate. This basically specifies that subject, predicate and object must be present.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="DeleteWhere">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Update"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Delete where</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >An Update operation where the triples matched by the WHERE clause (sp:where) will be the triples deleted.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="InsertData">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Update"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Insert data</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >An Update operation to insert specific triples. The graph triples are represented using sp:data, which points to an rdf:List of sp:Triples or sp:NamedGraphs.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Service">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#ElementGroup"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Service</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:com"
12:31:01 DEBUG wire                 :: << "ment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >A SERVICE call that matches a nested sub-pattern against a SPARQL end point specified by a URI.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:about="#OrderByCondition">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#SystemClass"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Order by condition</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>An abstract base class for ascending or descending order conditions. Instances of this class (typically bnodes) must have a value for expression to point to the actual values.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Select">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Query"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Select query</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>A SELECT-type query that returns variable bindings as its result.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Exists">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#ElementGroup"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Exists</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >An EXISTS element group.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Filter">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Element"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Filter</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>A constraint element that evaluates a given expression to true or false.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Minus">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#ElementGroup"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Minus</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >A MINUS element group.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:about="#SystemClass">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <r"
12:31:01 DEBUG wire                 :: << "dfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >SP System class</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>An "artificial" root class that groups all SP classes. This makes them look much less overwhelming in UI tools. Typical end users don't need to see those classes anyway.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Clear">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Update"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Clear</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >An Update operation that removes all triples from a specified graph. Must specify the graph using sp:graphIRI, or sp:default, sp:named or sp:all. May have the SILENT flag, encoded using sp:silent.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Describe">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Query"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Describe</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>A DESCRIBE-type Query.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:about="#Command">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#SystemClass"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Command</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >A shared superclass for sp:Query and sp:Update that can be used to specify that the range of property can be either one.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="SeqPath">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Path"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Seq path</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>A sequence of multiple paths.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Sample">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Aggregation"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >SAMPLE</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Represents SAMPLE aggregations</rdfs:comment>[\r]"
12:31:01 DEBUG wire                 :: << "[\n]"
12:31:01 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="arg5">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "      <rdf:Property rdf:ID="arg"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >arg5</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>The fifth argument of a function call. Further arguments are not common in SPARQL, therefore no sp:arg6, etc are defined here. However, they can be created if needed.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="path1">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "      <rdf:Property rdf:ID="systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#Path"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >path1</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>The first child path of a property path. Used by sp:AltPath and sp:SeqPath.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="arg1">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "      <rdf:Property rdf:about="#arg"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >arg1</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>The first argument of a function call.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="default">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "      <rdf:Property rdf:about="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >default</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Used in DROP and CLEAR.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="values">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "      <rdf:Property rdf:about="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#Values"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >values</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Query"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >The VALUES block at the end of"
12:31:01 DEBUG wire                 :: << " a query. The object may just be an untyped blank node, i.e. the sp:Values type triple is optional.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="object">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "      <rdf:Property rdf:about="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >object</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Tuple"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>An RDF Node or Variable describing the object of a triple.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="graphNameNode">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "      <rdf:Property rdf:about="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >gra"
12:31:01 DEBUG wire                 :: << "ph name node</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#NamedGraph"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>The name (URI or Variable) of a NamedGraph.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="varName">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "      <rdf:Property rdf:about="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >varName</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Variable"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>The name of a Variable.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="named">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "      <rdf:Property rdf:about="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >named</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Used in DROP and CLEAR.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="as">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "      <rdf:Property rdf:about="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#Variable"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >as</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>Points to a Variable used in an AS statement such as COUNT aggregates.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:about="#systemProperty">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >SP system property</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>An abstract base proprerty that groups together the SP system properties. Users typically don't need to see them anyway.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="distinct">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >distinct</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << " "
12:31:01 DEBUG wire                 :: << "   <rdfs:domain rdf:resource="#Select"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>A marker property to indicate that a Select query is of type SELECT DISTINCT.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="path2">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#Path"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >path2</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>The second child path of a property path. Used by sp:AltPath and sp:SeqPath.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="orderBy">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >order by</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Query"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>Links a query with an ORDER BY clause where the values are rdf:List containing OrderByConditions or expressions. While the domain of this property is sp:Query, only Describe and Select queries can have values of it.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="variable">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#Variable"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >variable</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Bind"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >The variable of a Bind element.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="arg4">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "      <rdf:Property rdf:about="#arg"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >arg4</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>The forth argument of a function call.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="silent">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datat"
12:31:01 DEBUG wire                 :: << "ype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >silent</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="having">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >having</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Select"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Points from a SELECT query to a list of HAVING expressions.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="query">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#Query"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >query</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#SubQuery"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Links a SubQuery resource with the nested Query.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="groupBy">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >group by</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Select"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>Points from a Query to the list of GROUP BY expressions.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="graphIRI">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >graph IRI</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Points to graph names (IRIs) in various sp:Update operations.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="limit">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/200"
12:31:01 DEBUG wire                 :: << "1/XMLSchema#long"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >limit</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Query"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>The LIMIT solution modifier of a Query.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="using">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >using</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Modify"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="templates">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >templates</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Construct"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>Points to a list of TripleTemplates that form the head of a Construct query.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="resultNodes">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >result nodes</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Describe"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>Contains the result nodes (URI resources or Variables) of a Describe query.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="usingNamed">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >using named</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Modify"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="arg3">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "      <rdf:Property rdf:about="#arg"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >arg3</rdfs:"
12:31:01 DEBUG wire                 :: << "label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>The third argument of a function call.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="reduced">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >reduced</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Select"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>A property with true to indicate that a Select query has a REDUCED flag.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="subPath">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >sub path</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>The child path of a property path expression. This is used by ReversePath and ModPath.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="into">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >into</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Load"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >The (optional) target of a LOAD Update operation.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="with">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >with</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Modify"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="serviceURI">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >service URI</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Service"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/20"
12:31:01 DEBUG wire                 :: << "01/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Used by sp:Service to specify the URI of the SPARQL end point to invoke. Must point to a URI node.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="where">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#ElementList"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >where</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>The WHERE clause of a Query.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="document">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >document</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Load"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >The URI of the document to load using a LOAD Update operation.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="resultVariables">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >result variables</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Select"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>An rdf:List of variables that are returned by a Select query.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="separator">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >separator</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#GroupConcat"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Stores the separator="..." value of a GROUP_CONCAT (sp:GroupConcat) aggregation.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="text">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resour"
12:31:01 DEBUG wire                 :: << "ce="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >text</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>Can be attached to sp:Queries to store a textual representation of the query. This can be useful for tools that do not have a complete SPIN Syntax parser available.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="path">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#Path"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >path</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#TriplePath"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>Points from a TriplePath to its path.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="modMax">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >mod max</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#ModPath"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="bindings">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >bindings</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Values"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >The actual bindings of a sp:Values element.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:about="#arg">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >arg</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>Abstract superproperty for the enumerated arg1, arg2 etc.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="elements">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#ElementList"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >elements</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>Points"
12:31:01 DEBUG wire                 :: << " to an ElementList, for example in an Optional element.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="predicate">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >predicate</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Triple"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>A resource or Variable describing the predicate of a triple.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="node">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >node</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#ReverseLinkPath"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="fromNamed">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >from named</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Query"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>Specifies a named RDF Dataset used by a Query (FROM NAMED syntax in SPARQL). Values of this property must be URI resources.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="arg2">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#arg"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >arg2</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>The second argument of a function call.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="subject">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >subject</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Tuple"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>A resource or Variable describing the subject of a triple.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="deletePattern">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource"
12:31:01 DEBUG wire                 :: << "="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >delete pattern</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Update"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Points to a list of sp:TripleTemplates and sp:NamedGraphs in a modify operation.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="expression">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >expression</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>Points to an expression, for example in a Filter or Assignment.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="all">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >all</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Used in DROP and CLEAR.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="from">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >from</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Query"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>Specifies an RDF Dataset used by a Query (FROM syntax in SPARQL). Values of this property must be URI resources.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="offset">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#long"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >offset</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Query"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment>The OFFSET solution modifier of a Query.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <r"
12:31:01 DEBUG wire                 :: << "df:Property rdf:ID="varNames">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >var names</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Values"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >The names of the variables (xsd:strings) of the variables declared for a VALUES element.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="modMin">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >mod min</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#ModPath"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <rdf:Property rdf:ID="insertPattern">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >insert pattern</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Modify"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Points to a list of sp:TripleTemplates or sp:NamedGraphs in a modify command.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <owl:DeprecatedClass rdf:ID="Delete">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Modify"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Delete</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Deprecated - use sp:Modify instead.[\n]"
12:31:01 DEBUG wire                 :: << "[\n]"
12:31:01 DEBUG wire                 :: << "Represents a DELETE FROM (part of SPARQL UPDATE language). The graph IRIs are stored in sp:graphIRI. The template patterns to delete are stored in sp:deletePattern. The WHERE clause is represented using sp:where.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdf:type rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </owl:DeprecatedClass>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <owl:DeprecatedClass rdf:ID="Insert">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    "
12:31:01 DEBUG wire                 :: << "<rdfs:subClassOf rdf:resource="#Modify"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Insert</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Deprecated - use sp:Modify instead.[\n]"
12:31:01 DEBUG wire                 :: << "[\n]"
12:31:01 DEBUG wire                 :: << "Represents a INSERT INTO (part of SPARQL UPDATE language). The graph IRIs are stored in sp:graphIRI. The template patterns to delete are stored in sp:insertPattern. The WHERE clause is represented using sp:where.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdf:type rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </owl:DeprecatedClass>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  <owl:DeprecatedClass rdf:ID="Let">[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Bind"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Let</rdfs:label>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:01 DEBUG wire                 :: << "    >Deprecated: use sp:Bind instead.[\n]"
12:31:01 DEBUG wire                 :: << "[\n]"
12:31:01 DEBUG wire                 :: << "A variable assignment (LET (?&lt;varName&gt; := &lt;expression&gt;)). Not part of the SPARQL 1.0 standard, but (for example) ARQ.</rdfs:comment>[\r][\n]"
12:31:01 DEBUG wire                 :: << "    <rdf:type rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:01 DEBUG wire                 :: << "  </owl:DeprecatedClass>[\r][\n]"
12:31:01 DEBUG wire                 :: << "</rdf:RDF>[\r][\n]"
12:31:01 DEBUG wire                 :: << "[\r][\n]"
12:31:01 DEBUG wire                 :: << "<!-- Created with TopBraid -->[\r][\n]"
12:31:01 DEBUG PoolingClientConnectionManager :: Connection [id: 2][route: {}->http://spinrdf.org] can be kept alive for 3000 MILLISECONDS
12:31:01 DEBUG PoolingClientConnectionManager :: Connection released: [id: 2][route: {}->http://spinrdf.org][total kept alive: 1; route allocated: 1 of 5; total allocated: 1 of 10]
12:31:01 DEBUG FileManager          :: loadModel(http://siima.net/ont/bicycle)
12:31:01 DEBUG StreamManager        :: Mapped: http://siima.net/ont/bicycle => data/models/importing_models/bicycle.ttl
12:31:01 DEBUG AdapterFileManager   :: Map: http://siima.net/ont/bicycle => data/models/importing_models/bicycle.ttl
12:31:01 DEBUG StreamManager        :: open(data/models/importing_models/bicycle.ttl)
12:31:01 DEBUG StreamManager        :: Not mapped: data/models/importing_models/bicycle.ttl
12:31:01 DEBUG StreamManager        :: Found: data/models/importing_models/bicycle.ttl (LocatorFile)
12:31:01 DEBUG RDFDataMgr           :: Found: data/models/importing_models/bicycle.ttl
12:31:01 DEBUG FileManager          :: Add location: LocatorFile
12:31:01 DEBUG FileManager          :: Add location: LocatorURL
12:31:01 DEBUG FileManager          :: Add location: ClassLoaderLocator
12:31:01 DEBUG FileManager          :: Found: ont-policy.rdf (ClassLoaderLocator)
12:31:01 DEBUG FileManager          :: readModel(model,http://spinrdf.org/spl)
12:31:01 DEBUG FileManager          :: readModel(model,http://spinrdf.org/spl, null)
12:31:01 DEBUG StreamManager        :: Not mapped: http://spinrdf.org/spl
12:31:01 DEBUG StreamManager        :: open(http://spinrdf.org/spl)
12:31:01 DEBUG StreamManager        :: Not mapped: http://spinrdf.org/spl
12:31:01 DEBUG HttpOp               :: [4] GET http://spinrdf.org/spl
12:31:01 DEBUG PoolingClientConnectionManager :: Connection request: [route: {}->http://spinrdf.org][total kept alive: 0; route allocated: 0 of 5; total allocated: 0 of 10]
12:31:01 DEBUG PoolingClientConnectionManager :: Connection leased: [id: 3][route: {}->http://spinrdf.org][total kept alive: 0; route allocated: 1 of 5; total allocated: 1 of 10]
12:31:01 DEBUG DefaultClientConnectionOperator :: Connecting to spinrdf.org:80
12:31:02 DEBUG RequestAddCookies    :: CookieSpec selected: best-match
12:31:02 DEBUG RequestAuthCache     :: Auth cache not set in the context
12:31:02 DEBUG RequestTargetAuthentication :: Target auth state: UNCHALLENGED
12:31:02 DEBUG RequestProxyAuthentication :: Proxy auth state: UNCHALLENGED
12:31:02 DEBUG SystemDefaultHttpClient :: Attempt 1 to execute request
12:31:02 DEBUG DefaultClientConnection :: Sending request: GET /spl HTTP/1.1
12:31:02 DEBUG wire                 :: >> "GET /spl HTTP/1.1[\r][\n]"
12:31:02 DEBUG wire                 :: >> "Accept: text/turtle,application/n-triples;q=0.9,application/ld+json;q=0.8,application/rdf+xml;q=0.7,*/*;q=0.5[\r][\n]"
12:31:02 DEBUG wire                 :: >> "User-Agent: Apache-Jena-ARQ/2.11.2[\r][\n]"
12:31:02 DEBUG wire                 :: >> "Host: spinrdf.org[\r][\n]"
12:31:02 DEBUG wire                 :: >> "Connection: Keep-Alive[\r][\n]"
12:31:02 DEBUG wire                 :: >> "[\r][\n]"
12:31:02 DEBUG headers              :: >> GET /spl HTTP/1.1
12:31:02 DEBUG headers              :: >> Accept: text/turtle,application/n-triples;q=0.9,application/ld+json;q=0.8,application/rdf+xml;q=0.7,*/*;q=0.5
12:31:02 DEBUG headers              :: >> User-Agent: Apache-Jena-ARQ/2.11.2
12:31:02 DEBUG headers              :: >> Host: spinrdf.org
12:31:02 DEBUG headers              :: >> Connection: Keep-Alive
12:31:02 DEBUG wire                 :: << "HTTP/1.1 200 OK[\r][\n]"
12:31:02 DEBUG wire                 :: << "Date: Sun, 02 Aug 2015 09:31:02 GMT[\r][\n]"
12:31:02 DEBUG wire                 :: << "Server: Apache[\r][\n]"
12:31:02 DEBUG wire                 :: << "Last-Modified: Mon, 28 Jul 2014 03:05:21 GMT[\r][\n]"
12:31:02 DEBUG wire                 :: << "Accept-Ranges: bytes[\r][\n]"
12:31:02 DEBUG wire                 :: << "Content-Length: 240475[\r][\n]"
12:31:02 DEBUG wire                 :: << "Keep-Alive: timeout=3, max=100[\r][\n]"
12:31:02 DEBUG wire                 :: << "Connection: Keep-Alive[\r][\n]"
12:31:02 DEBUG wire                 :: << "Content-Type: text/plain[\r][\n]"
12:31:02 DEBUG wire                 :: << "[\r][\n]"
12:31:02 DEBUG DefaultClientConnection :: Receiving response: HTTP/1.1 200 OK
12:31:02 DEBUG headers              :: << HTTP/1.1 200 OK
12:31:02 DEBUG headers              :: << Date: Sun, 02 Aug 2015 09:31:02 GMT
12:31:02 DEBUG headers              :: << Server: Apache
12:31:02 DEBUG headers              :: << Last-Modified: Mon, 28 Jul 2014 03:05:21 GMT
12:31:02 DEBUG headers              :: << Accept-Ranges: bytes
12:31:02 DEBUG headers              :: << Content-Length: 240475
12:31:02 DEBUG headers              :: << Keep-Alive: timeout=3, max=100
12:31:02 DEBUG headers              :: << Connection: Keep-Alive
12:31:02 DEBUG headers              :: << Content-Type: text/plain
12:31:02 DEBUG SystemDefaultHttpClient :: Connection can be kept alive for 3000 MILLISECONDS
12:31:02 DEBUG StreamManager        :: Found: http://spinrdf.org/spl (LocatorHTTP)
12:31:02 DEBUG RDFDataMgr           :: Found: http://spinrdf.org/spl
12:31:02 DEBUG wire                 :: << "<"
12:31:02 DEBUG wire                 :: << "?"
12:31:02 DEBUG wire                 :: << "x"
12:31:02 DEBUG wire                 :: << "m"
12:31:02 DEBUG wire                 :: << "l"
12:31:02 DEBUG wire                 :: << " "
12:31:02 DEBUG wire                 :: << "v"
12:31:02 DEBUG wire                 :: << "e"
12:31:02 DEBUG wire                 :: << "r"
12:31:02 DEBUG wire                 :: << "s"
12:31:02 DEBUG wire                 :: << "i"
12:31:02 DEBUG wire                 :: << "o"
12:31:02 DEBUG wire                 :: << "n"
12:31:02 DEBUG wire                 :: << "="
12:31:02 DEBUG wire                 :: << """
12:31:02 DEBUG wire                 :: << "1"
12:31:02 DEBUG wire                 :: << "."
12:31:02 DEBUG wire                 :: << "0"
12:31:02 DEBUG wire                 :: << """
12:31:02 DEBUG wire                 :: << "?"
12:31:02 DEBUG wire                 :: << ">"
12:31:02 DEBUG wire                 :: << "[\r][\n]"
12:31:02 DEBUG wire                 :: << "<rdf:RDF[\r][\n]"
12:31:02 DEBUG wire                 :: << "    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    xmlns:afn="http://jena.hpl.hp.com/ARQ/function#"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    xmlns:spin="http://spinrdf.org/spin#"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    xmlns:fn="http://www.w3.org/2005/xpath-functions#"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    xmlns:sp="http://spinrdf.org/sp#"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    xmlns:owl="http://www.w3.org/2002/07/owl#"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    xmlns:xsd="http://www.w3.org/2001/XMLSchema#"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    xmlns:spl="http://spinrdf.org/spl#"[\r][\n]"
12:31:02 DEBUG wire                 :: << "  xml:base="http://spinrdf.org/spl">[\r][\n]"
12:31:02 DEBUG wire                 :: << "  <owl:Ontology rdf:about="">[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <owl:versionInfo rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    >1.3.0</owl:versionInfo>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <owl:imports rdf:resource="http://spinrdf.org/spin"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    >SPIN Standard Library</rdfs:label>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    >A collection of generally useful SPARQL functions (expressed as SPIN functions), and SPIN templates. Also provides a top-level classification of functions, and definitions of the standard SPARQL functions.</rdfs:comment>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdf:type rdf:resource="http://spinrdf.org/spin#LibraryOntology"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  </owl:Ontology>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="ConstraintTemplate">[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#ConstructTemplate"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    >Constraint template</rdfs:label>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    >Metaclass for CONSTRUCT templates that create spin:ConstraintViolations and can be used as values of spin:constraint.</rdfs:comment>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="TestCase">[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    >Test case</rdfs:label>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    >A test to verify that a SPIN function or magic property works as expected, and to "
12:31:02 DEBUG wire                 :: << "generate documentation of example uses of the function. Each TestCase consists of a SPARQL function call or an expression that can be executed with spin:eval, and an expected result. The test framework only needs to execute spin:eval on the expression and compare it with the expected result.</rdfs:comment>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:02 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:02 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "        >The test expression or SELECT query (anything that can be evaluated with spin:eval).</rdfs:comment>[\r][\n]"
12:31:02 DEBUG wire                 :: << "        <spl:predicate>[\r][\n]"
12:31:02 DEBUG wire                 :: << "          <rdf:Property rdf:ID="testExpression"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "        </spl:predicate>[\r][\n]"
12:31:02 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:02 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:02 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "        >The expected result of the test case, or nothing to indicate that an error is expected.</rdfs:comment>[\r][\n]"
12:31:02 DEBUG wire                 :: << "        <spl:predicate>[\r][\n]"
12:31:02 DEBUG wire                 :: << "          <rdf:Property rdf:ID="testResult"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "        </spl:predicate>[\r][\n]"
12:31:02 DEBUG wire                 :: << "        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:02 DEBUG wire                 :: << "        >true</spl:optional>[\r][\n]"
12:31:02 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="UnionTemplate">[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#Template"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    >Union template</rdfs:label>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    >This type can be used for templates that serve as the union (or "collector") of other templates. Union templates differ from other templates in that all spl:Arguments are optional. This means that union templates can be declared as subclasses of multiple other templates, yet when instantiated, only some of the arguments defined by the superclasses need to be filled in.</rdfs:comment>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  <rdf:Property rdf:ID="instance">[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.o"
12:31:02 DEBUG wire                 :: << "rg/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    >instance</rdfs:label>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="http://spinrdf.org/sp#ModuleCall"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  <rdf:Property rdf:about="http://spinrdf.org/arg#property">[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  <rdf:Property rdf:ID="class">[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    >class</rdfs:label>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  <rdf:Property rdf:ID="count">[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    >count</rdfs:label>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  <rdf:Property rdf:about="#testExpression">[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    >test expression</rdfs:label>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  <rdf:Property rdf:ID="minCount">[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#count"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  <rdf:Property rdf:ID="valueType">[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    >value type</rdfs:label>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  <rdf:Property rdf:ID="maxCount">[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#count"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  <rdf:Property rdf:about="http://spinrdf.org/arg#max">[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  <rdf:Property rdf:about="http://spinrdf.org/arg#maxCount">[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  <rdf:Property rdf:about="#testResult">[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    >testResult</rdfs:label>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  <rdf:Property rdf:ID="predicate">[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:label rdf:"
12:31:02 DEBUG wire                 :: << "datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    >predicate</rdfs:label>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  <rdf:Property rdf:about="http://spinrdf.org/arg#minCount">[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  <rdf:Property rdf:about="http://spinrdf.org/arg#min">[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  <rdf:Property rdf:ID="defaultValue">[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    >default value</rdfs:label>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  <rdf:Property rdf:ID="optional">[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    >optional</rdfs:label>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  <rdf:Property rdf:about="http://spinrdf.org/arg#pattern">[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  <rdf:Property rdf:about="http://spinrdf.org/arg#otherProperty">[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="http://spinrdf.org/sp#arg"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:02 DEBUG wire                 :: << "  <spin:SelectTemplate rdf:ID="SPINOverview">[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#SelectTemplates"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    >SPIN Overview</rdfs:label>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    >Finds all constraints and rules attached to classes in the current graph, using spin:constraint, spin:constructor, spin:rule or their sub-properties. The result set will contain the associated class, the predicate, and the SPIN rule.</rdfs:commen"
12:31:02 DEBUG wire                 :: << "t>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <spin:labelTemplate rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "    >SPIN Overview</spin:labelTemplate>[\r][\n]"
12:31:02 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:31:02 DEBUG wire                 :: << "      <sp:Select>[\r][\n]"
12:31:02 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:02 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "            <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "            <rdf:first>[\r][\n]"
12:31:02 DEBUG wire                 :: << "              <sp:Union>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                <sp:elements rdf:parseType="Collection">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                  <rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                    <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "   "
12:31:02 DEBUG wire                 :: << "                 <rdf:first>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                      <sp:Bind>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                        <sp:variable rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                          >bp</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                        </sp:variable>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                        <sp:expression rdf:resource="http://spinrdf.org/spin#constraint"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                      </sp:Bind>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                    </rdf:first>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                  </rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                  <rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                    <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                    <rdf:first>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                      <sp:Bind>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                        <sp:variable rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                          >bp</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                        </sp:variable>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                        <sp:expression rdf:resource="http://spinrdf.org/spin#constructor"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                      </sp:Bind>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                    </rdf:first>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                  </rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                  <rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                    <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                    <rdf:first>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                      <sp:Bind>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                        <sp:variable rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                          >bp</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                        </sp:variable>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                        <sp:expression rdf:resource="http://spinrdf.org/spin#rule"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                      </sp:Bind>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                    </rdf:first>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                  </rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                </sp:elements>[\r][\n]"
12:31:02 DEBUG wire                 :: << "              </sp:Union>[\r][\n]"
12:31:02 DEBUG wire                 :: << "            </rdf:first>[\r][\n]"
12:31:02 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "          <sp:TriplePath>[\r][\n]"
12:31:02 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r]"
12:31:02 DEBUG wire                 :: << "[\n]"
12:31:02 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:31:02 DEBUG wire                 :: << "            <sp:path>[\r][\n]"
12:31:02 DEBUG wire                 :: << "              <sp:ModPath>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                <sp:subPath rdf:resource="http://www.w3.org/2000/01/rdf-schema#subPropertyOf"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                <sp:modMin rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                >0</sp:modMin>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                <sp:modMax rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                >-2</sp:modMax>[\r][\n]"
12:31:02 DEBUG wire                 :: << "              </sp:ModPath>[\r][\n]"
12:31:02 DEBUG wire                 :: << "            </sp:path>[\r][\n]"
12:31:02 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "              >bp</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:02 DEBUG wire                 :: << "          </sp:TriplePath>[\r][\n]"
12:31:02 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "              >class</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:31:02 DEBUG wire                 :: << "            <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "            </sp:predicate>[\r][\n]"
12:31:02 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "              >rule</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:02 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:31:02 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:02 DEBUG wire                 :: << "              <sp:ne>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                <sp:arg2 rdf:resource="http://spinrdf.org/spin#Modules"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                  >class</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:31:02 DEBUG wire                 :: << "              </sp:ne>[\r][\n]"
12:31:02 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:02 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:31:02 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:31:02 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:02 DEBUG wire                 :: << "              <sp:notExists>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                <sp:elements rdf:parseType="Collection">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                  <rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                    <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "            "
12:31:02 DEBUG wire                 :: << "          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                      >rule</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                    </sp:subject>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                    <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                    <sp:object>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                      <spin:ConstructTemplate rdf:ID="Argument">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                        <spin:constraint>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                          <spl:Argument>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                            <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                            >the property holding the values of each function call</rdfs:comment>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                            <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                            <spl:predicate rdf:resource="#predicate"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                          </spl:Argument>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                        </spin:constraint>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                        >Provides metadata about an argument of a SPIN Function or Template. Arguments wrap a given rdf:Property (predicate) and specify its value type and whether the argument is optional. When used as spin:constraint, the body of this template will verify that a non-optional value exists and that it has the specified value type. Arguments that have been declared spl:optional true become optional if the type of ?this is spl:UnionTemplate. </rdfs:comment>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                        <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                        >Argument</rdfs:label>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                        <spin:body>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                          <sp:Construct>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                            <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                              <rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                <rdf:first>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                  <sp:Filter>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                   "
12:31:02 DEBUG wire                 :: << " <sp:expression>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                      <sp:isIRI>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                        <sp:arg1 rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                      </sp:isIRI>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                    </sp:expression>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                  </sp:Filter>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                </rdf:first>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                              </rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                              <sp:Union>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                <sp:elements rdf:parseType="Collection">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                  <rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                    <rdf:rest rdf:parseType="Collection">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                      <sp:Bind>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                        <sp:variable rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                          <sp:varName rdf:datatype=[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                          "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                          >label</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                        </sp:variable>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                        <sp:expression>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                          <sp:concat>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                            <sp:arg2>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                              <afn:localname>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  <sp:varName[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                   rdf:datatype=[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  >predicate</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                </sp:arg1>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                              </afn:localname>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                            </sp:arg2>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                            <sp:arg1>Missing value for argument </sp:arg1>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                          </sp:concat>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                        </sp:expr"
12:31:02 DEBUG wire                 :: << "ession>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                      </sp:Bind>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                    </rdf:rest>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                    <rdf:first rdf:parseType="Collection">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                      <rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                        <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                        <rdf:first>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                          <sp:Filter>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                            <sp:expression>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                              <sp:or>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                <sp:arg2>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  <sp:eq>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                    <sp:arg2 rdf:datatype=[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                    "http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                    >false</sp:arg2>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                    <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                      <sp:varName[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                       rdf:datatype=[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                      "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                      >optional</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                    </sp:arg1>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  </sp:eq>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                </sp:arg2>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                <sp:arg1>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  <sp:not>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                    <sp:arg1>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                      <sp:bound>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                          <sp:varName[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                           rdf:datatype=[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                "
12:31:02 DEBUG wire                 :: << "                          "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                          >optional</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                        </sp:arg1>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                      </sp:bound>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                    </sp:arg1>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  </sp:not>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                </sp:arg1>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                              </sp:or>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                            </sp:expression>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                          </sp:Filter>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                        </rdf:first>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                      </rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                      <sp:Filter>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                        <sp:expression>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                          <sp:notExists>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                            <sp:elements rdf:parseType="Collection">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                              <rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  <sp:varName[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                   rdf:datatype=[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  >predicate</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                </sp:predicate>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  <sp:varName[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                   rdf:datatype=[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  >value</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                    "
12:31:02 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                              </rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                            </sp:elements>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                          </sp:notExists>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                        </sp:expression>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                      </sp:Filter>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                      <sp:Filter>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                        <sp:expression>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                          <sp:notExists>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                            <sp:elements rdf:parseType="Collection">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                              <rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  <sp:varName[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                   rdf:datatype=[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  >template</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                </sp:object>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                              </rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                              <sp:Filter>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                <sp:expression>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  <spl:instanceOf>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                    <sp:arg2 rdf:resource="#UnionTemplate"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                    <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                      <sp:varName[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                       rdf:datatype=[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                      "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                      >t"
12:31:02 DEBUG wire                 :: << "emplate</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                    </sp:arg1>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  </spl:instanceOf>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                </sp:expression>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                              </sp:Filter>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                            </sp:elements>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                          </sp:notExists>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                        </sp:expression>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                      </sp:Filter>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                    </rdf:first>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                  </rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                  <rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                    <rdf:rest rdf:parseType="Collection">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                      <sp:Bind>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                 "
12:31:02 DEBUG wire                 :: << "       <sp:variable rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                          <sp:varName rdf:datatype=[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                          "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                          >label</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                        </sp:variable>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                        <sp:expression>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                          <sp:concat>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                            <sp:arg5>)</sp:arg5>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                            <sp:arg4>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                              <afn:localname>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  <sp:varName[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                   rdf:datatype=[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  >valueType</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                </sp:arg1>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                              </afn:localname>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                            </sp:arg4>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                            <sp:arg3> (expected: </sp:arg3>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                            <sp:arg2>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                              <afn:localname>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  <sp:varName[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                   rdf:datatype=[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  >predicate</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                </sp:arg1>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                              </afn:localname>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                            </sp:arg2>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                            <sp:arg1>Incorrect type of argument </sp:arg1>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                       "
12:31:02 DEBUG wire                 :: << "                   </sp:concat>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                        </sp:expression>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                      </sp:Bind>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                    </rdf:rest>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                    <rdf:first rdf:parseType="Collection">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                      <rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                        <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                        <rdf:first>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                          <sp:Filter>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                            <sp:expression>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                              <sp:bound>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  <sp:varName[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                   rdf:datatype=[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  >valueType</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                </sp:arg1>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                              </sp:bound>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                            </sp:expression>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                          </sp:Filter>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                        </rdf:first>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                      </rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                      <rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                        <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                        <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                          <sp:varName rdf:datatype=[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                          "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                          >predicate</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                        </sp:predicate>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                        <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                          <sp:varName rdf:d"
12:31:02 DEBUG wire                 :: << "atatype=[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                          "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                          >value</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                        </sp:object>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                      </rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                      <sp:Filter>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                        <sp:expression>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                          <sp:and>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                            <sp:arg2>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                              <sp:or>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                <sp:arg2>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  <sp:isLiteral>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                    <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                      <sp:varName[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                       rdf:datatype=[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                      "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                      >value</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                    </sp:arg1>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  </sp:isLiteral>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                </sp:arg2>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                <sp:arg1>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  <sp:ne>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                    <sp:arg2 rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                    <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                      <sp:varName[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                       rdf:datatype=[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                      "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                      >valueType</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                    </sp:arg1>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  </sp:ne>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                      "
12:31:02 DEBUG wire                 :: << "                          </sp:arg1>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                              </sp:or>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                            </sp:arg2>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                            <sp:arg1>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                              <sp:not>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                <sp:arg1>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  <spl:instanceOf>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                    <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                      <sp:varName[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                       rdf:datatype=[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                      "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                      >valueType</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                    </sp:arg2>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                    <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                      <sp:varName[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                       rdf:datatype=[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                      "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                      >value</sp:varName>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                    </sp:arg1>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                  </spl:instanceOf>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                                </sp:arg1>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                              </sp:not>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                            </sp:arg1>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                          </sp:and>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                        </sp:expression>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                      </sp:Filter>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                    </rdf:first>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                  </rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                </sp:elements>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                              </sp:Union>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                            </sp:where>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                            <sp:templates rdf:parseType="Collection">[\r][\n]"
12:31:02 DEBUG wire                 :: << "                      "
12:31:02 DEBUG wire                 :: << "        <rdf:Description>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                <sp:subject rdf:nodeID="A0"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                                <sp:object rdf:resource="http://spinrdf.org/spin#ConstraintViolation"/>[\r][\n]"
12:31:02 DEBUG wire                 :: << "                              </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                              <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                <sp:subject rdf:nodeID="A0"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                <sp:predicate rdf:resource="http://spinrdf.org/spin#violationRoot"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                <sp:object rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                              </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                              <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                <sp:subject rdf:nodeID="A0"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                <sp:predicate rdf:resource="http://spinrdf.org/spin#violationPath"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                  >predicate</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                              </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                              <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                <sp:subject rdf:nodeID="A0"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                <sp:predicate rdf:resource="http://www.w3.org/2000/01/rdf-schema#label"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                  >label</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                              </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            </sp:templates>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                          </sp:Construct>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        </spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                          <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <rdfs:comment "
12:31:03 DEBUG wire                 :: << "rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            >indicates whether the argument is optional</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <spl:predicate rdf:resource="#optional"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            >true</spl:optional>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                          </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                          <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            >the default value for the argument</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <spl:predicate rdf:resource="#defaultValue"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            >true</spl:optional>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                          </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        <spin:labelTemplate rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        >Argument {?predicate} : {?valueType}</spin:labelTemplate>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#ConstructTemplates"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                          <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            >the value type of the argument</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <spl:predicate rdf:resource="#valueType"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            >true</spl:optional>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                          </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        "
12:31:03 DEBUG wire                 :: << "                </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                          <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            >a comment describing the argument</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <spl:predicate rdf:resource="http://www.w3.org/2000/01/rdf-schema#comment"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            >true</spl:optional>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                          </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      </spin:ConstructTemplate>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                </sp:elements>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              </sp:notExists>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:notExists>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:elements rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      >rule</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    </sp:subject>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      <spin:ConstructTemplate rdf:ID="Attribute">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                          <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <rdfs:comment>the default value of the attribute</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <spl:predicate rdf:resource="#defaultValue"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            >true</spl:optional>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                          </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                     "
12:31:03 DEBUG wire                 :: << "   </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        <rdfs:comment>Defines an "attribute" of a class. Attribute definitions bundle common modeling patterns known from object-oriented languages like UML. Each attribute can have min and max cardinality, a value type and a default value. The attribute links a class with one RDF property. This template should be used as spin:constraints on a class to make sure that classes meet the expected cardinalities and valueType constraints.[\n]"
12:31:03 DEBUG wire                 :: << "If a model wants to use spl:defaultValue, then it should instantiate the spl:ConstructDefaultValues as a spin:constructor at some root class, such as rdfs:Resource.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                          <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <rdfs:comment>a comment describing the meaning of this attribute</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <spl:predicate rdf:resource="http://www.w3.org/2000/01/rdf-schema#comment"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            >true</spl:optional>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                          </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#ConstructTemplates"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        >Attribute</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        <spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                          <sp:Construct>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                              <sp:Union>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                <sp:elements rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                  <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                    <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                    <rdf:first>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                    "
12:31:03 DEBUG wire                 :: << "  <sp:Filter>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                        <sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                          <sp:and>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                            <sp:arg2>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                              <sp:lt>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                  <sp:varName[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                   rdf:datatype=[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                  "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                  >minCount</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                </sp:arg2>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                <sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                  <spl:objectCount>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                    <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                      <sp:varName[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                       rdf:datatype=[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                      "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                      >predicate</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                    </sp:arg2>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                    <sp:arg1 rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                  </spl:objectCount>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                </sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                              </sp:lt>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                            </sp:arg2>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                            <sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                              <sp:bound>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                  <sp:varName[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                   rdf:datatype=[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                  "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "           "
12:31:03 DEBUG wire                 :: << "                                       >minCount</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                </sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                              </sp:bound>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                            </sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                          </sp:and>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                        </sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                      </sp:Filter>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                    </rdf:first>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                  </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                  <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                    <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                    <rdf:first>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                      <sp:Filter>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                        <sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                          <sp:and>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                            <sp:arg2>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                              <sp:gt>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                  <sp:varName[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                   rdf:datatype=[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                  "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                  >maxCount</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                </sp:arg2>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                <sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                  <spl:objectCount>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                    <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                      <sp:varName[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                       rdf:datatype=[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                      "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                      >predicate</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                    </sp:arg2>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                           "
12:31:03 DEBUG wire                 :: << "                         <sp:arg1 rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                  </spl:objectCount>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                </sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                              </sp:gt>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                            </sp:arg2>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                            <sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                              <sp:bound>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                  <sp:varName[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                   rdf:datatype=[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                  "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                  >maxCount</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                </sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                              </sp:bound>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                            </sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                          </sp:and>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                        </sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                      </sp:Filter>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                    </rdf:first>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                  </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                  <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                    <rdf:rest rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                      <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                        <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                        <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                          <sp:varName rdf:datatype=[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                          "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                          >predicate</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                        </sp:predicate>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                        <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                          <sp:varName rdf:datatype="
12:31:03 DEBUG wire                 :: << "[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                          "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                          >value</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                        </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                      </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                      <sp:Filter>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                        <sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                          <sp:not>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                            <sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                              <spl:instanceOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                  <sp:varName[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                   rdf:datatype=[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                  "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                  >valueType</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                </sp:arg2>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                  <sp:varName[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                   rdf:datatype=[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                  "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                  >value</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                                </sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                              </spl:instanceOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                            </sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                          </sp:not>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                        </sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                      </sp:Filter>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                    </rdf:rest>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                    <rdf:first>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                      <sp:Filter>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                        <sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                          <sp:bound>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                            <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "     "
12:31:03 DEBUG wire                 :: << "                                         <sp:varName rdf:datatype=[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                              "http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                              >valueType</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                            </sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                          </sp:bound>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                        </sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                      </sp:Filter>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                    </rdf:first>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                  </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                </sp:elements>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                              </sp:Union>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            </sp:where>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <sp:templates rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                              <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                <sp:subject rdf:nodeID="A1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                <sp:object rdf:resource="http://spinrdf.org/spin#ConstraintViolation"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                              </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      "
12:31:03 DEBUG wire                 :: << "        <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                <sp:subject rdf:nodeID="A1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                <sp:predicate rdf:resource="http://spinrdf.org/spin#violationRoot"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                <sp:object rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                              </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                              <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                <sp:subject rdf:nodeID="A1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                <sp:predicate rdf:resource="http://spinrdf.org/spin#violationPath"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                  >predicate</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                                </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                              </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            </sp:templates>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                          </sp:Construct>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        </spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                          <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <rdfs:comment>the maximum number of values permitted for the property</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <spl:predicate rdf:resource="#maxCount"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            >true</spl:optional>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                          </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        <spin:labelTemplate rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        >Attribute {?predicate} : {?valueType} [{?minCount},{?maxCount}]</spin:labelTemplate>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                          <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <rdfs:comment>the RDF property holding the attribute value</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <spl:valueTyp"
12:31:03 DEBUG wire                 :: << "e rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <spl:predicate rdf:resource="#predicate"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                          </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                          <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <rdfs:comment>the type that all values of the property must have</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <spl:predicate rdf:resource="#valueType"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            >true</spl:optional>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                          </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                          <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <rdfs:comment>the minimum number of values permitted for the property</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <spl:predicate rdf:resource="#minCount"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                            >true</spl:optional>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                          </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      </spin:ConstructTemplate>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                </sp:elements>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              </sp:notExists>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:resultVariables rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "            >class</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#str"
12:31:03 DEBUG wire                 :: << "ing"[\r][\n]"
12:31:03 DEBUG wire                 :: << "            >property</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "            >rule</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        </sp:resultVariables>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </sp:Select>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:SelectTemplate>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spl:TestCase rdf:ID="Test-instanceOf-rdfsClassInheritance">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spl:testResult rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >true</spl:testResult>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spl:testExpression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:instanceOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:arg2 rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:arg1 rdf:resource="http://www.w3.org/2002/07/owl#Restriction"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:instanceOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spl:testExpression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spl:TestCase>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:MagicProperty rdf:ID="relevantPropertyAtClass">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#MagicProperties"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >relevant property at class</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >A magic property that establishes a relationship between properties (left) and classes (right) to determine which properties are "relevant" for the class. Relevant means that they have the class in their domain and/or restrictions, including superclasses and sub-properties (unless they define their own domain). Domains consisting of an owl:unionOf are also handled.[\n]"
12:31:03 DEBUG wire                 :: << "[\n]"
12:31:03 DEBUG wire                 :: << "Note that the performance of the body of this magic property has been optimized for the case in which the class is given, so ideally use this for queries such as  ?property spl:relevantPropertyAtClass skos:Concept .</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The property.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Propert"
12:31:03 DEBUG wire                 :: << "y"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <sp:Select>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <sp:TriplePath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >class</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:path>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:ModPath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:subPath rdf:resource="http://www.w3.org/2000/01/rdf-schema#subClassOf"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:modMin rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                >0</sp:modMin>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:modMax rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                >-2</sp:modMax>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              </sp:ModPath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:path>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >superClass</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </sp:TriplePath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <sp:Union>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:elements rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <rdf:first rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    >property</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  </sp:subject>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <sp:predicate rdf:resource="http://www.w3.org/2000/01/rdf-schema#domain"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    >superClass</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                </rdf:first>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syn"
12:31:03 DEBUG wire                 :: << "tax-ns#nil"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <rdf:first rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    >superClass</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  </sp:subject>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <sp:predicate rdf:resource="http://www.w3.org/2002/07/owl#onProperty"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    >property</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                </rdf:first>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <rdf:rest rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <sp:TriplePath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      >list</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    </sp:subject>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:path>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      <sp:ModPath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        <sp:subPath rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#rest"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        <sp:modMin rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        >0</sp:modMin>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        <sp:modMax rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        >-2</sp:modMax>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      </sp:ModPath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    </sp:path>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      >listSegment</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  </sp:TriplePath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <sp:TriplePath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      >property</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    </sp:subjec"
12:31:03 DEBUG wire                 :: << "t>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:path>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      <sp:SeqPath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        <sp:path2 rdf:resource="http://www.w3.org/2002/07/owl#unionOf"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        <sp:path1 rdf:resource="http://www.w3.org/2000/01/rdf-schema#domain"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      </sp:SeqPath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    </sp:path>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      >list</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  </sp:TriplePath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                </rdf:rest>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <rdf:first rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    >listSegment</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  </sp:subject>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#first"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    >superClass</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                </rdf:first>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:elements>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </sp:Union>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <sp:TriplePath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:subject rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:path>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:ModPath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:subPath rdf:resource="http://www.w3.org/2000/01/rdf-schema#subPropertyOf"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:modMin rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                >0</sp:modMin>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:modMax rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                >-2</sp:modMax>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              </sp:ModPath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:path>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      "
12:31:03 DEBUG wire                 :: << "      </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </sp:TriplePath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:or>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:arg2>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <sp:notExists>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:elements rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        <sp:subject rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        <sp:predicate rdf:resource="http://www.w3.org/2000/01/rdf-schema#domain"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                          >anyDomain</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    </sp:elements>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  </sp:notExists>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                </sp:arg2>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <sp:eq>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      >property</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    </sp:arg2>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:arg1 rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  </sp:eq>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              </sp:or>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:isIRI>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  >class</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              </sp:isIRI>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:resultVariables rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "            >class</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        </sp:resultVariables>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:distinct rdf:datatype="http://www.w3.org/2001"
12:31:03 DEBUG wire                 :: << "/XMLSchema#boolean"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >true</sp:distinct>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </sp:Select>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:MagicProperty>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:ConstructTemplate rdf:ID="InferDefaultValue">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#ConstructTemplates"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Infer default value</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Can be used to infer default values for a given subject/predicate combination. This is typically assigned as spin:rule to a class. If ?this does not already have a value for a given property {?predicate}, then this will infer the value {?defaultValue}.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:labelTemplate rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Default value for {?predicate}: {?defaultValue}</spin:labelTemplate>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The predicate to infer the default value of.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="#predicate"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The default value to infer.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="#defaultValue"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <sp:Construct>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <sp:Optional>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:elements rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  >predicate</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                </sp:predicate>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:object r"
12:31:03 DEBUG wire                 :: << "df:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  >anyValue</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:elements>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </sp:Optional>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:not>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <sp:bound>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      >anyValue</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    </sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  </sp:bound>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              </sp:not>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:templates rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >predicate</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:predicate>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >defaultValue</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        </sp:templates>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </sp:Construct>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:ConstructTemplate>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#coalesce">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spin:Function rdf:ID="MiscFunctions">[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#Functions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >Misc functions</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >A collection of functions that are difficult to categorize.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >true<"
12:31:03 DEBUG wire                 :: << "/spin:abstract>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >COALESCE</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Takes any number of arguments, and returns the first bound argument, starting at the left.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >COALESCE</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#rand">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spin:Function rdf:ID="MathematicalFunctions">[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#Functions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >Mathematical functions</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >A collection of functions operating on numbers.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >true</spin:abstract>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#idp3722352"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >rand</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Returns a number between 0 (inclusive) and 1.0e0 (exclusive). Different numbers can be produced every time this function is invoked. Numbers should be produced with approximately equal probability.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >RAND</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#double"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#year">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spin:Function rdf:ID="DateFunctions">[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#Functions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:label rdf:datatype="http://www.w3.org/2001/"
12:31:03 DEBUG wire                 :: << "XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >Date functions</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >A collection of functions that operate on date/time literals.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >true</spin:abstract>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >year</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Extracts the year from a date/time literal.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >year</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The date or dateTime argument.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:ID="objectInGraph">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spin:Function rdf:ID="OntologyFunctions">[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#Functions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >Ontology functions</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >A collection of functions performing ontology-related operations.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >true</spin:abstract>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >object in graph</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Gets the object of a given sub"
12:31:03 DEBUG wire                 :: << "ject (?arg1) / predicate (?arg2) combination in a given graph ?arg3. Note that if multiple values are present then the result might be unpredictably random.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The graph to query in.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg3"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The predicate to get the object of.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The subject to get the object from.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <sp:Select>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <sp:NamedGraph>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:graphNameNode rdf:resource="http://spinrdf.org/spin#_arg3"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:elements rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:subject rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:predicate rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  >object</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:elements>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </sp:NamedGra"
12:31:03 DEBUG wire                 :: << "ph>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:resultVariables rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "            >object</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        </"
12:31:03 DEBUG wire                 :: << "sp:resultVariables>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </sp:Select>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#round">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MathematicalFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-round"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >round</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Returns the number with no fractional part that is closest to the argument. If there are two such numbers, then the one that is closest to positive infinity is returned. An error is raised if ?arg1 is not a numeric value.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >round</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The number to round.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#strlen">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spin:Function rdf:ID="StringFunctions">[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#Functions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >String functions</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >A collection of functions that return strings.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >true</spin:abstract>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-strlen"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >strlen</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Computes the length of a given input string.</rdfs:c"
12:31:03 DEBUG wire                 :: << "omment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >STRLEN</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The input string.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spl:TestCase rdf:ID="Test-instanceOf-untypedString">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spl:testResult rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >true</spl:testResult>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spl:testExpression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:instanceOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:arg2 rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:arg1>test</sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:instanceOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spl:testExpression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spl:TestCase>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#strends">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-ends"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >strends</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Returns true if the lexical form of ?arg1 ends with the lexical form of ?arg2, otherwise it returns false.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >STRENDS</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The sub-string that the input string is supposed to end with.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:const"
12:31:03 DEBUG wire                 :: << "raint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The input string.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:ID="hasValueOfType">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spin:Function rdf:ID="BooleanFunctions">[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#Functions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >Boolean functions</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >A collection of functions that return a boolean value (true or false).</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >true</spin:abstract>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >hasValueOfType</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment>Checks whether a given subject (?arg1) has at least one value of a given type (?arg3) for a given property (?arg2) or one of its sub-properties.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >the type to match against</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg3"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >the expected property</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "     "
12:31:03 DEBUG wire                 :: << "   <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >the subject that is expected to have the value</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <sp:Ask>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <sp:TriplePath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >p</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:path>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:ModPath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:subPath rdf:resource="http://www.w3.org/2000/01/rdf-schema#subPropertyOf"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:modMin rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                >0</sp:modMin>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:modMax rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                >-2</sp:modMax>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              </sp:ModPath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:path>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </sp:TriplePath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:subject rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >p</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:predicate>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >value</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <spl:instanceOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:arg2 rdf:resource="http://spinrdf.org/spin#_arg3"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:arg1 rdf:parse"
12:31:03 DEBUG wire                 :: << "Type="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  >value</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              </spl:instanceOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </sp:Ask>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:SelectTemplate rdf:ID="AllArguments">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#SelectTemplates"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >All arguments</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Gets a list of all spl:Arguments declared at a given class and its superclasses.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:labelTemplate rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >All spl:Arguments of {?class}</spin:labelTemplate>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The class to get the arguments of.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="#class"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <sp:Select>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <sp:TriplePath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >class</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:path>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:ModPath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:subPath rdf:resource="http://www.w3.org/2000/01/rdf-schema#subClassOf"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:modMin rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                >0</sp:modMin>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:modMax rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                >-2</sp:modMax>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              </sp:ModPath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:path>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "             "
12:31:03 DEBUG wire                 :: << " <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >atClass</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </sp:TriplePath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >atClass</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#constraint"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >arg</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >arg</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:object rdf:resource="#Argument"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:resultVariables rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "            >arg</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "            >atClass</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        </sp:resultVariables>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </sp:Select>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:SelectTemplate>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#sha1">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MiscFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-sha1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >sha1</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Returns the SHA1 checksum, as a hex digit string, calculated on the UTF-8 repres"
12:31:03 DEBUG wire                 :: << "entation of the simple literal or lexical form of the xsd:string. Hex digits SHOULD be in lower case.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >SHA1</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The input literal.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spl:ConstraintTemplate rdf:ID="RegexPropertyConstraint">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:ConstraintTemplate rdf:ID="PropertyConstraintTemplates">[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:subClassOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <spl:ConstraintTemplate rdf:ID="ConstraintTemplates">[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#ConstructTemplates"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "            >Constraint templates</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "            >Abstract superclass of templates that can be used as spin:constraints. The subclasses are expected to construct spin:ConstraintViolations and use ?this to talk about the instances of the associated class.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:03 DEBUG wire                 :: << "            >true</spin:abstract>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </spl:ConstraintTemplate>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        </rdfs:subClassOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >Property constraint templates</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >Abstract superclass of constraint templates that constrain exactly one property.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "            >The property being constrai"
12:31:03 DEBUG wire                 :: << "ned.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <spl:predicate rdf:resource="http://spinrdf.org/arg#property"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >true</spin:abstract>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:ConstraintTemplate>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Regex property constraint</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:labelTemplate rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Values of {?property} must match the regular expression {?pattern}</spin:labelTemplate>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The regular expression to match.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/arg#pattern"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <sp:Construct>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:predicate>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >object</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:not>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <sp:regex>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      >pattern</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <"
12:31:03 DEBUG wire                 :: << "/sp:arg2>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      <xsd:string>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                          >object</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                        </sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      </xsd:string>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    </sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  </sp:regex>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              </sp:not>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <sp:Bind>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:variable rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >message</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:variable>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:concat>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:arg5>"</sp:arg5>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:arg4 rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  >pattern</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                </sp:arg4>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:arg3> must match the regular expression "</sp:arg3>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  >object</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                </sp:arg2>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:arg1>Value </sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              </sp:concat>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </sp:Bind>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:templates rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A2"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#ConstraintViolation"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A2"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#violationRoot"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </rdf:Descriptio"
12:31:03 DEBUG wire                 :: << "n>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A2"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#violationPath"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A2"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/2000/01/rdf-schema#label"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >message</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        </sp:templates>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </sp:Construct>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spl:ConstraintTemplate>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#tz">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#DateFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-tz"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >tz</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Returns the timezone part of ?arg1 as a simple literal. Returns the empty string if there is no timezone.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >TZ</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#now">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#DateFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >now</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Gets the current date and time as an xsd:dateTime literal.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >now</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#dateTime"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spl:Test"
12:31:03 DEBUG wire                 :: << "Case rdf:ID="Test-instanceOf-lingualString">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spl:testResult rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >true</spl:testResult>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spl:testExpression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:instanceOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:arg2 rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:arg1 xml:lang="en">test</sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:instanceOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spl:testExpression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spl:TestCase>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spl:TestCase rdf:ID="Test-object-noValue">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spl:testExpression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:arg2 rdf:resource="http://www.w3.org/2002/07/owl#versionInfo"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:arg1 rdf:resource="http://www.w3.org/2002/07/owl#versionInfo"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spl:testExpression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spl:TestCase>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#str">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >str</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment>Returns the lexical form of ?arg1 (a literal); returns the codepoint representation of ?arg1 (an IRI). This is useful for examining parts of an IRI, for instance, the host-name.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >str</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment>the node to convert to string</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#ceil">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MathematicalFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-ceil"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >ceil</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Returns the smallest (closest to negative infinity) number with no fractional part that is not less than the v"
12:31:03 DEBUG wire                 :: << "alue of arg. An error is raised if ?arg1 is not a numeric value.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >ceil</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The number to get the ceiling of.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:ID="hasValue">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >hasValue</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment>Checks whether a given resource (?arg1) has a given value (?arg3) for a given property (?arg2) or one of the sub-properties of it.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >the expected value</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg3"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >the property that is expected to hold the value</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >the subject that is expected to have the value</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <sp:Ask"
12:31:03 DEBUG wire                 :: << ">[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <sp:TriplePath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >p</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:path>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:ModPath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:subPath rdf:resource="http://www.w3.org/2000/01/rdf-schema#subPropertyOf"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:modMin rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                >0</sp:modMin>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:modMax rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                >-2</sp:modMax>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              </sp:ModPath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:path>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </sp:TriplePath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:subject rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >p</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:predicate>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_arg3"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </sp:Ask>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#floor">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MathematicalFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-floor"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >floor</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Returns the largest (closest to positive infinity) number with no fractional part that is not greater than the value of ?arg1. An error is raised if ?arg1 is not a numeric value.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >floor</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w"
12:31:03 DEBUG wire                 :: << "3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The value to get the floor of.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#timezone">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#DateFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-timezone"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >timezone</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Returns the timezone part of ?arg1 as an xsd:dayTimeDuration. Raises an error if there is no timezone.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >TIMEZONE</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#duration"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The input time.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#dateTime"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#in">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >IN</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Checks whether the value on the left (?arg1) is one of the values on the right (?arg2, ?arg3 ...).</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >IN</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The value to find.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:pred"
12:31:03 DEBUG wire                 :: << "icate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#strstarts">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-starts"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >strstarts</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Returns true if the lexical form of ?arg1 begins with the lexical form of ?arg2, otherwise it returns false.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >STRSTARTS</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The sub-string that the input string is supposed to begin with.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The input string.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#ge">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >ge</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment>Returns true if ?arg1 &gt;= ?arg2.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >&gt;=</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSche"
12:31:03 DEBUG wire                 :: << "ma#boolean"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment>the second operand</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment>the first operand</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:ID="hasArgument">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >has argument</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Checks if a given module class (?module) has at least one declared spl:Argument.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The module class to check.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://spinrdf.org/spin#Module"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="#class"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "     "
12:31:03 DEBUG wire                 :: << " <sp:Ask>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <sp:TriplePath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >class</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:path>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:ModPath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:subPath rdf:resource="http://www.w3.org/2000/01/rdf-schema#subClassOf"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:modMin rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                >0</sp:modMin>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:modMax rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                >-2</sp:modMax>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              </sp:ModPath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:path>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >superClass</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </sp:TriplePath>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >superClass</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#constraint"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >con</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >con</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:object rdf:resource="#Argument"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </sp:Ask>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:ID="subject">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#OntologyFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label r"
12:31:03 DEBUG wire                 :: << "df:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >subject</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Gets the "first" subject of a given predicate (?arg1)/object (?arg2) combination. Note that if multiple values are present then the result might be unpredictably random.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The object.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The predicate.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <sp:Select>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >subject</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:resultVariables rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "            >subject</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        </sp:resultVariables>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </sp:Select>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#isURI">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >isURI</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:commen"
12:31:03 DEBUG wire                 :: << "t>Checks whether a node is a URI.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >isURI</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment>the node to check</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#hours">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#DateFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >hours</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Extracts the hours from a date/time literal.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >hours</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The dateTime or time argument.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spl:TestCase rdf:ID="Test-instanceOf-typedString">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spl:testResult rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >true</spl:testResult>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spl:testExpression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:instanceOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:arg2 rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:arg1 rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >test</sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:instanceOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spl:testExpression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spl:TestCase>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#unaryPlus">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MathematicalFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#s"
12:31:03 DEBUG wire                 :: << "tring"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >unary plus</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment>Returns the operand ?arg1 with the sign unchanged. Semantically, this operation performs no operation.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >+</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment>the operand</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#minutes">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#DateFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >minutes</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Extracts the minutes from a date/time literal.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >minutes</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The dateTime or time argument.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#replace">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The replacement string.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg3"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.o"
12:31:03 DEBUG wire                 :: << "rg/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The input string.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The pattern to replace.[\n]"
12:31:03 DEBUG wire                 :: << "</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Replaces each non-overlapping occurrence of a regular expression pattern with a replacement string. Regular expession matching may involve modifier flags.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >Additional flags for the replacement.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg4"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >true</spl:optional>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-replace"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >replace</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >REPLACE</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#notIn">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >NOT IN</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment"
12:31:03 DEBUG wire                 :: << " rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Checks whether the value on the left (?arg1) is none of the values on the right (?arg2, ?arg3 ...).</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >NOT IN</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The value to find.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#strafter">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-strafter"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >strafter</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Returns a literal of the same kind (simple literal, plain literal same language tag, xsd:string) as the first argument arg1. The lexical form of the result is the substring of the value of arg1 that proceeds in arg1 the first occurrence of the lexical form of arg2; otherwise the lexical form of the result is the empty string. If the lexical form of arg2 is the empty string, the lexical form of the result is the emprty string.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >STRAFTER</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The pattern to find within the input string.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The input string.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#sha384">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MiscFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-sha384"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >sha384</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Returns the SHA384 checksum, as a hex digit string, calculated on the UTF-8 representation of the simple literal or lexical form of the xsd:string. Hex digits SHOULD be in lower case.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >SHA384</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The input literal.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#lang">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >lang</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment>Returns the language tag of ?arg1, if it has one. It returns "" if the literal has no language tag. Node that the RDF data model does not include literals with an empty language tag.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >lang</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XM"
12:31:03 DEBUG wire                 :: << "LSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment>the literal to get the language of</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#md5">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MiscFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-md5"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >md5</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Returns the MD5 checksum, as a hex digit string, calculated on the UTF-8 representation of the simple literal or lexical form of the xsd:string. Hex digits SHOULD be in lower case.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >MD5</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The input literal.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#sha256">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MiscFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-sha256"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >sha256</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Returns the SHA256 checksum, as a hex digit string, calculated on the UTF-8 representation of the simple literal or lexical form of the xsd:string. Hex digits SHOULD be in lower case.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r]"
12:31:03 DEBUG wire                 :: << "[\n]"
12:31:03 DEBUG wire                 :: << "    >SHA256</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The input literal.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#strbefore">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-strbefore"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >strbefore</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Returns a literal of the same kind (simple literal, plain literal same language tag, xsd:string) as the first argument arg1. The lexical form of the result is the substring of the value of arg1 that precedes in arg1 the first occurrence of the lexical form of arg2; otherwise the lexical form of the result is the empty string. If the lexical form of arg2 is the empty string, the lexical form of the result is the emprty string.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >STRBEFORE</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The pattern to find within the input string.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The input string.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchem"
12:31:03 DEBUG wire                 :: << "a#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spl:ConstraintTemplate rdf:ID="ExistencePropertyPairConstraint">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:ConstraintTemplate rdf:ID="PropertyPairConstraintTemplates">[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:subClassOf rdf:resource="#PropertyConstraintTemplates"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >Property pair constraint templates</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >Abstract base class for templates that take two properties as arguments and establish a relationship between them.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "            >The "other" property.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <spl:predicate rdf:resource="http://spinrdf.org/arg#otherProperty"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >true</spin:abstract>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:ConstraintTemplate>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Existence property pair constraint</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:labelTemplate rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >The property {?property} must have a value whenever {?otherProperty} has a value</spin:labelTemplate>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <sp:Construct>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:exists>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:elements rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "        "
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      >otherProperty</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    </sp:predicate>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      >someValue</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                </sp:elements>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              </sp:exists>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:notExists>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:elements rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      >property</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    </sp:predicate>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                      >object</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                </sp:elements>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              </sp:notExists>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <sp:Bind>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:variable rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >message</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:variable>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:concat>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:arg3> has</sp:arg3>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  >otherProperty</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                </sp:arg2>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:arg1>Property must have a value because </sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              </sp:conc"
12:31:03 DEBUG wire                 :: << "at>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </sp:Bind>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:templates rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A3"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#ConstraintViolation"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A3"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#violationRoot"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A3"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#violationPath"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A3"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/2000/01/rdf-schema#label"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >message</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        </sp:templates>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </sp:Construct>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spl:ConstraintTemplate>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#strlang">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-strlang"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >strlang</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Takes a string (?arg1) and a language (?arg2) and constructs a literal with a corresponding language tag.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol"
12:31:03 DEBUG wire                 :: << " rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >STRLANG</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#PlainLiteral"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The language tag, e.g. "en-AU".</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The string value.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#lcase">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-lcase"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >LCASE</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Converts a string to lower case characters.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >LCASE</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The input string.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spl:TestCase rdf:ID="Test-instanceOf-typedString-false">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spl:testResult rdf:datatype="http://ww"
12:31:03 DEBUG wire                 :: << "w.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >false</spl:testResult>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spl:testExpression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:instanceOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:arg2 rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:arg1 rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >test</sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:instanceOf>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spl:testExpression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spl:TestCase>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#uri">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#OntologyFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >URI</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Equivalent to IRI.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >URI</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The IRI string to convert to a resource.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#le">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >le</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment>Returns true if ?arg1 &lt;= ?arg2.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >&lt;=</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment>the second operand</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>"
12:31:03 DEBUG wire                 :: << "[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment>the first operand</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#bnode">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#OntologyFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-bnode"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >bnode</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Constructs a blank node that is distinct from all blank nodes in the dataset being queried and distinct from all blank nodes created by calls to this constructor for other query solutions. If the no argument form is used, every call results in a distinct blank node. If the form with a simple literal is used, every call results in distinct blank nodes for different simple literals, and the same blank node for calls with the same simple literal within expressions for one solution mapping. This functionality is compatible with the treatment of blank nodes in SPARQL CONSTRUCT templates.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >BNODE</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >A literal input node.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >true</spl:optional>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:ID="min">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MathematicalFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >min</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSche"
12:31:03 DEBUG wire                 :: << "ma#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Takes two arguments and returns the smaller one of them.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The second argument.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The first argument.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <sp:Select>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <sp:Bind>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:variable rdf:parseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >result</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:variable>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:if>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:arg3 rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:arg2 rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <sp:lt>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:arg2 rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:arg1 rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  </sp:lt>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              </sp:if>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </sp:Bind>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:resultVariables rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "            >result</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        </sp:resultVariables>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </sp:Se"
12:31:03 DEBUG wire                 :: << "lect>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#struuid">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >struuid</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Returns a string that is the scheme specific part of UUID. That is, as a simple literal, the result of generating a UUID, converting to a simple literal and removing the initial urn:uuid:.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >STRUUID</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:ID="max">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MathematicalFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >max</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Takes two arguments and returns the larger one of them.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The second argument.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The first argument.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <sp:Select>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <sp:Bind>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:variable rdf:pa"
12:31:03 DEBUG wire                 :: << "rseType="Resource">[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "              >result</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:variable>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              <sp:if>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:arg3 rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:arg2 rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                <sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  <sp:gt>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:arg2 rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                    <sp:arg1 rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                  </sp:gt>[\r][\n]"
12:31:03 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:31:03 DEBUG wire                 :: << "              </sp:if>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </sp:Bind>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <sp:resultVariables rdf:parseType="Collection">[\r][\n]"
12:31:03 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "            >result</sp:varName>[\r][\n]"
12:31:03 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        </sp:resultVariables>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </sp:Select>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#seconds">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#DateFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >seconds</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Extracts the seconds from a date/time literal.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >seconds</spin:symbol>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The dateTime or time argument.</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:03 DEBUG wire                 :: << "  <spin:Function rdf:ID="subPropertyOf">[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:subClass"
12:31:03 DEBUG wire                 :: << "Of rdf:resource="#OntologyFunctions"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >sub property of</rdfs:label>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "    >Checks whether a given property (?arg1) is a (transitive) sub-property of another property (?arg2).</rdfs:comment>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:03 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:03 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:03 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:03 DEBUG wire                 :: << "        >The potential super-property.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >The potential sub-property.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "     "
12:31:04 DEBUG wire                 :: << " </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <sp:Ask>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <sp:TriplePath>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:path>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:ModPath>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:subPath rdf:resource="http://www.w3.org/2000/01/rdf-schema#subPropertyOf"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:modMin rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                >0</sp:modMin>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:modMax rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                >-2</sp:modMax>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              </sp:ModPath>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:path>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </sp:TriplePath>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </sp:Ask>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spl:ConstraintTemplate rdf:ID="RangePropertyConstraint">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#PropertyConstraintTemplates"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Range property constraint</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Represents a constraint that narrows down a property by a minimum and maximum value compared by &lt;= and &gt;=.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:labelTemplate rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Values of {?property} must be within the interval [ {?min} , {?max} ]</spin:labelTemplate>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >The minimum value.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/arg#min"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >true</spl:optional>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSch"
12:31:04 DEBUG wire                 :: << "ema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >The maximum value.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/arg#max"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >true</spl:optional>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <sp:Construct>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:predicate>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >object</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:or>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <sp:and>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      <sp:gt>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          >max</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        </sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          >object</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      </sp:gt>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    </sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      <sp:bound>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          >max</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      </sp:bound>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    "
12:31:04 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  </sp:and>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <sp:and>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      <sp:lt>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          >min</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        </sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          >object</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      </sp:lt>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    </sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      <sp:bound>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          >min</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      </sp:bound>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  </sp:and>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              </sp:or>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <sp:Bind>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:variable rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >message</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:variable>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:concat>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg7>]</sp:arg7>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg6 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  >max</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </sp:arg6>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg5>, </sp:arg5>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg4 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  >min</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </sp:arg4>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg3> must be in the interva"
12:31:04 DEBUG wire                 :: << "l [</sp:arg3>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  >object</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg1>Value </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              </sp:concat>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </sp:Bind>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:templates rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A4"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#ConstraintViolation"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A4"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#violationRoot"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A4"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#violationPath"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A4"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/2000/01/rdf-schema#label"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >message</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        </sp:templates>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </sp:Construct>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >true</spin:abstract>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spl:ConstraintTemplate>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:ID="subClassOf">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#OntologyFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://ww"
12:31:04 DEBUG wire                 :: << "w.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >sub class of</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Checks whether a given class (?arg1) is a (transitive) sub-class of another class (?arg2).</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >The potential super-class.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >The potential sub-class.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <sp:Ask>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <sp:TriplePath>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:path>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:ModPath>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:subPath rdf:resource="http://www.w3.org/2000/01/rdf-schema#subClassOf"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:modMin rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                >0</sp:modMin>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:modMax rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                >-2</sp:modMax>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              </sp:ModPath>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:path>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </sp:TriplePath>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </sp:Ask>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#divide">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MathematicalFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#s"
12:31:04 DEBUG wire                 :: << "tring"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >divide</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>Returns the arithmetic quotient of its operands.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >/</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment>the second operand</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment>the first operand</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#isNumeric">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-isNumeric"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >is numeric</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Returns true if arg1 is a numeric value. Returns false otherwise. term is numeric if it has an appropriate datatype (see the section Operand Data Types) and has a valid lexical form, making it a valid argument to functions and operators taking numeric arguments.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >isNumeric</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >The node to check whether it's numeric.[\n]"
12:31:04 DEBUG wire                 :: << "</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http"
12:31:04 DEBUG wire                 :: << "://spinrdf.org/sp#day">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#DateFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >day</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Extracts the day from a date/time literal.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >day</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >The date or dateTime argument.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spl:ConstraintTemplate rdf:ID="ObjectCountPropertyConstraint">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:ConstraintTemplate rdf:ID="CountPropertyConstraintTemplates">[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:subClassOf rdf:resource="#PropertyConstraintTemplates"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >Count property constraint templates</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >Abstract superclass of property constraints that compare the number of values with either min or max count.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "            >The minimum number of values that the property must have.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <spl:predicate rdf:resource="http://spinrdf.org/arg#minCount"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:04 DEBUG wire                 :: << "            >true</spl:optional>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spin:constr"
12:31:04 DEBUG wire                 :: << "aint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "            >The maximum number of values that the property must have.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <spl:predicate rdf:resource="http://spinrdf.org/arg#maxCount"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:04 DEBUG wire                 :: << "            >true</spl:optional>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >true</spin:abstract>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:ConstraintTemplate>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Object count property constraint</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Represents a constraint that can be attached to a class to specify that a given property must have between min and max values.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:labelTemplate rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >The property {?property} must have between {?minCount} and {?maxCount} values</spin:labelTemplate>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <sp:Construct>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <sp:Bind>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:variable rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >objectCount</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:variable>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <spl:objectCount>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  >property</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg1 rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              </spl:objectCount>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </sp:Bind>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          "
12:31:04 DEBUG wire                 :: << "    <sp:or>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <sp:and>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      <sp:gt>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          >maxCount</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        </sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          >objectCount</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      </sp:gt>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    </sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      <sp:bound>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          >maxCount</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      </sp:bound>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  </sp:and>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <sp:and>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      <sp:lt>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          >minCount</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        </sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          >objectCount</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      </sp:lt>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    </sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      <sp:bound>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          >minCount</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "         "
12:31:04 DEBUG wire                 :: << "               </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      </sp:bound>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  </sp:and>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              </sp:or>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <sp:Bind>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:variable rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >message</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:variable>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:concat>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  >objectCount</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg1>Invalid number of values: </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              </sp:concat>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </sp:Bind>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:templates rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A5"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#ConstraintViolation"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A5"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#violationRoot"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A5"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#violationPath"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A5"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/2000/01/rdf-schema#label"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resour"
12:31:04 DEBUG wire                 :: << "ce">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >message</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        </sp:templates>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </sp:Construct>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spl:ConstraintTemplate>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#unaryMinus">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MathematicalFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >unary minus</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>Returns the operand ?arg1 with the sign reversed. If ?arg1 is positive, its negative is returned; if it is negative, its positive is returned.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >-</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment>the operand</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#iri">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#OntologyFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >IRI</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Creates a IRI resource (node) from a given IRI string (?arg1).</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >IRI</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >The IRI string to convert to a resource.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spl:ConstraintTemplate rdf:ID="UntypedObjectPropertyConstraint">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#PropertyConstraintTemplates"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Untyped object property constraint</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >A generic SPIN template that can be used to declare a constraint that all values of a given property must have an rdf:type.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:labelTemplate rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Values of {?property} must have a type</spin:labelTemplate>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <sp:Construct>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:predicate>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >object</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:notExists>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:elements rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      >object</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    </sp:subject>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      >anyType</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    </sp:object>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </sp:elements>[\r][\n]"
12:31:04 DEBUG wire                 :: << "     "
12:31:04 DEBUG wire                 :: << "         </sp:notExists>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <sp:Bind>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:variable rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >message</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:variable>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:concat>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg3> must have a type</sp:arg3>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  >object</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg1>Value </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              </sp:concat>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </sp:Bind>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:templates rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A6"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#ConstraintViolation"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A6"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#violationRoot"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A6"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#violationPath"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A6"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/2000/01/rdf-schema#label"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >message</sp:varNa"
12:31:04 DEBUG wire                 :: << "me>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        </sp:templates>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </sp:Construct>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spl:ConstraintTemplate>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spl:TestCase rdf:ID="Test-instanceOf-rdfsLiteral">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:testResult rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >true</spl:testResult>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:testExpression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:instanceOf>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:arg2 rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:arg1 rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >test</sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:instanceOf>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spl:testExpression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spl:TestCase>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spl:TestCase rdf:ID="Test-instanceOf-rdfsClass">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:testResult rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >true</spl:testResult>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:testExpression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:instanceOf>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:arg2 rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:arg1 rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:instanceOf>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spl:testExpression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spl:TestCase>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#month">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#DateFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >month</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Extracts the month from a date/time literal.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >month</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >The date or dateTime argument.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#encode_for_uri">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >encode_for_uri</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >ENCODE_FOR_URI</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >The string to convert.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spl:TestCase rdf:ID="Test-object-labelOfArgument">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:testResult rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Argument</spl:testResult>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:testExpression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <sp:Select>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <sp:NamedGraph>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:graphNameNode rdf:resource=""/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:elements rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:Bind>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:variable rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  >value</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </sp:variable>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <spl:object>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:arg2 rdf:resource="http://www.w3.org/2000/01/rdf-schema#label"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:arg1 rdf:resource="#Argument"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  </spl:object>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              </sp:Bind>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:elements>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </sp:NamedGraph>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:resultVariables rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "            >value</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        </sp:resultVariables>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </sp:Select>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spl:testExpression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spl:TestCase>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#ucase">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-ucase"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >UCASE</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Converts a string to upper case characters.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >UCASE</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >The input string.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#mul">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MathematicalFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >mul</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>Returns the arithmetic product of its operands.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >*</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment>the second operand</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment>the first operand</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:ConstructT"
12:31:04 DEBUG wire                 :: << "emplate rdf:ID="ConstructDefaultValues">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#ConstructTemplates"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Construct default values</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>This template can be attached as spin:constructor to a root class such as rdfs:Resource to ensure that SPIN processors assign default values to certain properties. Looks for any templates attached as spin:constraints to the types of ?this and then assigns their declared spl:defaultValues.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:labelTemplate rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Construct default values</spin:labelTemplate>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <sp:Construct>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >directType</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <sp:TriplePath>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >directType</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:path>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:ModPath>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:subPath rdf:resource="http://www.w3.org/2000/01/rdf-schema#subClassOf"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:modMin rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                >0</sp:modMin>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:modMax rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                >-2</sp:modMax>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              </sp:ModPath>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:path>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >type</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      "
12:31:04 DEBUG wire                 :: << "      </sp:object>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </sp:TriplePath>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >type</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#constraint"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >attribute</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >attribute</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:predicate rdf:resource="#defaultValue"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >defaultValue</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >attribute</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:predicate rdf:resource="#predicate"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >predicate</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:templates rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >predicate</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:predicate>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:v"
12:31:04 DEBUG wire                 :: << "arName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >defaultValue</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        </sp:templates>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </sp:Construct>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:ConstructTemplate>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:SelectTemplate rdf:ID="RunTestCases">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#SelectTemplates"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Run test cases</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Runs all spl:TestCases on the current model.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <sp:Select>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >testCase</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:predicate rdf:resource="#testExpression"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >expr</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <sp:Optional>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:elements rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  >testCase</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </sp:subject>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:predicate rdf:resource="#testResult"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  >expected</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </sp:object>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:elements>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </sp:Optional>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <sp:Bind>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:variable rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XM"
12:31:04 DEBUG wire                 :: << "LSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >actual</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:variable>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <spin:eval>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  >expr</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              </spin:eval>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </sp:Bind>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:or>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <sp:and>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      <sp:ne>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          >expected</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        </sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          >actual</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      </sp:ne>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    </sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      <sp:bound>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          >expected</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      </sp:bound>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  </sp:and>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <sp:ne>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      <sp:bound>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          >actual</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      </sp:bound>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    </sp:arg2>"
12:31:04 DEBUG wire                 :: << "[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      <sp:bound>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          >expected</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      </sp:bound>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  </sp:ne>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              </sp:or>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:resultVariables rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "            >testCase</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "            >expected</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "            >actual</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        </sp:resultVariables>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </sp:Select>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:SelectTemplate>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spl:TestCase rdf:ID="Test-instanceOf-rdfsClass-false">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:testResult rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >false</spl:testResult>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:testExpression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:instanceOf>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:arg2 rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:arg1 rdf:resource="http://www.w3.org/2002/07/owl#versionInfo"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:instanceOf>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spl:testExpression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spl:TestCase>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#substr">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >The start index.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <"
12:31:04 DEBUG wire                 :: << "/spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Gets the sub-string of a given string. The index of the first character is 1.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >The input string.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >The end index.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg3"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:optional rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >true</spl:optional>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >substr</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >SUBSTR</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-substr"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spl:TestCase rdf:ID="Test-instanceOf-rdfsLiteral-false">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:testResult rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >false</spl:testResult>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:testExpression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:instanceOf>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:arg2 rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:arg1 rdf:resource="http://www.w3.org/2002/07/owl#Thing"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:instanceOf>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spl:testExpression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spl:TestCase>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:ID="objectSubProp">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#OntologyFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/"
12:31:04 DEBUG wire                 :: << "2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >object sub prop</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Gets the object of a given subject (?arg1) / predicate (?arg2) combination, also taking the sub-properties of ?arg2 into account. Note that if multiple values are present then the result might be unpredictably random.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >The predicate to get the object of (including sub-properties of it).</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >The subject to get the object from.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <sp:Select>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <sp:TriplePath>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:path>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:ModPath>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:subPath rdf:resource="http://www.w3.org/2000/01/rdf-schema#subPropertyOf"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:modMin rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                >0</sp:modMin>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:modMax rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                >-2</sp:modMax>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              </sp:ModPath>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:path>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </sp:TriplePath>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Descripti"
12:31:04 DEBUG wire                 :: << "on>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:predicate>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >object</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:resultVariables rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "            >object</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        </sp:resultVariables>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </sp:Select>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#sub">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MathematicalFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >sub</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>Returns the arithmetic difference of its operands.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >-</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment>the second operand</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment>the first operand</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:ID="subjectCount">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#OntologyFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "  "
12:31:04 DEBUG wire                 :: << "  >subjectCount</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Gets the number of values of a given property (?arg1) at a given object (?arg2). The result is the number of matches of (?subject, ?arg1, ?arg2).</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >the object to get the number of subjects of</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >the predicate to get the number of subjects of</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <sp:Select>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >subject</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:subject>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:resultVariables rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "            >result</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:Count>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:expression rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  >subject</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        "
12:31:04 DEBUG wire                 :: << "      </sp:Count>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        </sp:resultVariables>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </sp:Select>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spl:ConstraintTemplate rdf:ID="NonExistencePropertyPairConstraint">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#PropertyPairConstraintTemplates"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Non-existence property pair constraint</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:labelTemplate rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >The property {?property} must have no values as long as {?otherProperty} has none</spin:labelTemplate>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <sp:Construct>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:notExists>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:elements rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      >otherProperty</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    </sp:predicate>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      >someValue</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    </sp:object>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </sp:elements>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              </sp:notExists>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:exists>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:elements rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:subject rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:predicate rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      >property</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    </sp:predicate>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      >object</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    </sp:object>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </sp:elements>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              </sp:exists>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <sp:Bind>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:variable rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >message</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:variable>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:concat>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg3> has none</sp:arg3>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  >otherProperty</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg1>Property must have no values because </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              </sp:concat>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </sp:Bind>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:templates rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A7"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#ConstraintViolation"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A7"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#violationRoot"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:resource="http://spinrdf.org/spin#_this"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A7"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://spinrdf.org/spin#violationPath"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >property</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </"
12:31:04 DEBUG wire                 :: << "sp:object>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:subject rdf:nodeID="A7"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:predicate rdf:resource="http://www.w3.org/2000/01/rdf-schema#label"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "              >message</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:object>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        </sp:templates>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </sp:Construct>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spl:ConstraintTemplate>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#abs">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MathematicalFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-abs"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >abs</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Returns the absolute value of arg. An error is raised if arg is not a numeric value.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >abs</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >The input value.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#add">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MathematicalFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >add</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>Returns the arithmetic sum of its operands.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >+</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment>the second number</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl"
12:31:04 DEBUG wire                 :: << ":Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment>the first number</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#sha512">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MiscFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-sha512"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >sha512</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Returns the SHA512 checksum, as a hex digit string, calculated on the UTF-8 representation of the simple literal or lexical form of the xsd:string. Hex digits SHOULD be in lower case.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >SHA512</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >The input literal.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#UUID">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spin:Function rdf:ID="URIFunctions">[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:subClassOf rdf:resource="http://spinrdf.org/spin#Functions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >URI functions</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >A collection of functions that create URI resources.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >true</spin:abstract>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r]"
12:31:04 DEBUG wire                 :: << "[\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >UUID</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Returns a fresh IRI from the UUID URN scheme. Each call of UUID() returns a different UUID. It must not be the "nil" UUID (all zeroes). The variant and version of the UUID is implementation dependent.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >UUID</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#langMatches">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >langMatches</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>Returns true if language-tag (first argument) matches language-range (second argument) per the basic filtering scheme defined in [RFC4647] section 3.3.1.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >langMatches</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment>the language tag that ?arg1 must have</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment>the literal that is expected to have ?arg2 as language tag</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#strdt">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#OntologyFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/spar"
12:31:04 DEBUG wire                 :: << "ql11-query/#func-strdt"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >strdt</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Constructs a literal with lexical form and type as specified by the arguments.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >STRDT</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >The datatype of the new literal.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Datatype"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >The lexical form of the new literal.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#contains">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-contains"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >contains</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Returns an xsd:boolean indicating whether or not the value of ?arg1 contains (at the beginning, at the end, or anywhere within) at least one sequence of collation units that provides a minimal match to the collation units in the value of ?arg2, according to the collation that is used.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >CONTAINS</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype"
12:31:04 DEBUG wire                 :: << "="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >The sub-string to search for in the input string.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >The input string.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:ID="isUntypedLiteral">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >isUntypedLiteral</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>Checks whether a given literal is untyped. This function was introduced because the built-in datatype operand in SPARQL casts untyped literals to xsd:string, making it impossible to check it this way. This function here uses a work-around using sameTerm instead.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >The literal to test.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <sp:Ask>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <sp:Filter>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:and>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <sp:not>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      <sp:sameTerm>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        <sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          <xsd:string>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                            "
12:31:04 DEBUG wire                 :: << "<sp:arg1 rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          </xsd:string>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        </sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        <sp:arg1 rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      </sp:sameTerm>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  </sp:not>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <sp:isLiteral>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:arg1 rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  </sp:isLiteral>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              </sp:and>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </sp:Filter>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </sp:Ask>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <sp:isIRI rdf:nodeID="A8">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <sp:arg1 rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </sp:isIRI>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A9">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>the input string</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <rdf:Description rdf:about="http://spinrdf.org/spin#eval">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >The expression to evaluate. Should be a sp:Select, sp:Ask, a sp:Variable or an instance of a SPARQL function class, but may also be a simple RDF value.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <sp:eq rdf:nodeID="A10">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <sp:arg2 rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <sp:arg1 rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </sp:eq>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#if">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MiscFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >IF</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >The SPARQL 1.1 built-in function IF.</rd"
12:31:04 DEBUG wire                 :: << "fs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >IF</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >The function result if ?arg1 is false.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg3"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >The function result if ?arg1 is true.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >A condition to evaluate - if true then the ?arg2 will be returned, otherwise ?arg3.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A11">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>the second operand</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <sp:TriplePath rdf:nodeID="A12">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <sp:subject rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "      >class</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </sp:subject>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <sp:path>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <sp:ModPath>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:subPath rdf:resource="http://www.w3.org/2000/01/rdf-schema#subClassOf"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:modMin rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >0</sp:modMin>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:modMax rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >-2</sp:modMax>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </sp:ModPath>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </sp:path>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <sp:object rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </sp:Trip"
12:31:04 DEBUG wire                 :: << "lePath>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <rdf:Description rdf:nodeID="A13">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >object</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A14">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>the first operand</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A15">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>the second operand</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <rdf:Description rdf:nodeID="A16">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdf:first>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <sp:Filter>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <sp:or>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:and>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <sp:eq>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:arg2 rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:arg1 rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  </sp:eq>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <sp:or>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      <sp:eq>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        <sp:arg2 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          >datatype</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        </sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        <sp:arg1 rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#langString"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      </sp:eq>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    </sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      <sp:not>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        <sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          <sp:bound>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                            <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                              <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                              >datatype</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                            </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                "
12:31:04 DEBUG wire                 :: << "          </sp:bound>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      </sp:not>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  </sp:or>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              </sp:and>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <sp:or>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg2 rdf:nodeID="A10"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <sp:eq>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:arg2 rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:arg1 rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      >datatype</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  </sp:eq>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              </sp:or>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:arg1>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </sp:or>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        </sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </sp:Filter>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </rdf:first>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <sp:datatype rdf:nodeID="A17">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <sp:arg1 rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </sp:datatype>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <rdf:Description rdf:nodeID="A18">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdf:first rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "      >object</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </rdf:first>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <rdf:Description rdf:nodeID="A19">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >class</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <rdf:Description rdf:nodeID="A20">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdf:first rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <sp:subject rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <sp:predicate rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <sp:object rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "        >object</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </sp:object>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </rdf:first>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <rdf:Description rdf:nodeID="A21">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <sp:varName rdf:datatype="http://www.w3.org/200"
12:31:04 DEBUG wire                 :: << "1/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >object</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <rdf:Description rdf:nodeID="A22">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdf:first rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "      >result</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:Count>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <sp:expression rdf:nodeID="A21"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        </sp:Count>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </rdf:first>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A23">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >The predicate to get the object of.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <rdf:Description rdf:nodeID="A24">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdf:rest rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#nil"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdf:first rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <sp:subject rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <sp:predicate rdf:resource="http://spinrdf.org/spin#_arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <sp:object rdf:nodeID="A13"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </rdf:first>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A25">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>the node being checked</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#not">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >not</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>Returns the boolean negation of the argument.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >!</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment>the operand to negate</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp"
12:31:04 DEBUG wire                 :: << "l:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:ID="instanceOf">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <owl:versionInfo rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Note that in TopBraid this function has been implemented in native Java code, for performance reasons.</owl:versionInfo>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <sp:Ask>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:where rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "          <sp:Union>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            <sp:elements rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <rdf:rest rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <sp:TriplePath rdf:nodeID="A12"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:subject rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:predicate rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#type"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:object rdf:nodeID="A19"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </rdf:rest>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <rdf:first rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <sp:Filter>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      <sp:or>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        <sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          <sp:isBlank>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                            <sp:arg1 rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                          </sp:isBlank>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        </sp:arg2>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        <sp:arg1 rdf:nodeID="A8"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      </sp:or>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    </sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  </sp:Filter>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </rdf:first>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              <rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <rdf:rest rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <rdf:rest rdf:nodeID="A16"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <rdf:first>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:Bind>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      <sp:variable rdf:parseType="Resource">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        >datatype</sp:varName>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      </sp:variable>[\r][\n]"
12:31:04 DEBUG wire                 :: << " "
12:31:04 DEBUG wire                 :: << "                     <sp:expression rdf:nodeID="A17"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    </sp:Bind>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  </rdf:first>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </rdf:rest>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                <rdf:first rdf:parseType="Collection">[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  <sp:Filter>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    <sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      <sp:isLiteral>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                        <sp:arg1 rdf:resource="http://spinrdf.org/spin#_arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                      </sp:isLiteral>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                    </sp:expression>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                  </sp:Filter>[\r][\n]"
12:31:04 DEBUG wire                 :: << "                </rdf:first>[\r][\n]"
12:31:04 DEBUG wire                 :: << "              </rdf:Description>[\r][\n]"
12:31:04 DEBUG wire                 :: << "            </sp:elements>[\r][\n]"
12:31:04 DEBUG wire                 :: << "          </sp:Union>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        </sp:where>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </sp:Ask>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment>the type that the instance must have</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>Checks whether a given resource (?arg1) has a given type (?arg2). In order to fulfill this condition, there must either be a triple ?arg1 rdf:type ?arg2, or ?instance rdf:type ?subClass where ?subClass is a subclass of ?arg2. If the first argument is a literal, then the second argument must be the matching XSD datatype.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:labelTemplate rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >{?arg1} instance of {?arg2}</spin:labelTemplate>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment>the instance being tested</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >instanceOf</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Functi"
12:31:04 DEBUG wire                 :: << "on>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <sp:Select rdf:nodeID="A26">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <sp:where rdf:nodeID="A20"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <sp:resultVariables rdf:nodeID="A18"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </sp:Select>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A27">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >The subject to get the object from.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A28">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >the subject to get the number of objects of</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#lt">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >lt</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>Returns true if ?arg1 &lt; ?arg2.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >&lt;</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A11"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment>the first operand</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#eq">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >eq</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>Returns true if both arguments are equal.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >=</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http:"
12:31:04 DEBUG wire                 :: << "//www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment>the second value to compare</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment>the first value to compare</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#notExists">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >NOT EXISTS</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >The filter function NOT EXISTS. The graph pattern is stored in sp:elements.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >NOT EXISTS</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#concat">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3."
12:31:04 DEBUG wire                 :: << "org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >concat</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >The CONCAT built-in function. Creates a single string by concatenating all arguments from left to right. Note that if any one of the arguments is unbound (null) then the whole result string will be unbound.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >CONCAT</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A29">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>the node being tested</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A30">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>the first operand</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#isIRI">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >isIRI</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>Checks whether a given node is a IRI node.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >isIRI</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment>the node being tested</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A31">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>the first operand of the intersection</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A32">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>the property to get the number of val"
12:31:04 DEBUG wire                 :: << "ues of</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:valueType rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A33">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>the first argument</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#datatype">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#OntologyFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >datatype</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>Returns the datatype IRI of argument ?arg1; returns xsd:string if the parameter is a simple literal.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >datatype</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment>the literal to get the datatype of</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2000/01/rdf-schema#Literal"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#gt">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >gt</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>Returns true if ?arg1 &gt; arg2.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >&gt;</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A15"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A30"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A34">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>the flags</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg3"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:optional rdf:datatype"
12:31:04 DEBUG wire                 :: << "="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >true</spl:optional>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#ne">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >ne</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>Returns true if ?arg1 != ?arg2.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >!=</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment>the second operand</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A14"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:ID="object">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <owl:versionInfo rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Note that in TopBraid this function has been implemented in native Java code, for performance reasons.</owl:versionInfo>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#OntologyFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >object</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Gets the object of a given subject (?arg1) / predicate (?arg2) combination. Note that if multiple values are present then the result might be unpredictably random.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A23"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A27"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:body rdf:nodeID="A26"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#bound">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >bound</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>Returns true if ?arg1 is bound to a value. Returns false otherwise. Variables with the value NaN or INF are considered bound.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/X"
12:31:04 DEBUG wire                 :: << "MLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >bound</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment>the variable or expression that is checked</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:ID="objectCount">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#OntologyFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >objectCount</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>Gets the number of values of a given property (?arg2) at a given subject (?arg1). The result is the number of matches of (?arg1, ?arg2, ?object).</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A32"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A28"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:body>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <sp:Select>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:where rdf:nodeID="A24"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <sp:resultVariables rdf:nodeID="A22"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </sp:Select>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:body>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A35">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>the match pattern</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A36">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>the second operand of the intersection</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#regex">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A9"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>Returns true if a string (?arg1) matches the regular expression supplied as a pattern (?arg2) as influenced by the value of flags (?arg3), otherwise returns false.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-regex"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://w"
12:31:04 DEBUG wire                 :: << "ww.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A34"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#StringFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A35"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >regex</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >regex</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#and">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >and</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>Return the logical AND between two (boolean) operands.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >&amp;&amp;</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A36"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A31"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A37">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>the second operand</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#isBlank">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >isBlank</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>Checks whether a given node is a blank node.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >isBlank</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A25"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#or">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >or</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>Returns the logical OR between two (boolean) operands.</rdfs:"
12:31:04 DEBUG wire                 :: << "comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >||</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A37"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      <spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <rdfs:comment>the first operand</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "        <spl:predicate rdf:resource="http://spinrdf.org/sp#arg1"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "      </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spl:Argument rdf:nodeID="A38">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>the second argument</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spl:predicate rdf:resource="http://spinrdf.org/sp#arg2"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spl:Argument>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#sameTerm">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:seeAlso rdf:resource="http://www.w3.org/TR/sparql11-query/#func-sameTerm"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >same term</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >Returns TRUE if ?arg1 and ?arg2 are the same RDF term as defined in Resource Description Framework (RDF): Concepts and Abstract Syntax; returns FALSE otherwise.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >sameTerm</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A38"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A33"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#exists">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >EXISTS</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >The filter function EXISTS. The graph pattern is stored in sp:elements.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >EXISTS</spin:symbol"
12:31:04 DEBUG wire                 :: << ">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  <spin:Function rdf:about="http://spinrdf.org/sp#isLiteral">[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#BooleanFunctions"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >isLiteral</rdfs:label>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <rdfs:comment>Checks whether a given node is a literal.</rdfs:comment>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:symbol rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:04 DEBUG wire                 :: << "    >isLiteral</spin:symbol>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:returnType rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "    <spin:constraint rdf:nodeID="A29"/>[\r][\n]"
12:31:04 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:04 DEBUG wire                 :: << "</rdf:RDF>[\r][\n]"
12:31:04 DEBUG wire                 :: << "[\r][\n]"
12:31:04 DEBUG wire                 :: << "<!-- Created with TopBraid -->[\r][\n]"
12:31:04 DEBUG PoolingClientConnectionManager :: Connection [id: 3][route: {}->http://spinrdf.org] can be kept alive for 3000 MILLISECONDS
12:31:04 DEBUG PoolingClientConnectionManager :: Connection released: [id: 3][route: {}->http://spinrdf.org][total kept alive: 1; route allocated: 1 of 5; total allocated: 1 of 10]
12:31:04 DEBUG FileManager          :: readModel(model,http://siima.net/ont/accessories)
12:31:04 DEBUG FileManager          :: readModel(model,http://siima.net/ont/accessories, null)
12:31:04 DEBUG StreamManager        :: Mapped: http://siima.net/ont/accessories => data/models/importing_models/accessories.ttl
12:31:04 DEBUG AdapterFileManager   :: Map: http://siima.net/ont/accessories => data/models/importing_models/accessories.ttl
12:31:04 DEBUG StreamManager        :: open(data/models/importing_models/accessories.ttl)
12:31:04 DEBUG StreamManager        :: Not mapped: data/models/importing_models/accessories.ttl
12:31:04 DEBUG StreamManager        :: Found: data/models/importing_models/accessories.ttl (LocatorFile)
12:31:04 DEBUG RDFDataMgr           :: Found: data/models/importing_models/accessories.ttl
12:31:04 DEBUG FileManager          :: readModel(model,http://spinrdf.org/spin)
12:31:04 DEBUG FileManager          :: readModel(model,http://spinrdf.org/spin, null)
12:31:04 DEBUG StreamManager        :: Not mapped: http://spinrdf.org/spin
12:31:04 DEBUG StreamManager        :: open(http://spinrdf.org/spin)
12:31:04 DEBUG StreamManager        :: Not mapped: http://spinrdf.org/spin
12:31:04 DEBUG HttpOp               :: [5] GET http://spinrdf.org/spin
12:31:04 DEBUG PoolingClientConnectionManager :: Connection request: [route: {}->http://spinrdf.org][total kept alive: 0; route allocated: 0 of 5; total allocated: 0 of 10]
12:31:04 DEBUG PoolingClientConnectionManager :: Connection leased: [id: 4][route: {}->http://spinrdf.org][total kept alive: 0; route allocated: 1 of 5; total allocated: 1 of 10]
12:31:04 DEBUG DefaultClientConnectionOperator :: Connecting to spinrdf.org:80
12:31:04 DEBUG RequestAddCookies    :: CookieSpec selected: best-match
12:31:04 DEBUG RequestAuthCache     :: Auth cache not set in the context
12:31:04 DEBUG RequestTargetAuthentication :: Target auth state: UNCHALLENGED
12:31:04 DEBUG RequestProxyAuthentication :: Proxy auth state: UNCHALLENGED
12:31:04 DEBUG SystemDefaultHttpClient :: Attempt 1 to execute request
12:31:04 DEBUG DefaultClientConnection :: Sending request: GET /spin HTTP/1.1
12:31:04 DEBUG wire                 :: >> "GET /spin HTTP/1.1[\r][\n]"
12:31:04 DEBUG wire                 :: >> "Accept: text/turtle,application/n-triples;q=0.9,application/ld+json;q=0.8,application/rdf+xml;q=0.7,*/*;q=0.5[\r][\n]"
12:31:04 DEBUG wire                 :: >> "User-Agent: Apache-Jena-ARQ/2.11.2[\r][\n]"
12:31:04 DEBUG wire                 :: >> "Host: spinrdf.org[\r][\n]"
12:31:04 DEBUG wire                 :: >> "Connection: Keep-Alive[\r][\n]"
12:31:04 DEBUG wire                 :: >> "[\r][\n]"
12:31:04 DEBUG headers              :: >> GET /spin HTTP/1.1
12:31:04 DEBUG headers              :: >> Accept: text/turtle,application/n-triples;q=0.9,application/ld+json;q=0.8,application/rdf+xml;q=0.7,*/*;q=0.5
12:31:04 DEBUG headers              :: >> User-Agent: Apache-Jena-ARQ/2.11.2
12:31:04 DEBUG headers              :: >> Host: spinrdf.org
12:31:04 DEBUG headers              :: >> Connection: Keep-Alive
12:31:05 DEBUG wire                 :: << "HTTP/1.1 200 OK[\r][\n]"
12:31:05 DEBUG wire                 :: << "Date: Sun, 02 Aug 2015 09:31:05 GMT[\r][\n]"
12:31:05 DEBUG wire                 :: << "Server: Apache[\r][\n]"
12:31:05 DEBUG wire                 :: << "Last-Modified: Thu, 21 Aug 2014 23:25:03 GMT[\r][\n]"
12:31:05 DEBUG wire                 :: << "Accept-Ranges: bytes[\r][\n]"
12:31:05 DEBUG wire                 :: << "Content-Length: 40053[\r][\n]"
12:31:05 DEBUG wire                 :: << "Keep-Alive: timeout=3, max=100[\r][\n]"
12:31:05 DEBUG wire                 :: << "Connection: Keep-Alive[\r][\n]"
12:31:05 DEBUG wire                 :: << "Content-Type: text/plain[\r][\n]"
12:31:05 DEBUG wire                 :: << "[\r][\n]"
12:31:05 DEBUG DefaultClientConnection :: Receiving response: HTTP/1.1 200 OK
12:31:05 DEBUG headers              :: << HTTP/1.1 200 OK
12:31:05 DEBUG headers              :: << Date: Sun, 02 Aug 2015 09:31:05 GMT
12:31:05 DEBUG headers              :: << Server: Apache
12:31:05 DEBUG headers              :: << Last-Modified: Thu, 21 Aug 2014 23:25:03 GMT
12:31:05 DEBUG headers              :: << Accept-Ranges: bytes
12:31:05 DEBUG headers              :: << Content-Length: 40053
12:31:05 DEBUG headers              :: << Keep-Alive: timeout=3, max=100
12:31:05 DEBUG headers              :: << Connection: Keep-Alive
12:31:05 DEBUG headers              :: << Content-Type: text/plain
12:31:05 DEBUG SystemDefaultHttpClient :: Connection can be kept alive for 3000 MILLISECONDS
12:31:05 DEBUG StreamManager        :: Found: http://spinrdf.org/spin (LocatorHTTP)
12:31:05 DEBUG RDFDataMgr           :: Found: http://spinrdf.org/spin
12:31:05 DEBUG wire                 :: << "<"
12:31:05 DEBUG wire                 :: << "?"
12:31:05 DEBUG wire                 :: << "x"
12:31:05 DEBUG wire                 :: << "m"
12:31:05 DEBUG wire                 :: << "l"
12:31:05 DEBUG wire                 :: << " "
12:31:05 DEBUG wire                 :: << "v"
12:31:05 DEBUG wire                 :: << "e"
12:31:05 DEBUG wire                 :: << "r"
12:31:05 DEBUG wire                 :: << "s"
12:31:05 DEBUG wire                 :: << "i"
12:31:05 DEBUG wire                 :: << "o"
12:31:05 DEBUG wire                 :: << "n"
12:31:05 DEBUG wire                 :: << "="
12:31:05 DEBUG wire                 :: << """
12:31:05 DEBUG wire                 :: << "1"
12:31:05 DEBUG wire                 :: << "."
12:31:05 DEBUG wire                 :: << "0"
12:31:05 DEBUG wire                 :: << """
12:31:05 DEBUG wire                 :: << "?"
12:31:05 DEBUG wire                 :: << ">"
12:31:05 DEBUG wire                 :: << "[\r][\n]"
12:31:05 DEBUG wire                 :: << "<rdf:RDF[\r][\n]"
12:31:05 DEBUG wire                 :: << "    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    xmlns:spin="http://spinrdf.org/spin#"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    xmlns:sp="http://spinrdf.org/sp#"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    xmlns:owl="http://www.w3.org/2002/07/owl#"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    xmlns:arg="http://spinrdf.org/arg#"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    xmlns:xsd="http://www.w3.org/2001/XMLSchema#"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    xmlns:spl="http://spinrdf.org/spl#"[\r][\n]"
12:31:05 DEBUG wire                 :: << "  xml:base="http://spinrdf.org/spin">[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <owl:Ontology rdf:about="">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <owl:versionInfo rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >1.3.2</owl:versionInfo>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <owl:imports rdf:resource="http://spinrdf.org/sp"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >SPIN Modeling Vocabulary</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >An RDF Schema that can be used to attach constraints and rules to RDFS classes, and to encapsulate reusable SPARQL queries into functions and templates.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </owl:Ontology>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Function">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      <rdfs:Class rdf:ID="Module"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Function</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Metaclass for functions that can be used in SPARQL expressions (e.g. FILTER or BIND). The function themselves are classes that are instances of this metaclass. Function calls are instances of the function classes, with property values for the arguments.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      <spl:Attribute>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "        >the body of the function</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <spl:predicate>[\r][\n]"
12:31:05 DEBUG wire                 :: << "          <rdf:Property rdf:ID="body"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        </spl:predicate>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <spl:minCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:05 DEBUG wire                 :: << "        >0</spl:minCount>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <spl:maxCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:05 DEBUG wire                 :: << "        >1</spl:maxCo"
12:31:05 DEBUG wire                 :: << "unt>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      </spl:Attribute>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="TableDataProvider">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Table data provider</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >An abstraction of objects that can produce tabular data. This serves as a base class of spin:SelectTemplate, because SELECT queries can produce tables with columns for each result variable. However, other types of TableDataProviders are conceivable by other frameworks, and this class may prove as a useful shared foundation.[\n]"
12:31:05 DEBUG wire                 :: << "[\n]"
12:31:05 DEBUG wire                 :: << "TableDataProviders can link to definitions of columns via spin:column, and these definitions can inform rendering engines.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="ConstructTemplate">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      <rdfs:Class rdf:ID="Template"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Construct template</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      <spl:Attribute>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "        >The CONSTRUCT query wrapped by this template.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <spl:valueType>[\r][\n]"
12:31:05 DEBUG wire                 :: << "          <rdf:Description rdf:about="http://spinrdf.org/sp#Construct">[\r][\n]"
12:31:05 DEBUG wire                 :: << "            <rdfs:subClassOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "              <rdfs:Class rdf:ID="Rule"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "            </rdfs:subClassOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "          </rdf:Description>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        </spl:valueType>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <spl:predicate>[\r][\n]"
12:31:05 DEBUG wire                 :: << "          <rdf:Property rdf:about="#body"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        </spl:predicate>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <spl:minCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:05 DEBUG wire                 :: << "        >0</spl:minCount>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <spl:maxCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:05 DEBUG wire                 :: << "        >1</spl:maxCount>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      </spl:Attribute>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="ConstraintViolationLevel">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://www.w3.org/"
12:31:05 DEBUG wire                 :: << "2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Constraint violation level</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >The type of the supported levels of constraint violations, including spin:Error and spin:Warning.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdfs:Class rdf:about="#Rule">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://spinrdf.org/sp#Command"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Rule</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Groups together the kinds of SPARQL commands that can appear as SPIN rules and constructors: CONSTRUCT, DELETE WHERE and DELETE/INSERT. This class is never to be instantiated directly.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdfs:Class rdf:about="#Module">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Module</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >An abstract building block of a SPARQL system. A Module can take Arguments as input and applies them on an input RDF Graph. The Arguments should be declared as spin:constraints.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="AskTemplate">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Template"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Ask template</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >A SPIN template that wraps an ASK query.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      <spl:Attribute>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "        >The ASK query wrapped by this template.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://spinrdf.org/sp#Ask"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <spl:predicate>[\r][\n]"
12:31:05 DEBUG wire                 :: << "          <rdf:Property rdf:about="#bo"
12:31:05 DEBUG wire                 :: << "dy"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        </spl:predicate>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <spl:minCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:05 DEBUG wire                 :: << "        >0</spl:minCount>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <spl:maxCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:05 DEBUG wire                 :: << "        >1</spl:maxCount>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      </spl:Attribute>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="UpdateTemplate">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Template"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Update template</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >A SPIN template that has an UPDATE command as its body.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      <spl:Attribute>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "        >The UPDATE command wrapped by this template.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://spinrdf.org/sp#Update"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <spl:predicate>[\r][\n]"
12:31:05 DEBUG wire                 :: << "          <rdf:Property rdf:about="#body"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        </spl:predicate>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <spl:minCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:05 DEBUG wire                 :: << "        >0</spl:minCount>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <spl:maxCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:05 DEBUG wire                 :: << "        >1</spl:maxCount>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      </spl:Attribute>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="RuleProperty">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Rule property</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >The metaclass of spin:rule and its subproperties. spin:RuleProperties can have additional metadata attached to them.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdfs:C"
12:31:05 DEBUG wire                 :: << "lass>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="ConstraintViolation">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Constraint violation</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment>An object that can be created by spin:constraints to provide information about a constraint violation.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Modules">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org"
12:31:05 DEBUG wire                 :: << "/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Modules</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment>An "artificial" parent class for all Functions and Templates.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <spin:constructor>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      <spl:ConstructDefaultValues/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    </spin:constructor>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="SelectTemplate">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Template"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#TableDataProvider"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Select template</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >A SPIN template that wraps a SELECT query.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      <spl:Attribute>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "        >The SELECT query wrapped by this template.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <spl:valueType rdf:resource="http://spinrdf.org/sp#Select"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <spl:predicate>[\r][\n]"
12:31:05 DEBUG wire                 :: << "          <rdf:Property rdf:about="#body"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        </spl:predicate>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <spl:minCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:05 DEBUG wire                 :: << "        >0</spl:minCount>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <spl:maxCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:05 DEBUG wire                 :: << "        >1</spl:maxCount>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      </spl:Attribute>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Column">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Column</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Provides metadata about a column in the result set of a (SPARQL) query, for example of the body queries of SPIN templates. Columns can define human-readable labels that serve as column titles, using rdfs:label.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="LibraryOntology">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://www.w3.org/2002/07/owl#Ontology"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Library ontology</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment>A marker class that can be attached to base URIs (ontologies) to instruct SPIN engines that this ontology only contains a library of SPIN declarations. Library Ontologies should be ignored by SPIN inference engines even if they have been imported by a domain model. For example, a SPIN version of OWL RL may contain all the OWL RL axioms, attached to owl:Thing, but nothing else. However, when executed, these axioms should not be executed over themselves, because we don't want the system to reason about the SPIN triples to speed up things.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="MagicProperty">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Property"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Function"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Magic property</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdfs:Class rdf:about="#Template">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Module"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Template</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >The metaclass of SPIN templates. Templates are classes that are instances of this class. A template represents a reusable SPARQL query or update request that can be parameterized with arguments. Templates can be instantiated in places where normally a SPARQL query or update request is used, in particular as spin:rules and spin:constraints.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <spin:constraint>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      <spl:Attribute>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "        >the body of the Template</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <spl:predicate>[\r][\n]"
12:31:05 DEBUG wire                 :: << "          <rdf:Property rdf:about="#body"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        </spl:predicate>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <spl:minCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:05 DEBUG wire                 :: << "        >0</spl:minCount>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <spl:maxCount rdf:datatype="http://www.w3.org/2001/XMLSchema#integer"[\r][\n]"
12:31:05 DEBUG wire                 :: << "        >1</spl:maxCount>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      </spl:"
12:31:05 DEBUG wire                 :: << "Attribute>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    </spin:constraint>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Property rdf:ID="update">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      <rdf:Property rdf:ID="command"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://spinrdf.org/sp#Update"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >update</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Can be used to point from any resource to an Update.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Property rdf:ID="returnType">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      <rdf:Property rdf:ID="systemProperty"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >return type</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Function"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment>The return type of a Function, e.g. xsd:string.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Property rdf:ID="violationValue">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      <rdf:Property rdf:about="#systemProperty"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >violation value</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#ConstraintViolation"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >An optional attribute of ConstraintViolations to point at a specific RDF node that caused the violation. Should be accessible from the root via the violationPath.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Property rdf:about="#body">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      <rdf:Property rdf:about="#systemProperty"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://spinrdf.org/sp#Command"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >body</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment>The body of a Function or Template. This points to a Query instance. For Functions, this is limited to either ASK or SELECT type queries. If the body is the ASK functio"
12:31:05 DEBUG wire                 :: << "n then the return value is xsd:boolean. Otherwise, the SELECT query must have a single return variable. The first binding of this SELECT query will be returned as result of the function call.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Property rdf:ID="violationRoot">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      <rdf:Property rdf:about="#systemProperty"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >violation root</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#ConstraintViolation"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment>The root resource of the violation (often ?this in the constraint body).</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Property rdf:about="#systemProperty">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >system property</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment>An "abstract" base property that groups together those system properties that the user will hardly ever need to see in property trees. This property may be dropped in future versions of this ontology - right now it's mainly here for convenience.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Property rdf:ID="private">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >private</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Module"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Can be set to true to indicate that a SPIN function or template is only meant to be used as a helper of other modules, but not directly. Among others, this allows user interfaces to filter out private modules. Furthermore, it tells potential users of this module that they should avoid using this module, as it may not be stable.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Property rdf:ID="nextRuleProperty">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#RuleProperty"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >next rule property</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#RuleProperty"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Can be used to link two sub-properties of spin:rule (or spin:rule itself) to instruct the SPIN engine to execute one set of rules before another one. The values of the subject property will be executed before those of the object property.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Property rdf:ID="labelTemplate">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >label template</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Template"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment>A template string for displaying instantiations of a module in human-readable form. The template may contain the argument variable names in curly braces to support substitution. For example, "The number of values of the {?arg1} property."</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Property rdf:ID="constructor">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      <rdf:Property rdf:about="#command"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#Rule"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >constructor</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Can be used to attach a "constructor" to a class. A constructor is a SPARQL CONSTRUCT query or INSERT/DELETE Update operation that can add initial values to the current instance. At execution time, the variable ?this is bound to the current instance. Tools can call constructors of a class and its superclasses when an instance of a class has been created. Constructors will also be used to initialize resources that have received a new"
12:31:05 DEBUG wire                 :: << " rdf:type triple as a result of spin:rules firing.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Property rdf:ID="violationPath">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >violation path</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#ConstraintViolation"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment>An optional attribute of ConstraintViolations to provide a path expression from the root resource to the value that is invalid. If this is a URI then the path represents the predicate of a subject/predicate combination. Otherwise it should be a blank node of type sp:Path.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Property rdf:ID="abstract">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >abstract</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Module"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment>Can be set to true to indicate that this module shall not be instantiated. Abstract modules are only there to organize other modules into hierarchies.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Property rdf:ID="fix">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#UpdateTemplate"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >fix</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#ConstraintViolation"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Can be used to link a ConstraintViolation with one or more UPDATE Templates that would help fix the violation.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Property rdf:ID="columnWidth">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >column width</r"
12:31:05 DEBUG wire                 :: << "dfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Column"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >The preferred width of the associated Column, for display purposes. Values in pixels (rendering engines may multiply the values depending on resolution).</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Property rdf:ID="columnIndex">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >column index</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Column"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >The index of a column (from left to right) starting at 0.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Property rdf:ID="column">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#Column"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >column</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#TableDataProvider"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Can link a TableDataProvider (esp. SelectTemplate) with one or more columns that provide metadata for rendering purposes. Columns can be sorted by their spin:columnIndex (which must align with the ordering of variables in the SELECT query starting with 0). Not all result variables of the underlying query need to have a matching spin:Column.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Property rdf:ID="symbol">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >symbol</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Function"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment>The symbol of a function, e.g. "=" for the eq function.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Property rdf:ID="violationLevel">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:re"
12:31:05 DEBUG wire                 :: << "source="#systemProperty"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#ConstraintViolationLevel"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >violation level</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#ConstraintViolation"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >An optional attribute of ConstraintViolations to point at a violation level (such as Error and Warning). Defaults to spin:Error.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Property rdf:ID="columnType">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >column type</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Column"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdf"
12:31:05 DEBUG wire                 :: << "s:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >The datatype or resource type of a spin:Column. For example this is useful as metadata to inform a rendering engine that numeric columns (e.g. xsd:float) need to be right-aligned.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Property rdf:ID="constraint">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      <rdf:Property rdf:ID="query"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >constraint</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment>Links a class with constraints on its instances. The values of this property are "axioms" expressed as CONSTRUCT or ASK queries where the variable ?this refers to the instances of the surrounding class. ASK queries must evaluate to false for each member of this class - returning true means that the instance ?this violates the constraint. CONSTRUCT queries must create instances of spin:ConstraintViolation to provide details on the reason for the violation.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Property rdf:ID="violationSource">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >violation source</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#ConstraintViolation"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Can be used to link a spin:ConstraintViolation with the query or template call that caused it. This property is typically filled in automatically by the constraint checking engine and does not need to be set manually. However, it can be useful to learn more about the origin of a violation.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Property rdf:about="#query">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      <rdf:Property rdf:about="#command"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://spinrdf.org/sp#Q"
12:31:05 DEBUG wire                 :: << "uery"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >query</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment>Can be used to point from any resource to a Query.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Property rdf:ID="thisUnbound">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >this unbound</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="http://spinrdf.org/sp#Construct"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Can be set to true for SPIN rules and constraints that do not require pre-binding the variable ?this with all members of the associated class. This flag should only be set to true if the WHERE clause is sufficiently strong to only bind instances of the associated class, or its subclasses. In those cases, the engine can greatly improve performance of query execution, because it does not need to add clauses to narrow down the WHERE clause.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Property rdf:ID="cachable">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >cachable</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Function"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Can be set to true to instruct the SPIN engine that it may cache the results of all calls to the associated function. Functions should only be marked as cachable if the same combination of input arguments always returns the same result. Functions that query a graph or other background data that may change over time should not be cached. Caching can significantly improve performance of frequently needed functions.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Property rdf:about="#command">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://spinrdf.org/sp#Com"
12:31:05 DEBUG wire                 :: << "mand"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >command</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Can be used to link a resource with a SPARQL query or update request (sp:Command).</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Property rdf:ID="rulePropertyMaxIterationCount">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >rule property max iteration count</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#RuleProperty"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Can be attached to spin:rule (or subclasses thereof) to instruct a SPIN rules engine that it shall only execute the rules max times. If no value is specified, then the rules will be executed with no specific limit.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <owl:OntologyProperty rdf:ID="imports">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2002/07/owl#Ontology"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >imports</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="http://www.w3.org/2002/07/owl#Ontology"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Can be used to link an RDF graph (usually the instance of owl:Ontology) with a SPIN library to define constraints. SPIN-aware tools should include the definitions from those libraries for constraint checking. Using such libraries is a simpler alternative than explicitly importing them using owl:imports, because it does not force all the SPIN triples into the RDF model.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </owl:OntologyProperty>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <spin:ConstraintViolationLevel rdf:ID="Warning">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Warning</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XML"
12:31:05 DEBUG wire                 :: << "Schema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Indicates that the associated constraint violation is a problem that may not have to be fixed but may lead to issues in the future.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </spin:ConstraintViolationLevel>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <spin:MagicProperty rdf:ID="construct">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      <spin:MagicProperty rdf:ID="MagicProperties">[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <rdfs:subClassOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "          <spin:Function rdf:ID="Functions">[\r][\n]"
12:31:05 DEBUG wire                 :: << "            <rdfs:subClassOf rdf:resource="#Modules"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "            <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "            >Functions</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "            <rdfs:comment>An abstract base class for all defined functions. This class mainly serves as a shared root so that the various instances of the Function metaclass are grouped together.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "            <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:05 DEBUG wire                 :: << "            >true</spin:abstract>[\r][\n]"
12:31:05 DEBUG wire                 :: << "          </spin:Function>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        </rdfs:subClassOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "        >Magic properties</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "        >An abstract superclass that can be used to group all spin:MagicProperty instances under a single parent class.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:05 DEBUG wire                 :: << "        >true</spin:abstract>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      </spin:MagicProperty>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >construct</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Evaluates a given sp:Construct or SPIN template call (first argument on the left hand side) and binds the resulting triples to the variables on the right hand side.[\n]"
12:31:05 DEBUG wire                 :: << "[\n]"
12:31:05 DEBUG wire                 :: << "Example:[\n]"
12:31:05 DEBUG wire                 :: << "[\n]"
12:31:05 DEBUG wire                 :: << "    (?query "this" owl:Thing) spin:construct (?s ?p ?o)[\n]"
12:31:05 DEBUG wire                 :: << "[\n]"
12:31:05 DEBUG wire                 :: << "will execute the sp:Construct ?query using the binding of owl:Thing to ?this. The resulting triples will be bound to ?s, ?"
12:31:05 DEBUG wire                 :: << "p and ?o. If any of ?s ?p ?o are bound, it will only return the matching triples.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </spin:MagicProperty>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <sp:Variable rdf:ID="_arg4">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >arg4</sp:varName>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </sp:Variable>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <spin:ConstructTemplate rdf:ID="ConstructTemplates">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      <spin:Template rdf:ID="Templates">[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <rdfs:subClassOf rdf:resource="#Modules"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "        >Templates</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "        >Suggested abstract base class for all Templates.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "        <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:05 DEBUG wire                 :: << "        >true</spin:abstract>[\r][\n]"
12:31:05 DEBUG wire                 :: << "      </spin:Template>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Construct templates</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Suggested abstract base class for all ConstructTemplates.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >true</spin:abstract>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </spin:ConstructTemplate>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <spin:Function rdf:ID="ask">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Functions"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >ask</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Executes a given ASK query and returns its boolean result. The first argument must point to an sp:Ask or a SPIN template call that has an ASK query as its body. All subsequent argument can come in pairs, with the first one being a variable name and the second its binding.[\n]"
12:31:05 DEBUG wire                 :: << "[\n]"
12:31:05 DEBUG wire                 :: << "Example:[\n]"
12:31:05 DEBUG wire                 :: << "[\n]"
12:31:05 DEBUG wire                 :: << "    BIND (spin:ask(?query, "this", owl:Thing) AS ?result) .[\n]"
12:31:05 DEBUG wire                 :: << "[\n]"
12:31:05 DEBUG wire                 :: << "will execute the sp:Ask behind ?query with the variable ?this pre-bound to owl:Thing.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <spin:ConstraintViolationLevel rdf:ID="Info">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment "
12:31:05 DEBUG wire                 :: << "rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Indicates that the associated constraint violation is a not a problem. This level can be used for diagnostic and debugging purposes.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Info</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </spin:ConstraintViolationLevel>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Description rdf:about="http://spinrdf.org/sp#Modify">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Rule"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Description>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <spin:ConstraintViolationLevel rdf:ID="Fatal">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Fatal</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Indicates that the associated constraint violation is a severe error that must be fixed. Constraint checking engines may decide to stop further evaluation once a fatal error has been detected.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </spin:ConstraintViolationLevel>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <spin:MagicProperty rdf:ID="select">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#MagicProperties"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >select</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Executes a given SELECT or ASK query (or a corresponding SPIN template call) and binds its result rows to the variables specified on the right hand side. May also pre-bind variables for the query execution, using name-value pairs on the left hand side.[\n]"
12:31:05 DEBUG wire                 :: << "[\n]"
12:31:05 DEBUG wire                 :: << "Example:[\n]"
12:31:05 DEBUG wire                 :: << "[\n]"
12:31:05 DEBUG wire                 :: << "    (?query "this" owl:Thing) spin:select (?a ?b)[\n]"
12:31:05 DEBUG wire                 :: << "[\n]"
12:31:05 DEBUG wire                 :: << "will execute the sp:Select or sp:Ask that ?query points to and pre-bind ?this with the value of owl:Thing for the execution of the query. The first result variable of the query's result set will be bound to ?a, the second to ?b etc. If the nodes on the right are bound (or constants) then it will match with the values from the result set.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </spin:MagicProperty>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <spin:Function rdf:ID="eval">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Functions"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/X"
12:31:05 DEBUG wire                 :: << "MLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >eval</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Evaluates a given SPIN expression or SELECT or ASK query, and returns its result. The first argument must be the expression in SPIN RDF syntax. All other arguments must come in pairs: first a property name, and then a value. These name/value pairs will be pre-bound variables for the execution of the expression.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </spin:Function>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <sp:Variable rdf:ID="_arg5">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >arg5</sp:varName>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </sp:Variable>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <sp:Variable rdf:ID="_arg1">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >arg1</sp:varName>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </sp:Variable>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <spin:ConstraintViolationLevel rdf:ID="Error">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Error</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Indicates that the associated constraint violation is an error that should be fixed.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </spin:ConstraintViolationLevel>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <spin:AskTemplate rdf:ID="AskTemplates">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Templates"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Ask templates</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Suggested abstract base class for all AskTemplates.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >true</spin:abstract>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </spin:AskTemplate>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <spin:SelectTemplate rdf:ID="SelectTemplates">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Templates"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Select templates</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Suggested abstract base class for all SelectTemplates.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >true</spin:a"
12:31:05 DEBUG wire                 :: << "bstract>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </spin:SelectTemplate>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <sp:Variable rdf:ID="_arg2">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >arg2</sp:varName>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </sp:Variable>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <sp:Variable rdf:ID="_this">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >_this</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment>A system variable representing the current context instance in a rule or constraint.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >this</sp:varName>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </sp:Variable>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <rdf:Description rdf:about="http://spinrdf.org/sp#DeleteWhere">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Rule"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </rdf:Description>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <spin:UpdateTemplate rdf:ID="UpdateTemplates">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Templates"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Update templates</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >Suggested abstract base class for all UpdateTemplates.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <spin:abstract rdf:datatype="http://www.w3.org/2001/XMLSchema#boolean"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >true</spin:abstract>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </spin:UpdateTemplate>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <spin:RuleProperty rdf:ID="rule">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#command"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#Rule"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >rule</rdfs:label>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >An inferencing rule attached to a class. Rules are expressed as CONSTRUCT queries or INSERT/DELETE operations where the variable ?this will be bound to the current instance of the class. These inferences can be used to derive new values from existing values at the instance.</rdfs:comment>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </spin:RuleProperty>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  <sp:Variable rdf:ID="_arg3">[\r][\n]"
12:31:05 DEBUG wire                 :: << "    <sp:varName rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:05 DEBUG wire                 :: << "    >arg3</sp:varName>[\r][\n]"
12:31:05 DEBUG wire                 :: << "  </sp:Variable>[\r][\n]"
12:31:05 DEBUG wire                 :: << "</rdf:RDF>[\r][\n]"
12:31:05 DEBUG wire                 :: << "[\r][\n]"
12:31:05 DEBUG wire                 :: << "<!-- Created with Top"
12:31:05 DEBUG PoolingClientConnectionManager :: Connection manager is shutting down
12:31:05 DEBUG DefaultClientConnection :: Connection 0.0.0.0:49741<->192.145.236.11:80 closed
12:31:05 DEBUG DefaultClientConnection :: Connection 0.0.0.0:49741<->192.145.236.11:80 closed
12:31:05 DEBUG wire                 :: << "Braid -->[\r][\n]"
12:31:05 DEBUG PoolingClientConnectionManager :: Connection manager shut down
12:31:05 DEBUG PoolingClientConnectionManager :: Connection [id: 4][route: {}->http://spinrdf.org] can be kept alive for 3000 MILLISECONDS
12:31:05 DEBUG PoolingClientConnectionManager :: Connection released: [id: 4][route: {}->http://spinrdf.org][total kept alive: 1; route allocated: 1 of 5; total allocated: 1 of 10]
12:31:05 DEBUG FileManager          :: readModel(model,http://spinrdf.org/sp)
12:31:05 DEBUG FileManager          :: readModel(model,http://spinrdf.org/sp, null)
12:31:05 DEBUG StreamManager        :: Not mapped: http://spinrdf.org/sp
12:31:05 DEBUG StreamManager        :: open(http://spinrdf.org/sp)
12:31:05 DEBUG StreamManager        :: Not mapped: http://spinrdf.org/sp
12:31:05 DEBUG HttpOp               :: [6] GET http://spinrdf.org/sp
12:31:05 DEBUG PoolingClientConnectionManager :: Connection manager is shutting down
12:31:05 DEBUG PoolingClientConnectionManager :: Connection request: [route: {}->http://spinrdf.org][total kept alive: 0; route allocated: 0 of 5; total allocated: 0 of 10]
12:31:05 DEBUG DefaultClientConnection :: Connection 0.0.0.0:49739<->192.145.236.11:80 closed
12:31:05 DEBUG PoolingClientConnectionManager :: Connection leased: [id: 5][route: {}->http://spinrdf.org][total kept alive: 0; route allocated: 1 of 5; total allocated: 1 of 10]
12:31:05 DEBUG DefaultClientConnection :: Connection 0.0.0.0:49739<->192.145.236.11:80 closed
12:31:05 DEBUG PoolingClientConnectionManager :: Connection manager shut down
12:31:05 DEBUG DefaultClientConnectionOperator :: Connecting to spinrdf.org:80
12:31:05 DEBUG PoolingClientConnectionManager :: Connection manager is shutting down
12:31:05 DEBUG DefaultClientConnection :: Connection 0.0.0.0:49738<->192.145.236.11:80 closed
12:31:05 DEBUG DefaultClientConnection :: Connection 0.0.0.0:49738<->192.145.236.11:80 closed
12:31:05 DEBUG PoolingClientConnectionManager :: Connection manager shut down
12:31:05 DEBUG PoolingClientConnectionManager :: Connection manager is shutting down
12:31:05 DEBUG DefaultClientConnection :: Connection 0.0.0.0:49740<->192.145.236.11:80 closed
12:31:05 DEBUG DefaultClientConnection :: Connection 0.0.0.0:49740<->192.145.236.11:80 closed
12:31:05 DEBUG PoolingClientConnectionManager :: Connection manager shut down
12:31:05 DEBUG RequestAddCookies    :: CookieSpec selected: best-match
12:31:05 DEBUG RequestAuthCache     :: Auth cache not set in the context
12:31:05 DEBUG RequestTargetAuthentication :: Target auth state: UNCHALLENGED
12:31:05 DEBUG RequestProxyAuthentication :: Proxy auth state: UNCHALLENGED
12:31:05 DEBUG SystemDefaultHttpClient :: Attempt 1 to execute request
12:31:05 DEBUG DefaultClientConnection :: Sending request: GET /sp HTTP/1.1
12:31:05 DEBUG wire                 :: >> "GET /sp HTTP/1.1[\r][\n]"
12:31:05 DEBUG wire                 :: >> "Accept: text/turtle,application/n-triples;q=0.9,application/ld+json;q=0.8,application/rdf+xml;q=0.7,*/*;q=0.5[\r][\n]"
12:31:05 DEBUG wire                 :: >> "User-Agent: Apache-Jena-ARQ/2.11.2[\r][\n]"
12:31:05 DEBUG wire                 :: >> "Host: spinrdf.org[\r][\n]"
12:31:05 DEBUG wire                 :: >> "Connection: Keep-Alive[\r][\n]"
12:31:05 DEBUG wire                 :: >> "[\r][\n]"
12:31:05 DEBUG headers              :: >> GET /sp HTTP/1.1
12:31:05 DEBUG headers              :: >> Accept: text/turtle,application/n-triples;q=0.9,application/ld+json;q=0.8,application/rdf+xml;q=0.7,*/*;q=0.5
12:31:05 DEBUG headers              :: >> User-Agent: Apache-Jena-ARQ/2.11.2
12:31:05 DEBUG headers              :: >> Host: spinrdf.org
12:31:05 DEBUG headers              :: >> Connection: Keep-Alive
12:31:06 DEBUG wire                 :: << "HTTP/1.1 200 OK[\r][\n]"
12:31:06 DEBUG wire                 :: << "Date: Sun, 02 Aug 2015 09:31:06 GMT[\r][\n]"
12:31:06 DEBUG wire                 :: << "Server: Apache[\r][\n]"
12:31:06 DEBUG wire                 :: << "Last-Modified: Thu, 12 Sep 2013 01:29:39 GMT[\r][\n]"
12:31:06 DEBUG wire                 :: << "Accept-Ranges: bytes[\r][\n]"
12:31:06 DEBUG wire                 :: << "Content-Length: 45280[\r][\n]"
12:31:06 DEBUG wire                 :: << "Keep-Alive: timeout=3, max=100[\r][\n]"
12:31:06 DEBUG wire                 :: << "Connection: Keep-Alive[\r][\n]"
12:31:06 DEBUG wire                 :: << "Content-Type: text/plain[\r][\n]"
12:31:06 DEBUG wire                 :: << "[\r][\n]"
12:31:06 DEBUG DefaultClientConnection :: Receiving response: HTTP/1.1 200 OK
12:31:06 DEBUG headers              :: << HTTP/1.1 200 OK
12:31:06 DEBUG headers              :: << Date: Sun, 02 Aug 2015 09:31:06 GMT
12:31:06 DEBUG headers              :: << Server: Apache
12:31:06 DEBUG headers              :: << Last-Modified: Thu, 12 Sep 2013 01:29:39 GMT
12:31:06 DEBUG headers              :: << Accept-Ranges: bytes
12:31:06 DEBUG headers              :: << Content-Length: 45280
12:31:06 DEBUG headers              :: << Keep-Alive: timeout=3, max=100
12:31:06 DEBUG headers              :: << Connection: Keep-Alive
12:31:06 DEBUG headers              :: << Content-Type: text/plain
12:31:06 DEBUG SystemDefaultHttpClient :: Connection can be kept alive for 3000 MILLISECONDS
12:31:06 DEBUG StreamManager        :: Found: http://spinrdf.org/sp (LocatorHTTP)
12:31:06 DEBUG RDFDataMgr           :: Found: http://spinrdf.org/sp
12:31:06 DEBUG wire                 :: << "<"
12:31:06 DEBUG wire                 :: << "?"
12:31:06 DEBUG wire                 :: << "x"
12:31:06 DEBUG wire                 :: << "m"
12:31:06 DEBUG wire                 :: << "l"
12:31:06 DEBUG wire                 :: << " "
12:31:06 DEBUG wire                 :: << "v"
12:31:06 DEBUG wire                 :: << "e"
12:31:06 DEBUG wire                 :: << "r"
12:31:06 DEBUG wire                 :: << "s"
12:31:06 DEBUG wire                 :: << "i"
12:31:06 DEBUG wire                 :: << "o"
12:31:06 DEBUG wire                 :: << "n"
12:31:06 DEBUG wire                 :: << "="
12:31:06 DEBUG wire                 :: << """
12:31:06 DEBUG wire                 :: << "1"
12:31:06 DEBUG wire                 :: << "."
12:31:06 DEBUG wire                 :: << "0"
12:31:06 DEBUG wire                 :: << """
12:31:06 DEBUG wire                 :: << "?"
12:31:06 DEBUG wire                 :: << ">"
12:31:06 DEBUG wire                 :: << "[\r][\n]"
12:31:06 DEBUG wire                 :: << "<rdf:RDF[\r][\n]"
12:31:06 DEBUG wire                 :: << "    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    xmlns:spin="http://spinrdf.org/spin#"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    xmlns:sp="http://spinrdf.org/sp#"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    xmlns:owl="http://www.w3.org/2002/07/owl#"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    xmlns:xsd="http://www.w3.org/2001/XMLSchema#"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    xmlns:spl="http://spinrdf.org/spl#"[\r][\n]"
12:31:06 DEBUG wire                 :: << "  xml:base="http://spinrdf.org/sp">[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <owl:Ontology rdf:about="">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <owl:versionInfo rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >1.5.0</owl:versionInfo>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >SPIN SPARQL Syntax</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >An RDF schema to syntactically represent SPARQL queries and update commands as RDF triples.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </owl:Ontology>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Path">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdfs:Class rdf:ID="SystemClass"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Path</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>The base class of SPARQL property path expressions. Paths are used by sp:TriplePath triple paths.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Asc">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdfs:Class rdf:ID="OrderByCondition"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Asc</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>Marker to indicate ascending order.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Sum">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdfs:Class rdf:ID="Aggregation"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >SUM</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Represents sum aggregations, e.g. SELECT SUM(?varName)...</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Union">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdfs:Class rdf:ID="ElementGroup"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="htt"
12:31:06 DEBUG wire                 :: << "p://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Union</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>A UNION group.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="TriplePattern">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdfs:Class rdf:ID="Triple"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdfs:Class rdf:ID="Element"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Triple pattern</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>A triple pattern used in the body of a query.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="GroupConcat">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Aggregation"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >GROUP_CONCAT</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Represents GROUP_CONCAT aggregations.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Load">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdfs:Class rdf:ID="Update"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Load</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >A LOAD Update operation. The document to load is specified using sp:document, and the (optional) target graph using sp:into.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="DeleteData">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Update"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Delete data</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >An Update operation to delete specific triples. The graph triples are represented using sp:data, which points to an rdf:List of sp:Triples or sp:NamedGraphs.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Desc">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#OrderByCondition"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/200"
12:31:06 DEBUG wire                 :: << "1/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Desc</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>Marker to indicate descending order.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="TripleTemplate">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Triple"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Triple template</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>A prototypical triple used as template in the head of a Construct query. May contain variables.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Max">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Aggregation"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >MAX</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Represents MAX aggregations.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Avg">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Aggregation"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >AVG</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Represents AVG aggregations.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Modify">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Update"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Modify</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Represents a MODIFY (part of SPARQL UPDATE language). The graph IRIs are stored in sp:graphIRI. The template patterns are stored in sp:deletePattern and sp:insertPattern. The WHERE clause is represented using sp:where.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:about="#Element">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#SystemClass"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Element</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>An abstract base clas"
12:31:06 DEBUG wire                 :: << "s for all pattern elements.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="TriplePath">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdfs:Class rdf:ID="Tuple"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Element"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Triple path</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>Similar to a TriplePattern, but with a path expression as its predicate. For example, this can be used to express transitive sub-class relationships (?subClass rdfs:subClassOf* ?superClass).</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:about="#ElementGroup">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Element"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Element group</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>Abstract base class of group patterns.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="ElementList">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#ElementGroup"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Element list</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>A list of Elements. This class is never instantiated directly as SPIN will use plain rdf:Lists to store element lists.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="SubQuery">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Element"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Sub query</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >A nested SELECT query inside of an element list. The query is stored in sp:query.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Min">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Aggregation"/>"
12:31:06 DEBUG wire                 :: << "[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >MIN</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Represents MIN aggregations.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Bind">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Element"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Bind</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >A BIND element.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <r"
12:31:06 DEBUG wire                 :: << "dfs:Class rdf:ID="Optional">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#ElementGroup"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Optional</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>An optional element in a query.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="AltPath">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Path"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Alt path</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>An alternative path with the union of sp:path1 and sp:path2.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Count">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Aggregation"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >COUNT</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Counts the number of times a variable is used. The variable is stored in the variable property. This might be left blank to indicate COUNT(*).</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="ReversePath">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Path"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Reverse path</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>A path with reversed direction.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Construct">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdfs:Class rdf:ID="Query"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Construct</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>A CONSTRUCT-type query that can be used to construct new triples from template triples (head) that use variable bindings from the match patterns (body).</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Variable">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#SystemClass"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Variable</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>A variable mentioned in a Triple or expression. Variables are often blank node"
12:31:06 DEBUG wire                 :: << "s with the variable name stored in ts:name. Variables can also be supplied with a URI in which case the system will attempt to reuse the same variable instance across multiple query definitions.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Ask">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Query"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Ask</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>An ASK query that returns true if the condition in the body is met by at least one result set.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="ModPath">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Path"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Mod path</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>A modified path such as rdfs:subClassOf*.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:about="#Tuple">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#SystemClass"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Tuple</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>Abstract base class for things that have subject and object.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Create">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Update"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Create</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >An Update operation that creates a new empty graph with a name specified by sp:graphIRI. May have sp:silent set to true.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:about="#Aggregation">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#SystemClass"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Aggregation</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>Base class of aggregation types (not part of the SPARQL 1.0 standard but supported by ARQ and other engines).</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf"
12:31:06 DEBUG wire                 :: << "s:Class rdf:ID="NamedGraph">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#ElementGroup"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Named graph</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>A named Graph element such as GRAPH &lt;uri&gt; {...}.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:about="#Query">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdfs:Class rdf:ID="Command"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Query</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>Abstract base class of the various types of supported queries. Common to all types of queries is that they can have a body ("WHERE clause").</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="ReverseLinkPath">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Path"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Reverse link path</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Values">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Element"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Values</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >A VALUES element. sp:varNames points to an rdf:List of strings for the variables, sp:values to an rdf:List of rdf:Lists with nodes for each variable, in the order defined by the variables list.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="NotExists">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#ElementGroup"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Not exists</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >A NOT EXISTS element group.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:about="#Update">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#Command"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Update</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Abstract base cl"
12:31:06 DEBUG wire                 :: << "ass to group the various SPARQL UPDATE commands.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Drop">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Update"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Drop</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >An Update operation that removes a specified graph from the Graph Store. Must specify the graph using sp:graphIRI, or sp:default, sp:named or sp:all. May have the SILENT flag, encoded using sp:silent.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:about="#Triple">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Tuple"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Triple</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >A base class for TriplePattern and TripleTemplate. This basically specifies that subject, predicate and object must be present.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="DeleteWhere">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Update"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Delete where</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >An Update operation where the triples matched by the WHERE clause (sp:where) will be the triples deleted.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="InsertData">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Update"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Insert data</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >An Update operation to insert specific triples. The graph triples are represented using sp:data, which points to an rdf:List of sp:Triples or sp:NamedGraphs.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Service">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#ElementGroup"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Service</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:com"
12:31:06 DEBUG wire                 :: << "ment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >A SERVICE call that matches a nested sub-pattern against a SPARQL end point specified by a URI.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:about="#OrderByCondition">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdfs:Class rdf:about="#SystemClass"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subClassOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Order by condition</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>An abstract base class for ascending or descending order conditions. Instances of this class (typically bnodes) must have a value for expression to point to the actual values.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Select">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Query"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Select query</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>A SELECT-type query that returns variable bindings as its result.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Exists">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#ElementGroup"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Exists</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >An EXISTS element group.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Filter">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Element"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Filter</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>A constraint element that evaluates a given expression to true or false.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Minus">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#ElementGroup"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Minus</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >A MINUS element group.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:about="#SystemClass">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <r"
12:31:06 DEBUG wire                 :: << "dfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >SP System class</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>An "artificial" root class that groups all SP classes. This makes them look much less overwhelming in UI tools. Typical end users don't need to see those classes anyway.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Clear">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Update"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Clear</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >An Update operation that removes all triples from a specified graph. Must specify the graph using sp:graphIRI, or sp:default, sp:named or sp:all. May have the SILENT flag, encoded using sp:silent.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Describe">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Query"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Describe</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>A DESCRIBE-type Query.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:about="#Command">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#SystemClass"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Command</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >A shared superclass for sp:Query and sp:Update that can be used to specify that the range of property can be either one.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="SeqPath">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Path"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Seq path</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>A sequence of multiple paths.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdfs:Class rdf:ID="Sample">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Aggregation"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >SAMPLE</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Represents SAMPLE aggregations</rdfs:comment>[\r]"
12:31:06 DEBUG wire                 :: << "[\n]"
12:31:06 DEBUG wire                 :: << "  </rdfs:Class>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="arg5">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdf:Property rdf:ID="arg"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >arg5</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>The fifth argument of a function call. Further arguments are not common in SPARQL, therefore no sp:arg6, etc are defined here. However, they can be created if needed.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="path1">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdf:Property rdf:ID="systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#Path"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >path1</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>The first child path of a property path. Used by sp:AltPath and sp:SeqPath.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="arg1">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdf:Property rdf:about="#arg"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >arg1</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>The first argument of a function call.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="default">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdf:Property rdf:about="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >default</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Used in DROP and CLEAR.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="values">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdf:Property rdf:about="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#Values"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >values</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Query"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >The VALUES block at the end of"
12:31:06 DEBUG wire                 :: << " a query. The object may just be an untyped blank node, i.e. the sp:Values type triple is optional.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="object">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdf:Property rdf:about="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <"
12:31:06 DEBUG wire                 :: << "rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >object</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Tuple"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>An RDF Node or Variable describing the object of a triple.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="graphNameNode">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdf:Property rdf:about="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >graph name node</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#NamedGraph"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>The name (URI or Variable) of a NamedGraph.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="varName">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdf:Property rdf:about="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >varName</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Variable"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>The name of a Variable.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="named">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdf:Property rdf:about="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >named</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Used in DROP and CLEAR.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="as">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdf:Property rdf:about="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#Variable"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >as</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>Points to a Variable used in an AS statement such as COUNT aggregates.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:about="#systemProperty">[\r][\n]"
12:31:06 DEBUG wire                 :: << "  "
12:31:06 DEBUG wire                 :: << "  <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >SP system property</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>An abstract base proprerty that groups together the SP system properties. Users typically don't need to see them anyway.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="distinct">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >distinct</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Select"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>A marker property to indicate that a Select query is of type SELECT DISTINCT.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="path2">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#Path"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >path2</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>The second child path of a property path. Used by sp:AltPath and sp:SeqPath.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="orderBy">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >order by</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Query"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>Links a query with an ORDER BY clause where the values are rdf:List containing OrderByConditions or expressions. While the domain of this property is sp:Query, only Describe and Select queries can have values of it.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="variable">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#Variable"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >variable</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Bind"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >The variable of a Bin"
12:31:06 DEBUG wire                 :: << "d element.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="arg4">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdf:Property rdf:about="#arg"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >arg4</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>The forth argument of a function call.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="silent">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >silent</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="having">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >having</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Select"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Points from a SELECT query to a list of HAVING expressions.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="query">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#Query"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >query</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#SubQuery"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Links a SubQuery resource with the nested Query.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="groupBy">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >group by</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Select"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>Points from a Query to the list of GROUP BY expressions.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="graphIRI">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPr"
12:31:06 DEBUG wire                 :: << "opertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >graph IRI</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Points to graph names (IRIs) in various sp:Update operations.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="limit">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#long"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >limit</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Query"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>The LIMIT solution modifier of a Query.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="using">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >using</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Modify"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="templates">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >templates</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Construct"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>Points to a list of TripleTemplates that form the head of a Construct query.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="resultNodes">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >result nodes</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Describe"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>Contains the result nodes (URI resources or Variables) of a Describe query.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  "
12:31:06 DEBUG wire                 :: << "<rdf:Property rdf:ID="usingNamed">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >using named</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Modify"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="arg3">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "      <rdf:Property rdf:about="#arg"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    </rdfs:subPropertyOf>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >arg3</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>The third argument of a function call.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="reduced">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >reduced</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Select"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>A property with true to indicate that a Select query has a REDUCED flag.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="subPath">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >sub path</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>The child path of a property path expression. This is used by ReversePath and ModPath.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="into">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >into</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Load"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >The (optional) target of a LOAD Update operation.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="with">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema"
12:31:06 DEBUG wire                 :: << "#Resource"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >with</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Modify"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="serviceURI">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >service URI</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Service"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Used by sp:Service to specify the URI of the SPARQL end point to invoke. Must point to a URI node.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="where">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#ElementList"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >where</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>The WHERE clause of a Query.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="document">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >document</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Load"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >The URI of the document to load using a LOAD Update operation.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="resultVariables">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >result variables</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Select"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>An rdf:List of variables that are returned by a Select query.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="separator">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#system"
12:31:06 DEBUG wire                 :: << "Property"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >separator</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#GroupConcat"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Stores the separator="..." value of a GROUP_CONCAT (sp:GroupConcat) aggregation.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="text">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >text</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>Can be attached to sp:Queries to store a textual representation of the query. This can be useful for tools that do not have a complete SPIN Syntax parser available.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="path">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#Path"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >path</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#TriplePath"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>Points from a TriplePath to its path.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="modMax">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >mod max</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#ModPath"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="bindings">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >bindings</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Values"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >The actual bindings of a sp:Values element.</rdf"
12:31:06 DEBUG wire                 :: << "s:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:about="#arg">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >arg</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>Abstract superproperty for the enumerated arg1, arg2 etc.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="elements">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="#ElementList"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >elements</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>Points to an ElementList, for example in an Optional element.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="predicate">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >predicate</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Triple"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>A resource or Variable describing the predicate of a triple.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="node">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >node</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#ReverseLinkPath"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="fromNamed">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >from named</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Query"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>Specifies a named RDF Dataset used by a Query (FROM NAMED syntax in SPARQL). Values of this property must be URI resources.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="arg2">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#arg"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >arg2</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>The second argument of a function call"
12:31:06 DEBUG wire                 :: << ".</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="subject">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >subject</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Tuple"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>A resource or Variable describing the subject of a triple.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="deletePattern">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >delete pattern</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Update"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Points to a list of sp:TripleTemplates and sp:NamedGraphs in a modify operation.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="expression">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >expression</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>Points to an expression, for example in a Filter or Assignment.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="all">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#boolean"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >all</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Used in DROP and CLEAR.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="from">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2000/01/rdf-schema#Resource"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >from</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Query"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>Specifies an RDF Datas"
12:31:06 DEBUG wire                 :: << "et used by a Query (FROM syntax in SPARQL). Values of this property must be URI resources.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="offset">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#long"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >offset</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Query"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment>The OFFSET solution modifier of a Query.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="varNames">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >var names</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Values"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >The names of the variables (xsd:strings) of the variables declared for a VALUES element.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="modMin">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >mod min</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#ModPath"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <rdf:Property rdf:ID="insertPattern">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subPropertyOf rdf:resource="#systemProperty"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:range rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#List"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >insert pattern</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:domain rdf:resource="#Modify"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Points to a list of sp:TripleTemplates or sp:NamedGraphs in a modify command.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </rdf:Property>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <owl:DeprecatedClass rdf:ID="Delete">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Modify"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema"
12:31:06 DEBUG wire                 :: << "#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Delete</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Deprecated - use sp:Modify instead.[\n]"
12:31:06 DEBUG wire                 :: << "[\n]"
12:31:06 DEBUG wire                 :: << "Represents a DELETE FROM (part of SPARQL UPDATE language). The graph IRIs are stored in sp:graphIRI. The template patterns to delete are stored in sp:deletePattern. The WHERE clause is represented using sp:where.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdf:type rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </owl:DeprecatedClass>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <owl:DeprecatedClass rdf:ID="Insert">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Modify"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Insert</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Deprecated - use sp:Modify instead.[\n]"
12:31:06 DEBUG wire                 :: << "[\n]"
12:31:06 DEBUG wire                 :: << "Represents a INSERT INTO (part of SPARQL UPDATE language). The graph IRIs are stored in sp:graphIRI. The template patterns to delete are stored in sp:insertPattern. The WHERE clause is represented using sp:where.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdf:type rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </owl:DeprecatedClass>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  <owl:DeprecatedClass rdf:ID="Let">[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:subClassOf rdf:resource="#Bind"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:label rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Let</rdfs:label>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"[\r][\n]"
12:31:06 DEBUG wire                 :: << "    >Deprecated: use sp:Bind instead.[\n]"
12:31:06 DEBUG wire                 :: << "[\n]"
12:31:06 DEBUG wire                 :: << "A variable assignment (LET (?&lt;varName&gt; := &lt;expression&gt;)). Not part of the SPARQL 1.0 standard, but (for example) ARQ.</rdfs:comment>[\r][\n]"
12:31:06 DEBUG wire                 :: << "    <rdf:type rdf:resource="http://www.w3.org/2000/01/rdf-schema#Class"/>[\r][\n]"
12:31:06 DEBUG wire                 :: << "  </owl:DeprecatedClass>[\r][\n]"
12:31:06 DEBUG wire                 :: << "</rdf:RDF>[\r][\n]"
12:31:06 DEBUG wire                 :: << "[\r][\n]"
12:31:06 DEBUG wire                 :: << "<!-- Created with TopBraid -->[\r][\n]"
12:31:06 DEBUG PoolingClientConnectionManager :: Connection [id: 5][route: {}->http://spinrdf.org] can be kept alive for 3000 MILLISECONDS
12:31:06 DEBUG PoolingClientConnectionManager :: Connection released: [id: 5][route: {}->http://spinrdf.org][total kept alive: 1; route allocated: 1 of 5; total allocated: 1 of 10]
12:31:06 DEBUG FileManager          :: loadModel(http://siima.net/ont/accessories)
12:31:06 DEBUG StreamManager        :: Mapped: http://siima.net/ont/accessories => data/models/importing_models/accessories.ttl
12:31:06 DEBUG AdapterFileManager   :: Map: http://siima.net/ont/accessories => data/models/importing_models/accessories.ttl
12:31:06 DEBUG StreamManager        :: open(data/models/importing_models/accessories.ttl)
12:31:06 DEBUG StreamManager        :: Not mapped: data/models/importing_models/accessories.ttl
12:31:06 DEBUG StreamManager        :: Found: data/models/importing_models/accessories.ttl (LocatorFile)
12:31:06 DEBUG RDFDataMgr           :: Found: data/models/importing_models/accessories.ttl
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type xsd:integer) -> (?a rdf:type xsd:decimal) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x owl:intersectionOf ?y) -> (?x rdf:type owl:Class) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type owl:Class) -> (?a rdf:type rdfs:Resource) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ symmetricProperty1b: (?Y owl:disjointWith ?X) -> (?X owl:disjointWith ?Y) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ symmetricProperty1b: (?Y owl:differentFrom ?X) -> (?X owl:differentFrom ?Y) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x owl:incompatibleWith ?y) notFunctor(?y) -> (?y rdf:type owl:Ontology) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type owl:Ontology) -> (?a rdf:type rdfs:Resource) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x owl:incompatibleWith ?y) -> (?x rdf:type owl:Ontology) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x owl:backwardCompatibleWith ?y) notFunctor(?y) -> (?y rdf:type owl:Ontology) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x owl:backwardCompatibleWith ?y) -> (?x rdf:type owl:Ontology) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x owl:priorVersion ?y) notFunctor(?y) -> (?y rdf:type owl:Ontology) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x owl:priorVersion ?y) -> (?x rdf:type owl:Ontology) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x owl:imports ?y) notFunctor(?y) -> (?y rdf:type owl:Ontology) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x owl:imports ?y) -> (?x rdf:type owl:Ontology) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type owl:OntologyProperty) -> (?a rdf:type rdf:Property) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x owl:onProperty ?y) notFunctor(?y) -> (?y rdf:type owl:Property) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type owl:Property) -> (?a rdf:type rdfs:Resource) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x owl:onProperty ?y) -> (?x rdf:type owl:Restriction) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type owl:Restriction) -> (?a rdf:type rdfs:Resource) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ symmetricProperty1b: (?Y owl:sameAs ?X) -> (?X owl:sameAs ?Y) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x owl:disjointWith ?y) notFunctor(?y) -> (?y rdf:type owl:Class) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x owl:disjointWith ?y) -> (?x rdf:type owl:Class) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x owl:equivalentClass ?y) notFunctor(?y) -> (?y rdf:type owl:Class) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x owl:equivalentClass ?y) -> (?x rdf:type owl:Class) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type owl:Nothing) -> (?a rdf:type rdfs:Resource) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type owl:Nothing) -> (?a rdf:type owl:Thing) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ prototype2b: (12af4b02:14eedbff4e9:-793c rdf:type ?d) -> (owl:Thing rdfs:subClassOf ?d) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type owl:Thing) -> (?a rdf:type rdfs:Resource) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type owl:Restriction) -> (?a rdf:type owl:Class) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type owl:Class) -> (?a rdf:type rdfs:Class) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x owl:oneOf ?y) -> (?x rdf:type owl:Class) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type owl:SymmetricProperty) -> (?a rdf:type owl:ObjectProperty) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type owl:TransitiveProperty) -> (?a rdf:type owl:ObjectProperty) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type owl:InverseFunctionalProperty) -> (?a rdf:type owl:ObjectProperty) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type owl:DatatypeProperty) -> (?a rdf:type rdf:Property) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type owl:ObjectProperty) -> (?a rdf:type rdf:Property) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type owl:FunctionalProperty) -> (?a rdf:type rdf:Property) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type rdfs:Datatype) -> (?a rdf:type rdfs:Class) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdfs:isDefinedBy ?b) -> (?a rdfs:seeAlso ?b) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type rdfs:ContainerMembershipProperty) -> (?a rdf:type rdf:Property) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type rdf:Seq) -> (?a rdf:type rdfs:Container) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type rdf:Bag) -> (?a rdf:type rdfs:Container) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type rdf:Alt) -> (?a rdf:type rdfs:Container) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x rdf:rest ?y) notFunctor(?y) -> (?y rdf:type rdf:List) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type rdf:List) -> (?a rdf:type rdfs:Resource) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x rdfs:range ?y) notFunctor(?y) -> (?y rdf:type rdfs:Class) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type rdfs:Class) -> (?a rdf:type rdfs:Resource) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x rdfs:domain ?y) notFunctor(?y) -> (?y rdf:type rdfs:Class) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x rdfs:subClassOf ?y) notFunctor(?y) -> (?y rdf:type rdfs:Class) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x rdfs:subPropertyOf ?y) notFunctor(?y) -> (?y rdf:type rdf:Property) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type rdf:Property) -> (?a rdf:type rdfs:Resource) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x rdf:rest ?y) -> (?x rdf:type rdf:List) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x rdf:first ?y) -> (?x rdf:type rdf:List) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x rdf:object ?y) -> (?x rdf:type rdf:Statement) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x rdf:predicate ?y) -> (?x rdf:type rdf:Statement) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x rdf:subject ?y) -> (?x rdf:type rdf:Statement) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x rdfs:range ?y) -> (?x rdf:type rdf:Property) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x rdfs:domain ?y) -> (?x rdf:type rdf:Property) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x rdfs:subClassOf ?y) -> (?x rdf:type rdfs:Class) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x rdfs:subPropertyOf ?y) -> (?x rdf:type rdf:Property) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type rdf:Statement) -> (?a rdf:type rdfs:Resource) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type rdfs:Literal) -> (?a rdf:type rdfs:Resource) ]
12:31:06 DEBUG FBRuleInfGraph       :: Adding rule [ (?x rdf:type ?y) notFunctor(?y) -> (?y rdf:type rdfs:Class) ]
12:31:06 DEBUG LockMRSW             :: Lock : main
12:31:06 DEBUG LockMRSW             :: Lock : main
12:31:06 DEBUG ReorderTransformationSubstitution :: Reorder: (?bic <::type> <::Bicycle>) (?bic <::wheelcount> ?wheels)
12:31:06 DEBUG ReorderTransformationSubstitution :: >> Input
    0        5 : ?bic <::type> <::Bicycle>
    1       30 : ?bic <::wheelcount> ?wheels
12:31:06 DEBUG ReorderTransformationSubstitution :: << Output
    ?bic <::type> <::Bicycle>
12:31:06 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::wheelcount> ?wheels
12:31:06 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::wheelcount> ?wheels
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG ReorderTransformationSubstitution :: Reorder: (?bic <::type> <::Bicycle>) (?bic <::wheelcount> ?wheels)
12:31:07 DEBUG ReorderTransformationSubstitution :: >> Input
    0        5 : ?bic <::type> <::Bicycle>
    1       30 : ?bic <::wheelcount> ?wheels
12:31:07 DEBUG ReorderTransformationSubstitution :: << Output
    ?bic <::type> <::Bicycle>
12:31:07 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::wheelcount> ?wheels
12:31:07 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::wheelcount> ?wheels
12:31:07 DEBUG PoolingClientConnectionManager :: Connection manager is shutting down
12:31:07 DEBUG DefaultClientConnection :: Connection 0.0.0.0:49742<->192.145.236.11:80 closed
12:31:07 DEBUG DefaultClientConnection :: Connection 0.0.0.0:49742<->192.145.236.11:80 closed
12:31:07 DEBUG PoolingClientConnectionManager :: Connection manager shut down
12:31:07 DEBUG PoolingClientConnectionManager :: Connection manager is shutting down
12:31:07 DEBUG DefaultClientConnection :: Connection 0.0.0.0:49743<->192.145.236.11:80 closed
12:31:07 DEBUG DefaultClientConnection :: Connection 0.0.0.0:49743<->192.145.236.11:80 closed
12:31:07 DEBUG PoolingClientConnectionManager :: Connection manager shut down
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:07 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:08 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?this <::type> <::Bicycle>) (?this <::wheelcount> ?cnt)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0        5 : ?this <::type> <::Bicycle>
    1       30 : ?this <::wheelcount> ?cnt
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?this <::type> <::Bicycle>
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::wheelcount> ?cnt
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::wheelcount> ?cnt
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#named ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#named ?y) notFunctor(?y) -> (?y rdf:type xsd:boolean) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type xsd:boolean) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#resultVariables ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#resultVariables ?y) notFunctor(?y) -> (?y rdf:type rdf:List) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#resultVariables ?y) -> (?x rdf:type http://spinrdf.org/sp#Select) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#ElementGroup) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#ElementGroup) -> (?a rdf:type http://spinrdf.org/sp#Element) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#arg2 ?b) -> (?a http://spinrdf.org/sp#arg ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#InsertData) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#InsertData) -> (?a rdf:type http://spinrdf.org/sp#Update) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#TriplePattern) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#TriplePattern) -> (?a rdf:type http://spinrdf.org/sp#Triple) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#TriplePattern) -> (?a rdf:type http://spinrdf.org/sp#Element) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#SubQuery) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#SubQuery) -> (?a rdf:type http://spinrdf.org/sp#Element) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Create) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Create) -> (?a rdf:type http://spinrdf.org/sp#Update) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#variable ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#variable ?y) notFunctor(?y) -> (?y rdf:type http://spinrdf.org/sp#Variable) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#variable ?y) -> (?x rdf:type http://spinrdf.org/sp#Bind) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Min) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Min) -> (?a rdf:type http://spinrdf.org/sp#Aggregation) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#into ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#into ?y) notFunctor(?y) -> (?y rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#into ?y) -> (?x rdf:type http://spinrdf.org/sp#Load) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Variable) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Variable) -> (?a rdf:type http://spinrdf.org/sp#SystemClass) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#ElementList) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#ElementList) -> (?a rdf:type rdf:List) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#ElementList) -> (?a rdf:type http://spinrdf.org/sp#ElementGroup) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#graphIRI ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#graphIRI ?y) notFunctor(?y) -> (?y rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Path) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Path) -> (?a rdf:type http://spinrdf.org/sp#SystemClass) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#serviceURI ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#serviceURI ?y) notFunctor(?y) -> (?y rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#serviceURI ?y) -> (?x rdf:type http://spinrdf.org/sp#Service) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#arg3 ?b) -> (?a http://spinrdf.org/sp#arg ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#path ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#path ?y) notFunctor(?y) -> (?y rdf:type http://spinrdf.org/sp#Path) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#path ?y) -> (?x rdf:type http://spinrdf.org/sp#TriplePath) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#default ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#default ?y) notFunctor(?y) -> (?y rdf:type xsd:boolean) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#usingNamed ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#usingNamed ?y) notFunctor(?y) -> (?y rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#usingNamed ?y) -> (?x rdf:type http://spinrdf.org/sp#Modify) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Triple) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Triple) -> (?a rdf:type http://spinrdf.org/sp#Tuple) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Max) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Max) -> (?a rdf:type http://spinrdf.org/sp#Aggregation) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#query ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#query ?y) notFunctor(?y) -> (?y rdf:type http://spinrdf.org/sp#Query) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#query ?y) -> (?x rdf:type http://spinrdf.org/sp#SubQuery) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#with ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#with ?y) notFunctor(?y) -> (?y rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#with ?y) -> (?x rdf:type http://spinrdf.org/sp#Modify) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#insertPattern ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#insertPattern ?y) notFunctor(?y) -> (?y rdf:type rdf:List) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#insertPattern ?y) -> (?x rdf:type http://spinrdf.org/sp#Modify) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Asc) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Asc) -> (?a rdf:type http://spinrdf.org/sp#OrderByCondition) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Optional) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Optional) -> (?a rdf:type http://spinrdf.org/sp#ElementGroup) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Query) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Query) -> (?a rdf:type http://spinrdf.org/sp#Command) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#DeleteWhere) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#DeleteWhere) -> (?a rdf:type http://spinrdf.org/sp#Update) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Describe) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Describe) -> (?a rdf:type http://spinrdf.org/sp#Query) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Service) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Service) -> (?a rdf:type http://spinrdf.org/sp#ElementGroup) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#silent ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#silent ?y) notFunctor(?y) -> (?y rdf:type xsd:boolean) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Let) -> (?a rdf:type http://spinrdf.org/sp#Bind) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Let) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#elements ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#elements ?y) notFunctor(?y) -> (?y rdf:type http://spinrdf.org/sp#ElementList) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#distinct ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#distinct ?y) notFunctor(?y) -> (?y rdf:type xsd:boolean) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#distinct ?y) -> (?x rdf:type http://spinrdf.org/sp#Select) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Avg) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Avg) -> (?a rdf:type http://spinrdf.org/sp#Aggregation) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#orderBy ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#orderBy ?y) notFunctor(?y) -> (?y rdf:type rdf:List) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#orderBy ?y) -> (?x rdf:type http://spinrdf.org/sp#Query) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#varName ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#varName ?y) notFunctor(?y) -> (?y rdf:type xsd:string) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type xsd:string) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#varName ?y) -> (?x rdf:type http://spinrdf.org/sp#Variable) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#TripleTemplate) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#TripleTemplate) -> (?a rdf:type http://spinrdf.org/sp#Triple) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#arg4 ?b) -> (?a http://spinrdf.org/sp#arg ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#offset ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#offset ?y) notFunctor(?y) -> (?y rdf:type xsd:long) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type xsd:long) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#offset ?y) -> (?x rdf:type http://spinrdf.org/sp#Query) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#using ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#using ?y) notFunctor(?y) -> (?y rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#using ?y) -> (?x rdf:type http://spinrdf.org/sp#Modify) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#values ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#values ?y) notFunctor(?y) -> (?y rdf:type http://spinrdf.org/sp#Values) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#values ?y) -> (?x rdf:type http://spinrdf.org/sp#Query) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#limit ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#limit ?y) notFunctor(?y) -> (?y rdf:type xsd:long) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#limit ?y) -> (?x rdf:type http://spinrdf.org/sp#Query) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#SystemClass) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#AltPath) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#AltPath) -> (?a rdf:type http://spinrdf.org/sp#Path) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#ReversePath) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#ReversePath) -> (?a rdf:type http://spinrdf.org/sp#Path) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Tuple) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Tuple) -> (?a rdf:type http://spinrdf.org/sp#SystemClass) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Element) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Element) -> (?a rdf:type http://spinrdf.org/sp#SystemClass) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#NotExists) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#NotExists) -> (?a rdf:type http://spinrdf.org/sp#ElementGroup) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#object ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#object ?y) -> (?x rdf:type http://spinrdf.org/sp#Tuple) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#as ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#as ?y) notFunctor(?y) -> (?y rdf:type http://spinrdf.org/sp#Variable) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Exists) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Exists) -> (?a rdf:type http://spinrdf.org/sp#ElementGroup) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#arg5 ?b) -> (?a http://spinrdf.org/sp#arg ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Union) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Union) -> (?a rdf:type http://spinrdf.org/sp#ElementGroup) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#TriplePath) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#TriplePath) -> (?a rdf:type http://spinrdf.org/sp#Tuple) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#TriplePath) -> (?a rdf:type http://spinrdf.org/sp#Element) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#document ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#document ?y) notFunctor(?y) -> (?y rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#document ?y) -> (?x rdf:type http://spinrdf.org/sp#Load) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#from ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#from ?y) notFunctor(?y) -> (?y rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#from ?y) -> (?x rdf:type http://spinrdf.org/sp#Query) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#templates ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#templates ?y) notFunctor(?y) -> (?y rdf:type rdf:List) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#templates ?y) -> (?x rdf:type http://spinrdf.org/sp#Construct) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#where ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#where ?y) notFunctor(?y) -> (?y rdf:type http://spinrdf.org/sp#ElementList) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Sum) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Sum) -> (?a rdf:type http://spinrdf.org/sp#Aggregation) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#OrderByCondition) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#OrderByCondition) -> (?a rdf:type http://spinrdf.org/sp#SystemClass) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#NamedGraph) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#NamedGraph) -> (?a rdf:type http://spinrdf.org/sp#ElementGroup) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#reduced ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#reduced ?y) notFunctor(?y) -> (?y rdf:type xsd:boolean) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#reduced ?y) -> (?x rdf:type http://spinrdf.org/sp#Select) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Count) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Count) -> (?a rdf:type http://spinrdf.org/sp#Aggregation) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#SeqPath) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#SeqPath) -> (?a rdf:type http://spinrdf.org/sp#Path) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#expression ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#groupBy ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#groupBy ?y) notFunctor(?y) -> (?y rdf:type rdf:List) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#groupBy ?y) -> (?x rdf:type http://spinrdf.org/sp#Select) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Ask) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Ask) -> (?a rdf:type http://spinrdf.org/sp#Query) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Construct) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Construct) -> (?a rdf:type http://spinrdf.org/sp#Query) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Select) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Select) -> (?a rdf:type http://spinrdf.org/sp#Query) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Update) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Update) -> (?a rdf:type http://spinrdf.org/sp#Command) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Values) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Values) -> (?a rdf:type http://spinrdf.org/sp#Element) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Sample) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Sample) -> (?a rdf:type http://spinrdf.org/sp#Aggregation) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#resultNodes ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#resultNodes ?y) notFunctor(?y) -> (?y rdf:type rdf:List) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#resultNodes ?y) -> (?x rdf:type http://spinrdf.org/sp#Describe) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#text ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#text ?y) notFunctor(?y) -> (?y rdf:type xsd:string) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#predicate ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#predicate ?y) notFunctor(?y) -> (?y rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#predicate ?y) -> (?x rdf:type http://spinrdf.org/sp#Triple) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#path1 ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#path1 ?y) notFunctor(?y) -> (?y rdf:type http://spinrdf.org/sp#Path) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#subPath ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#DeleteData) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#DeleteData) -> (?a rdf:type http://spinrdf.org/sp#Update) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Clear) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Clear) -> (?a rdf:type http://spinrdf.org/sp#Update) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Bind) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Bind) -> (?a rdf:type http://spinrdf.org/sp#Element) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#ReverseLinkPath) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#ReverseLinkPath) -> (?a rdf:type http://spinrdf.org/sp#Path) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#node ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#node ?y) -> (?x rdf:type http://spinrdf.org/sp#ReverseLinkPath) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#modMin ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#modMin ?y) notFunctor(?y) -> (?y rdf:type xsd:integer) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type xsd:integer) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#modMin ?y) -> (?x rdf:type http://spinrdf.org/sp#ModPath) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#separator ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#separator ?y) notFunctor(?y) -> (?y rdf:type xsd:string) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#separator ?y) -> (?x rdf:type http://spinrdf.org/sp#GroupConcat) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#deletePattern ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#deletePattern ?y) notFunctor(?y) -> (?y rdf:type rdf:List) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#deletePattern ?y) -> (?x rdf:type http://spinrdf.org/sp#Update) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Aggregation) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Aggregation) -> (?a rdf:type http://spinrdf.org/sp#SystemClass) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Delete) -> (?a rdf:type http://spinrdf.org/sp#Modify) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Delete) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#arg1 ?b) -> (?a http://spinrdf.org/sp#arg ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#all ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#all ?y) notFunctor(?y) -> (?y rdf:type xsd:boolean) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Drop) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Drop) -> (?a rdf:type http://spinrdf.org/sp#Update) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Insert) -> (?a rdf:type http://spinrdf.org/sp#Modify) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Insert) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Modify) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Modify) -> (?a rdf:type http://spinrdf.org/sp#Update) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Filter) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Filter) -> (?a rdf:type http://spinrdf.org/sp#Element) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#modMax ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#modMax ?y) notFunctor(?y) -> (?y rdf:type xsd:integer) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#modMax ?y) -> (?x rdf:type http://spinrdf.org/sp#ModPath) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#path2 ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#path2 ?y) notFunctor(?y) -> (?y rdf:type http://spinrdf.org/sp#Path) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Desc) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Desc) -> (?a rdf:type http://spinrdf.org/sp#OrderByCondition) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#subject ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#subject ?y) notFunctor(?y) -> (?y rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#subject ?y) -> (?x rdf:type http://spinrdf.org/sp#Tuple) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Minus) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Minus) -> (?a rdf:type http://spinrdf.org/sp#ElementGroup) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#having ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#having ?y) notFunctor(?y) -> (?y rdf:type rdf:List) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#having ?y) -> (?x rdf:type http://spinrdf.org/sp#Select) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Load) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Load) -> (?a rdf:type http://spinrdf.org/sp#Update) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#graphNameNode ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#graphNameNode ?y) notFunctor(?y) -> (?y rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#graphNameNode ?y) -> (?x rdf:type http://spinrdf.org/sp#NamedGraph) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#ModPath) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#ModPath) -> (?a rdf:type http://spinrdf.org/sp#Path) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#varNames ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#varNames ?y) notFunctor(?y) -> (?y rdf:type rdf:List) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#varNames ?y) -> (?x rdf:type http://spinrdf.org/sp#Values) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#GroupConcat) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#GroupConcat) -> (?a rdf:type http://spinrdf.org/sp#Aggregation) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#fromNamed ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#fromNamed ?y) notFunctor(?y) -> (?y rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#fromNamed ?y) -> (?x rdf:type http://spinrdf.org/sp#Query) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/sp#bindings ?b) -> (?a http://spinrdf.org/sp#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#bindings ?y) notFunctor(?y) -> (?y rdf:type rdf:List) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/sp#bindings ?y) -> (?x rdf:type http://spinrdf.org/sp#Values) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Command) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Command) -> (?a rdf:type http://spinrdf.org/sp#SystemClass) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#constructor ?b) -> (?a http://spinrdf.org/spin#command ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#constructor ?y) notFunctor(?y) -> (?y rdf:type http://spinrdf.org/spin#Rule) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#constructor ?y) -> (?x rdf:type rdfs:Class) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#cachable ?b) -> (?a http://spinrdf.org/spin#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#cachable ?y) notFunctor(?y) -> (?y rdf:type xsd:boolean) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#cachable ?y) -> (?x rdf:type http://spinrdf.org/spin#Function) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#select) -> (?a rdf:type http://spinrdf.org/spin#MagicProperties) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#update ?b) -> (?a http://spinrdf.org/spin#command ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#update ?y) notFunctor(?y) -> (?y rdf:type http://spinrdf.org/sp#Update) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#abstract ?b) -> (?a http://spinrdf.org/spin#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#abstract ?y) notFunctor(?y) -> (?y rdf:type xsd:boolean) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#abstract ?y) -> (?x rdf:type http://spinrdf.org/spin#Module) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#labelTemplate ?b) -> (?a http://spinrdf.org/spin#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#labelTemplate ?y) notFunctor(?y) -> (?y rdf:type xsd:string) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#labelTemplate ?y) -> (?x rdf:type http://spinrdf.org/spin#Template) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#columnType ?b) -> (?a http://spinrdf.org/spin#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#columnType ?y) notFunctor(?y) -> (?y rdf:type rdfs:Class) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#columnType ?y) -> (?x rdf:type http://spinrdf.org/spin#Column) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#TableDataProvider) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#TableDataProvider) -> (?a rdf:type rdfs:Class) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#columnWidth ?b) -> (?a http://spinrdf.org/spin#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#columnWidth ?y) notFunctor(?y) -> (?y rdf:type xsd:integer) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#columnWidth ?y) -> (?x rdf:type http://spinrdf.org/spin#Column) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#AskTemplate) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#AskTemplate) -> (?a rdf:type http://spinrdf.org/spin#Template) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#Module) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#Module) -> (?a rdf:type rdfs:Class) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#Function) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#Function) -> (?a rdf:type http://spinrdf.org/spin#Module) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#constraint ?b) -> (?a http://spinrdf.org/spin#query ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#constraint ?y) -> (?x rdf:type rdfs:Class) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#rule ?b) -> (?a http://spinrdf.org/spin#command ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#rule ?y) notFunctor(?y) -> (?y rdf:type http://spinrdf.org/spin#Rule) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#rule ?y) -> (?x rdf:type rdfs:Class) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#ConstructTemplates) -> (?a rdf:type http://spinrdf.org/spin#Templates) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#MagicProperties ?b) -> (?a http://spinrdf.org/spin#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#MagicProperties) -> (?a rdf:type http://spinrdf.org/spin#Functions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#LibraryOntology) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#LibraryOntology) -> (?a rdf:type owl:Ontology) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#violationRoot ?b) -> (?a http://spinrdf.org/spin#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#violationRoot ?y) notFunctor(?y) -> (?y rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#violationRoot ?y) -> (?x rdf:type http://spinrdf.org/spin#ConstraintViolation) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#Template) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#Template) -> (?a rdf:type http://spinrdf.org/spin#Module) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#column ?b) -> (?a http://spinrdf.org/spin#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#column ?y) notFunctor(?y) -> (?y rdf:type http://spinrdf.org/spin#Column) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#column ?y) -> (?x rdf:type http://spinrdf.org/spin#TableDataProvider) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#ConstraintViolation) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#query ?b) -> (?a http://spinrdf.org/spin#command ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#constraint ?b) -> (?a http://spinrdf.org/spin#command ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#query ?y) notFunctor(?y) -> (?y rdf:type http://spinrdf.org/sp#Query) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#body ?b) -> (?a http://spinrdf.org/spin#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#body ?y) notFunctor(?y) -> (?y rdf:type http://spinrdf.org/sp#Command) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#DeleteWhere) -> (?a rdf:type http://spinrdf.org/spin#Rule) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#AskTemplates) -> (?a rdf:type http://spinrdf.org/spin#Templates) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#thisUnbound ?b) -> (?a http://spinrdf.org/spin#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#thisUnbound ?y) notFunctor(?y) -> (?y rdf:type xsd:boolean) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#thisUnbound ?y) -> (?x rdf:type http://spinrdf.org/sp#Construct) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#SelectTemplate) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#SelectTemplate) -> (?a rdf:type http://spinrdf.org/spin#Template) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#SelectTemplate) -> (?a rdf:type http://spinrdf.org/spin#TableDataProvider) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#Templates) -> (?a rdf:type http://spinrdf.org/spin#Modules) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#nextRuleProperty ?b) -> (?a http://spinrdf.org/spin#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#nextRuleProperty ?y) notFunctor(?y) -> (?y rdf:type http://spinrdf.org/spin#RuleProperty) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#nextRuleProperty ?y) -> (?x rdf:type http://spinrdf.org/spin#RuleProperty) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#RuleProperty) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#RuleProperty) -> (?a rdf:type rdf:Property) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#UpdateTemplates) -> (?a rdf:type http://spinrdf.org/spin#Templates) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#Modules) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#Column) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#ConstraintViolationLevel) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#SelectTemplates) -> (?a rdf:type http://spinrdf.org/spin#Templates) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#rulePropertyMaxIterationCount ?b) -> (?a http://spinrdf.org/spin#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#rulePropertyMaxIterationCount ?y) notFunctor(?y) -> (?y rdf:type xsd:integer) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#rulePropertyMaxIterationCount ?y) -> (?x rdf:type http://spinrdf.org/spin#RuleProperty) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#Functions) -> (?a rdf:type http://spinrdf.org/spin#Modules) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#violationPath ?b) -> (?a http://spinrdf.org/spin#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#violationPath ?y) notFunctor(?y) -> (?y rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#violationPath ?y) -> (?x rdf:type http://spinrdf.org/spin#ConstraintViolation) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#construct) -> (?a rdf:type http://spinrdf.org/spin#MagicProperties) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Construct) -> (?a rdf:type http://spinrdf.org/spin#Rule) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#private ?b) -> (?a http://spinrdf.org/spin#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#private ?y) notFunctor(?y) -> (?y rdf:type xsd:boolean) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#private ?y) -> (?x rdf:type http://spinrdf.org/spin#Module) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#columnIndex ?b) -> (?a http://spinrdf.org/spin#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#columnIndex ?y) notFunctor(?y) -> (?y rdf:type xsd:integer) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#columnIndex ?y) -> (?x rdf:type http://spinrdf.org/spin#Column) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#ConstructTemplate) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#ConstructTemplate) -> (?a rdf:type http://spinrdf.org/spin#Template) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#violationLevel ?b) -> (?a http://spinrdf.org/spin#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#violationLevel ?y) notFunctor(?y) -> (?y rdf:type http://spinrdf.org/spin#ConstraintViolationLevel) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#violationLevel ?y) -> (?x rdf:type http://spinrdf.org/spin#ConstraintViolation) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#Rule) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#Rule) -> (?a rdf:type http://spinrdf.org/sp#Command) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#command ?y) notFunctor(?y) -> (?y rdf:type http://spinrdf.org/sp#Command) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#Modify) -> (?a rdf:type http://spinrdf.org/spin#Rule) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#fix ?b) -> (?a http://spinrdf.org/spin#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#fix ?y) notFunctor(?y) -> (?y rdf:type http://spinrdf.org/spin#UpdateTemplate) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#fix ?y) -> (?x rdf:type http://spinrdf.org/spin#ConstraintViolation) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#violationSource ?b) -> (?a http://spinrdf.org/spin#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#violationSource ?y) notFunctor(?y) -> (?y rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#violationSource ?y) -> (?x rdf:type http://spinrdf.org/spin#ConstraintViolation) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#imports ?b) -> (?a http://spinrdf.org/spin#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#imports ?y) notFunctor(?y) -> (?y rdf:type owl:Ontology) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#imports ?y) -> (?x rdf:type owl:Ontology) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#MagicProperty) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#MagicProperty) -> (?a rdf:type rdf:Property) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#MagicProperty) -> (?a rdf:type http://spinrdf.org/spin#Function) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#UpdateTemplate) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#UpdateTemplate) -> (?a rdf:type http://spinrdf.org/spin#Template) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#returnType ?b) -> (?a http://spinrdf.org/spin#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#returnType ?y) notFunctor(?y) -> (?y rdf:type rdfs:Class) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#returnType ?y) -> (?x rdf:type http://spinrdf.org/spin#Function) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#symbol ?b) -> (?a http://spinrdf.org/spin#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#symbol ?y) notFunctor(?y) -> (?y rdf:type xsd:string) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#symbol ?y) -> (?x rdf:type http://spinrdf.org/spin#Function) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spin#violationValue ?b) -> (?a http://spinrdf.org/spin#systemProperty ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spin#violationValue ?y) -> (?x rdf:type http://spinrdf.org/spin#ConstraintViolation) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#ask) -> (?a rdf:type http://spinrdf.org/spin#Functions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spin#eval) -> (?a rdf:type http://spinrdf.org/spin#Functions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://siima.net/ont/accessories#Bell) -> (?a rdf:type owl:Thing) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://siima.net/ont/accessories#Bell) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ prototype2b: (12af4b02:14eedbff4e9:-7931 rdf:type ?d) -> (http://siima.net/ont/accessories#Bell rdfs:subClassOf ?d) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://siima.net/ont/accessories#Bell) -> (?a rdf:type http://siima.net/ont/accessories#Accessory) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://siima.net/ont/accessories#hasAccessory ?y) notFunctor(?y) -> (?y rdf:type owl:Thing) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://siima.net/ont/accessories#hasAccessory ?y) -> (?x rdf:type owl:Thing) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://siima.net/ont/accessories#Accessory) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ prototype2b: (12af4b02:14eedbff4e9:-7930 rdf:type ?d) -> (http://siima.net/ont/accessories#Accessory rdfs:subClassOf ?d) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://siima.net/ont/accessories#Accessory) -> (?a rdf:type owl:Thing) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://siima.net/ont/accessories#CatEye) -> (?a rdf:type owl:Thing) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://siima.net/ont/accessories#CatEye) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ prototype2b: (12af4b02:14eedbff4e9:-792f rdf:type ?d) -> (http://siima.net/ont/accessories#CatEye rdfs:subClassOf ?d) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://siima.net/ont/accessories#CatEye) -> (?a rdf:type http://siima.net/ont/accessories#Accessory) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#notIn) -> (?a rdf:type http://spinrdf.org/spl#BooleanFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#datatype) -> (?a rdf:type http://spinrdf.org/spl#OntologyFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spl#testExpression ?b) -> (?a http://spinrdf.org/sp#arg ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spl#defaultValue ?b) -> (?a http://spinrdf.org/sp#arg ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#MathematicalFunctions) -> (?a rdf:type http://spinrdf.org/spin#Functions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#and) -> (?a rdf:type http://spinrdf.org/spl#BooleanFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#PropertyPairConstraintTemplates) -> (?a rdf:type http://spinrdf.org/spl#PropertyConstraintTemplates) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/arg#pattern ?b) -> (?a http://spinrdf.org/sp#arg ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#objectCount) -> (?a rdf:type http://spinrdf.org/spl#OntologyFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#hours) -> (?a rdf:type http://spinrdf.org/spl#DateFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#sha512) -> (?a rdf:type http://spinrdf.org/spl#MiscFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#RegexPropertyConstraint) -> (?a rdf:type http://spinrdf.org/spl#PropertyConstraintTemplates) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#eq) -> (?a rdf:type http://spinrdf.org/spl#BooleanFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#object) -> (?a rdf:type http://spinrdf.org/spl#OntologyFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#month) -> (?a rdf:type http://spinrdf.org/spl#DateFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#subPropertyOf) -> (?a rdf:type http://spinrdf.org/spl#OntologyFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#max) -> (?a rdf:type http://spinrdf.org/spl#MathematicalFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#strlang) -> (?a rdf:type http://spinrdf.org/spl#StringFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#MiscFunctions) -> (?a rdf:type http://spinrdf.org/spin#Functions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#struuid) -> (?a rdf:type http://spinrdf.org/spl#StringFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#coalesce) -> (?a rdf:type http://spinrdf.org/spl#MiscFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#hasArgument) -> (?a rdf:type http://spinrdf.org/spl#BooleanFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#lcase) -> (?a rdf:type http://spinrdf.org/spl#StringFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#UntypedObjectPropertyConstraint) -> (?a rdf:type http://spinrdf.org/spl#PropertyConstraintTemplates) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#regex) -> (?a rdf:type http://spinrdf.org/spl#StringFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#mul) -> (?a rdf:type http://spinrdf.org/spl#MathematicalFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/arg#maxCount ?b) -> (?a http://spinrdf.org/sp#arg ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#subjectCount) -> (?a rdf:type http://spinrdf.org/spl#OntologyFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#md5) -> (?a rdf:type http://spinrdf.org/spl#MiscFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#le) -> (?a rdf:type http://spinrdf.org/spl#BooleanFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#floor) -> (?a rdf:type http://spinrdf.org/spl#MathematicalFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spl#class ?b) -> (?a http://spinrdf.org/sp#arg ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#replace) -> (?a rdf:type http://spinrdf.org/spl#StringFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#ExistencePropertyPairConstraint) -> (?a rdf:type http://spinrdf.org/spl#PropertyPairConstraintTemplates) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#minutes) -> (?a rdf:type http://spinrdf.org/spl#DateFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#uri) -> (?a rdf:type http://spinrdf.org/spl#OntologyFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#BooleanFunctions) -> (?a rdf:type http://spinrdf.org/spin#Functions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spl#testResult ?b) -> (?a http://spinrdf.org/sp#arg ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spl#maxCount ?b) -> (?a http://spinrdf.org/spl#count ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#hasValue) -> (?a rdf:type http://spinrdf.org/spl#BooleanFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#str) -> (?a rdf:type http://spinrdf.org/spl#StringFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#strbefore) -> (?a rdf:type http://spinrdf.org/spl#StringFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#CountPropertyConstraintTemplates) -> (?a rdf:type http://spinrdf.org/spl#PropertyConstraintTemplates) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spl#instance ?b) -> (?a http://spinrdf.org/sp#arg ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spl#instance ?y) -> (?x rdf:type http://spinrdf.org/sp#ModuleCall) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#ModuleCall) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#ObjectCountPropertyConstraint) -> (?a rdf:type http://spinrdf.org/spl#CountPropertyConstraintTemplates) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#substr) -> (?a rdf:type http://spinrdf.org/spl#StringFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#ucase) -> (?a rdf:type http://spinrdf.org/spl#StringFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#TestCase) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#sameTerm) -> (?a rdf:type http://spinrdf.org/spl#BooleanFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#URIFunctions) -> (?a rdf:type http://spinrdf.org/spin#Functions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#isURI) -> (?a rdf:type http://spinrdf.org/spl#BooleanFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#lt) -> (?a rdf:type http://spinrdf.org/spl#BooleanFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#ceil) -> (?a rdf:type http://spinrdf.org/spl#MathematicalFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#abs) -> (?a rdf:type http://spinrdf.org/spl#MathematicalFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#isLiteral) -> (?a rdf:type http://spinrdf.org/spl#BooleanFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#timezone) -> (?a rdf:type http://spinrdf.org/spl#DateFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#langMatches) -> (?a rdf:type http://spinrdf.org/spl#StringFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#sub) -> (?a rdf:type http://spinrdf.org/spl#MathematicalFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#if) -> (?a rdf:type http://spinrdf.org/spl#MiscFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#notExists) -> (?a rdf:type http://spinrdf.org/spl#BooleanFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#concat) -> (?a rdf:type http://spinrdf.org/spl#StringFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#iri) -> (?a rdf:type http://spinrdf.org/spl#OntologyFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#round) -> (?a rdf:type http://spinrdf.org/spl#MathematicalFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#seconds) -> (?a rdf:type http://spinrdf.org/spl#DateFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#exists) -> (?a rdf:type http://spinrdf.org/spl#BooleanFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#divide) -> (?a rdf:type http://spinrdf.org/spl#MathematicalFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#DateFunctions) -> (?a rdf:type http://spinrdf.org/spin#Functions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#subject) -> (?a rdf:type http://spinrdf.org/spl#OntologyFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#StringFunctions) -> (?a rdf:type http://spinrdf.org/spin#Functions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/arg#property ?b) -> (?a http://spinrdf.org/sp#arg ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#bound) -> (?a rdf:type http://spinrdf.org/spl#BooleanFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#unaryPlus) -> (?a rdf:type http://spinrdf.org/spl#MathematicalFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#encode_for_uri) -> (?a rdf:type http://spinrdf.org/spl#StringFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/arg#otherProperty ?b) -> (?a http://spinrdf.org/sp#arg ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#strafter) -> (?a rdf:type http://spinrdf.org/spl#StringFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#strdt) -> (?a rdf:type http://spinrdf.org/spl#OntologyFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#strends) -> (?a rdf:type http://spinrdf.org/spl#StringFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#unaryMinus) -> (?a rdf:type http://spinrdf.org/spl#MathematicalFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/arg#min ?b) -> (?a http://spinrdf.org/sp#arg ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#ge) -> (?a rdf:type http://spinrdf.org/spl#BooleanFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#hasValueOfType) -> (?a rdf:type http://spinrdf.org/spl#BooleanFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#isIRI) -> (?a rdf:type http://spinrdf.org/spl#BooleanFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#isNumeric) -> (?a rdf:type http://spinrdf.org/spl#BooleanFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#ConstraintTemplate) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#ConstraintTemplate) -> (?a rdf:type http://spinrdf.org/spin#ConstructTemplate) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#NonExistencePropertyPairConstraint) -> (?a rdf:type http://spinrdf.org/spl#PropertyPairConstraintTemplates) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#strlen) -> (?a rdf:type http://spinrdf.org/spl#StringFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#objectSubProp) -> (?a rdf:type http://spinrdf.org/spl#OntologyFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#isUntypedLiteral) -> (?a rdf:type http://spinrdf.org/spl#BooleanFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#not) -> (?a rdf:type http://spinrdf.org/spl#BooleanFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#tz) -> (?a rdf:type http://spinrdf.org/spl#DateFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#AllArguments) -> (?a rdf:type http://spinrdf.org/spin#SelectTemplates) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#ne) -> (?a rdf:type http://spinrdf.org/spl#BooleanFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#instanceOf) -> (?a rdf:type http://spinrdf.org/spl#BooleanFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#RunTestCases) -> (?a rdf:type http://spinrdf.org/spin#SelectTemplates) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#rand) -> (?a rdf:type http://spinrdf.org/spl#MathematicalFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#SPINOverview) -> (?a rdf:type http://spinrdf.org/spin#SelectTemplates) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#PropertyConstraintTemplates) -> (?a rdf:type http://spinrdf.org/spl#ConstraintTemplates) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#Attribute) -> (?a rdf:type http://spinrdf.org/spin#ConstructTemplates) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#add) -> (?a rdf:type http://spinrdf.org/spl#MathematicalFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#in) -> (?a rdf:type http://spinrdf.org/spl#BooleanFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#ConstraintTemplates) -> (?a rdf:type http://spinrdf.org/spin#ConstructTemplates) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#strstarts) -> (?a rdf:type http://spinrdf.org/spl#StringFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#gt) -> (?a rdf:type http://spinrdf.org/spl#BooleanFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#or) -> (?a rdf:type http://spinrdf.org/spl#BooleanFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#sha1) -> (?a rdf:type http://spinrdf.org/spl#MiscFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#bnode) -> (?a rdf:type http://spinrdf.org/spl#OntologyFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#RangePropertyConstraint) -> (?a rdf:type http://spinrdf.org/spl#PropertyConstraintTemplates) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#OntologyFunctions) -> (?a rdf:type http://spinrdf.org/spin#Functions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#year) -> (?a rdf:type http://spinrdf.org/spl#DateFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#sha384) -> (?a rdf:type http://spinrdf.org/spl#MiscFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/arg#minCount ?b) -> (?a http://spinrdf.org/sp#arg ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#Argument) -> (?a rdf:type http://spinrdf.org/spin#ConstructTemplates) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spl#count ?b) -> (?a http://spinrdf.org/sp#arg ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spl#maxCount ?b) -> (?a http://spinrdf.org/sp#arg ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#min) -> (?a rdf:type http://spinrdf.org/spl#MathematicalFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spl#valueType ?b) -> (?a http://spinrdf.org/sp#arg ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/arg#max ?b) -> (?a http://spinrdf.org/sp#arg ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#day) -> (?a rdf:type http://spinrdf.org/spl#DateFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#isBlank) -> (?a rdf:type http://spinrdf.org/spl#BooleanFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#now) -> (?a rdf:type http://spinrdf.org/spl#DateFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#UnionTemplate) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#UnionTemplate) -> (?a rdf:type http://spinrdf.org/spin#Template) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#relevantPropertyAtClass) -> (?a rdf:type http://spinrdf.org/spin#MagicProperties) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#lang) -> (?a rdf:type http://spinrdf.org/spl#StringFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#sha256) -> (?a rdf:type http://spinrdf.org/spl#MiscFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spl#optional ?b) -> (?a http://spinrdf.org/sp#arg ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://spinrdf.org/spl#optional ?y) notFunctor(?y) -> (?y rdf:type xsd:boolean) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#subClassOf) -> (?a rdf:type http://spinrdf.org/spl#OntologyFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#objectInGraph) -> (?a rdf:type http://spinrdf.org/spl#OntologyFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spl#minCount ?b) -> (?a http://spinrdf.org/spl#count ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spl#minCount ?b) -> (?a http://spinrdf.org/sp#arg ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/spl#predicate ?b) -> (?a http://spinrdf.org/sp#arg ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#ConstructDefaultValues) -> (?a rdf:type http://spinrdf.org/spin#ConstructTemplates) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/spl#InferDefaultValue) -> (?a rdf:type http://spinrdf.org/spin#ConstructTemplates) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#contains) -> (?a rdf:type http://spinrdf.org/spl#StringFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://spinrdf.org/sp#UUID) -> (?a rdf:type http://spinrdf.org/spl#URIFunctions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://siima.net/ont/bicycle#hasBell ?y) notFunctor(?y) -> (?y rdf:type owl:Thing) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://siima.net/ont/bicycle#hasBell ?y) -> (?x rdf:type owl:Thing) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://siima.net/ont/bicycle#BicycleNameTemplate1) -> (?a rdf:type http://spinrdf.org/spin#SelectTemplates) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://siima.net/ont/bicycle#name ?y) notFunctor(?y) -> (?y rdf:type xsd:string) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://siima.net/ont/bicycle#created ?y) notFunctor(?y) -> (?y rdf:type xsd:dateTime) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type xsd:dateTime) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://siima.net/ont/bicycle#Wheel) -> (?a rdf:type owl:Thing) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://siima.net/ont/bicycle#Wheel) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ prototype2b: (12af4b02:14eedbff4e9:-792e rdf:type ?d) -> (http://siima.net/ont/bicycle#Wheel rdfs:subClassOf ?d) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://siima.net/ont/bicycle#Wheel) -> (?a rdf:type http://siima.net/ont/bicycle#VehiclePart) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://siima.net/ont/bicycle#hasWheel ?y) notFunctor(?y) -> (?y rdf:type owl:Thing) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://siima.net/ont/bicycle#hasWheel ?y) -> (?x rdf:type owl:Thing) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://siima.net/ont/bicycle#hasWheel ?y) -> (?x rdf:type http://siima.net/ont/bicycle#Vehicle) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://siima.net/ont/bicycle#Vehicle) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://siima.net/ont/bicycle#hasWheel ?y) notFunctor(?y) -> (?y rdf:type http://siima.net/ont/bicycle#Wheel) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://siima.net/ont/bicycle#hasSteer ?y) notFunctor(?y) -> (?y rdf:type owl:Thing) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://siima.net/ont/bicycle#hasSteer ?y) -> (?x rdf:type owl:Thing) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://siima.net/ont/bicycle#BicycleModel) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ prototype2b: (12af4b02:14eedbff4e9:-792d rdf:type ?d) -> (http://siima.net/ont/bicycle#BicycleModel rdfs:subClassOf ?d) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://siima.net/ont/bicycle#BicycleModel) -> (?a rdf:type owl:Thing) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://siima.net/ont/bicycle#wheels) -> (?a rdf:type http://spinrdf.org/spin#Functions) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ prototype2b: (12af4b02:14eedbff4e9:-792c rdf:type ?d) -> (http://siima.net/ont/bicycle#Vehicle rdfs:subClassOf ?d) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://siima.net/ont/bicycle#Vehicle) -> (?a rdf:type owl:Thing) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://siima.net/ont/bicycle#VehiclePart) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ prototype2b: (12af4b02:14eedbff4e9:-792b rdf:type ?d) -> (http://siima.net/ont/bicycle#VehiclePart rdfs:subClassOf ?d) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://siima.net/ont/bicycle#VehiclePart) -> (?a rdf:type owl:Thing) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://siima.net/ont/bicycle#Handlebar) -> (?a rdf:type owl:Thing) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://siima.net/ont/bicycle#Handlebar) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ prototype2b: (12af4b02:14eedbff4e9:-792a rdf:type ?d) -> (http://siima.net/ont/bicycle#Handlebar rdfs:subClassOf ?d) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://siima.net/ont/bicycle#Handlebar) -> (?a rdf:type http://siima.net/ont/bicycle#VehiclePart) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://siima.net/ont/bicycle#BicycleNameTemplate2) -> (?a rdf:type http://spinrdf.org/spin#Templates) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://siima.net/ont/bicycle#modelYear ?y) notFunctor(?y) -> (?y rdf:type xsd:string) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://siima.net/ont/bicycle#hasModel ?y) notFunctor(?y) -> (?y rdf:type owl:Thing) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://siima.net/ont/bicycle#hasModel ?y) -> (?x rdf:type owl:Thing) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/arg#bic ?b) -> (?a http://spinrdf.org/sp#arg ?b) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?x http://siima.net/ont/bicycle#wheelcount ?y) notFunctor(?y) -> (?y rdf:type xsd:integer) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://siima.net/ont/bicycle#Bicycle) -> (?a rdf:type owl:Thing) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://siima.net/ont/bicycle#Bicycle) -> (?a rdf:type rdfs:Resource) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ prototype2b: (12af4b02:14eedbff4e9:-7929 rdf:type ?d) -> (http://siima.net/ont/bicycle#Bicycle rdfs:subClassOf ?d) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a rdf:type http://siima.net/ont/bicycle#Bicycle) -> (?a rdf:type http://siima.net/ont/bicycle#Vehicle) ]
12:31:09 DEBUG FBRuleInfGraph       :: Adding rule [ (?a http://spinrdf.org/arg#wcount ?b) -> (?a http://spinrdf.org/sp#arg ?b) ]
12:31:09 INFO  Logger               :: Entering: siima.spin.ModelSpinManager method: getTemplates()
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:09 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:09 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:09 DEBUG LockMRSW             :: Lock : main
12:31:09 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (_:b0 <::type> ?TYPE_CLASS) (_:b0 <::type> ?directType)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       50 : _:b0 <::type> ?TYPE_CLASS
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?TYPE_CLASS
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1       50 : _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    _:b0 <::type> ?directType
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?type <::constraint> ?attribute) (?attribute <::defaultValue> ?defaultValue) (?attribute <::predicate> ?predicate)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0       30 : ?type <::constraint> ?attribute
    1       30 : ?attribute <::defaultValue> ?defaultValue
    2       30 : ?attribute <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?type <::constraint> ?attribute
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::defaultValue> ?defaultValue
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::defaultValue> ?defaultValue
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1          : null
    2        2 : TERM <::predicate> ?predicate
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::predicate> ?predicate
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?bic <::type> <::Bicycle>) (?bic <::modelYear> ?year)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0        5 : ?bic <::type> <::Bicycle>
    1       30 : ?bic <::modelYear> ?year
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?bic <::type> <::Bicycle>
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        2 : TERM <::modelYear> ?year
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    TERM <::modelYear> ?year
12:31:10 DEBUG LockMRSW             :: Lock : main
12:31:10 DEBUG ReorderTransformationSubstitution :: Reorder: (?bell <::type> <::Bell>) (?bic <::hasBell> ?bell)
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0        5 : ?bell <::type> <::Bell>
    1       30 : ?bic <::hasBell> ?bell
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?bell <::type> <::Bell>
12:31:10 DEBUG ReorderTransformationSubstitution :: >> Input
    0          : null
    1        3 : ?bic <::hasBell> TERM
12:31:10 DEBUG ReorderTransformationSubstitution :: << Output
    ?bic <::hasBell> TERM
