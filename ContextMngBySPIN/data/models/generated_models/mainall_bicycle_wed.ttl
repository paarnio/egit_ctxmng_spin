@prefix :      <http://siima.net/ont/bicycle#> .
@prefix afn:   <http://jena.hpl.hp.com/ARQ/function#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix arg:   <http://spinrdf.org/arg#> .
@prefix sp:    <http://spinrdf.org/sp#> .
@prefix spl:   <http://spinrdf.org/spl#> .
@prefix spif:  <http://spinrdf.org/spif#> .
@prefix owl:   <http://www.w3.org/2002/07/owl#> .
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix spin:  <http://spinrdf.org/spin#> .
@prefix accessories: <http://siima.net/ont/accessories#> .
@prefix fn:    <http://www.w3.org/2005/xpath-functions#> .

:Handlebar_2  a     :Handlebar ;
        rdfs:label  "Handlebar 2"^^xsd:string .

arg:wcount  a               rdf:Property ;
        rdfs:subPropertyOf  sp:arg .

:Bicycle  a               owl:Class ;
        rdfs:label        "Bicycle"^^xsd:string ;
        rdfs:subClassOf   :Vehicle ;
        spin:constraint   [ a             sp:Ask ;
                            rdfs:comment  "Bicycle wheel count is less than two"^^xsd:string ;
                            sp:where      ( [ sp:object     [ sp:varName  "cnt"^^xsd:string ] ;
                                              sp:predicate  :wheelcount ;
                                              sp:subject    spin:_this
                                            ] [ a              sp:Filter ;
                                                sp:expression  [ a        sp:le ;
                                                                 sp:arg1  [ sp:varName  "cnt"^^xsd:string ] ;
                                                                 sp:arg2  1
                                                               ]
                                              ] )
                          ] ;
        spin:constructor  [ a             sp:Construct ;
                            sp:templates  ( [ sp:object     "M2015" ;
                                              sp:predicate  :modelYear ;
                                              sp:subject    spin:_this
                                            ] [ sp:object     [ sp:varName  "datetime"^^xsd:string ] ;
                                                sp:predicate  :created ;
                                                sp:subject    spin:_this
                                              ] ) ;
                            sp:where      ( [ a            sp:Optional ;
                                              sp:elements  ( [ sp:object     [ sp:varName  "exyear"^^xsd:string ] ;
                                                               sp:predicate  :modelYear ;
                                                               sp:subject    spin:_this
                                                             ] )
                                            ] [ a              sp:Filter ;
                                                sp:expression  [ a        sp:not ;
                                                                 sp:arg1  [ a        sp:bound ;
                                                                            sp:arg1  [ sp:varName  "exyear"^^xsd:string ]
                                                                          ]
                                                               ]
                                              ] [ a              sp:Bind ;
                                                  sp:expression  [ a  afn:now ] ;
                                                  sp:variable    [ sp:varName  "datetime"^^xsd:string ]
                                                ] )
                          ] ;
        spin:rule         [ a             sp:Construct ;
                            sp:templates  ( [ sp:object     [ sp:varName  "cnt"^^xsd:string ] ;
                                              sp:predicate  :wheelcount ;
                                              sp:subject    [ sp:varName  "bic"^^xsd:string ]
                                            ] ) ;
                            sp:where      ( [ sp:object     :Bicycle ;
                                              sp:predicate  rdf:type ;
                                              sp:subject    [ sp:varName  "bic"^^xsd:string ]
                                            ] [ a              sp:Bind ;
                                                sp:expression  [ a        :wheels ;
                                                                 arg:bic  [ sp:varName  "bic"^^xsd:string ]
                                                               ] ;
                                                sp:variable    [ sp:varName  "cnt"^^xsd:string ]
                                              ] )
                          ] .

:Helkama_2  a       :BicycleModel ;
        rdfs:label  "Helkama 2"^^xsd:string .

:Wheel_6  a         :Wheel ;
        rdfs:label  "Wheel 6"^^xsd:string .

:Bicycle_2  a        :Bicycle ;
        rdfs:label   "Bicycle 2"^^xsd:string ;
        :hasModel    :Tunturi_3 ;
        :hasWheel    :Wheel_4 , :Wheel_3 ;
        :name        "VAKIO_BY_UBNT2" ;
        :wheelcount  2 .

arg:bic  a                  rdf:Property ;
        rdfs:subPropertyOf  sp:arg .

:wheelcount  a      owl:DatatypeProperty ;
        rdfs:label  "wheelcount"^^xsd:string ;
        rdfs:range  xsd:integer .

accessories:Bell  a       owl:Class ;
        rdfs:subClassOf   accessories:Accessory ;
        spin:constructor  [ a             sp:Construct ;
                            sp:templates  ( [ sp:object     [ sp:varName  "datetime"^^xsd:string ] ;
                                              sp:predicate  :created ;
                                              sp:subject    spin:_this
                                            ] ) ;
                            sp:where      ( [ a            sp:Optional ;
                                              sp:elements  ( [ sp:object     [ sp:varName  "exdate"^^xsd:string ] ;
                                                               sp:predicate  :created ;
                                                               sp:subject    spin:_this
                                                             ] )
                                            ] [ a              sp:Filter ;
                                                sp:expression  [ a        sp:not ;
                                                                 sp:arg1  [ a        sp:bound ;
                                                                            sp:arg1  [ sp:varName  "exdate"^^xsd:string ]
                                                                          ]
                                                               ]
                                              ] [ a              sp:Bind ;
                                                  sp:expression  [ a  afn:now ] ;
                                                  sp:variable    [ sp:varName  "datetime"^^xsd:string ]
                                                ] )
                          ] .

:UpdateBicycleNameTemplate2
        a                spin:UpdateTemplate ;
        rdfs:subClassOf  spin:UpdateTemplates ;
        spin:body        [ a                 sp:Modify ;
                           sp:deletePattern  ( [ sp:object     [ sp:varName  "oldname"^^xsd:string ] ;
                                                 sp:predicate  :name ;
                                                 sp:subject    [ sp:varName  "bic"^^xsd:string ]
                                               ] ) ;
                           sp:insertPattern  ( [ sp:object     "VAKIO_BY_UBNT2" ;
                                                 sp:predicate  :name ;
                                                 sp:subject    [ sp:varName  "bic"^^xsd:string ]
                                               ] ) ;
                           sp:where          ( [ sp:object     :Bicycle ;
                                                 sp:predicate  rdf:type ;
                                                 sp:subject    [ sp:varName  "bic"^^xsd:string ]
                                               ] [ sp:object     [ sp:varName  "oldname"^^xsd:string ] ;
                                                   sp:predicate  :name ;
                                                   sp:subject    [ sp:varName  "bic"^^xsd:string ]
                                                 ] )
                         ] .

:Wheel_1  a         :Wheel ;
        rdfs:label  "Wheel 1"^^xsd:string .

:UpdateBicycleName  a    spin:UpdateTemplate ;
        rdfs:label       "Update bicycle name"^^xsd:string ;
        rdfs:subClassOf  spin:UpdateTemplates ;
        spin:body        [ a                 sp:Modify ;
                           sp:deletePattern  ( [ sp:object     [ sp:varName  "oldname"^^xsd:string ] ;
                                                 sp:predicate  :name ;
                                                 sp:subject    [ sp:varName  "bic"^^xsd:string ]
                                               ] ) ;
                           sp:insertPattern  ( [ sp:object     [ sp:varName  "newname"^^xsd:string ] ;
                                                 sp:predicate  :name ;
                                                 sp:subject    [ sp:varName  "bic"^^xsd:string ]
                                               ] ) ;
                           sp:where          ( [ sp:object     :Bicycle ;
                                                 sp:predicate  rdf:type ;
                                                 sp:subject    [ sp:varName  "bic"^^xsd:string ]
                                               ] [ sp:object     [ sp:varName  "model"^^xsd:string ] ;
                                                   sp:predicate  :hasModel ;
                                                   sp:subject    [ sp:varName  "bic"^^xsd:string ]
                                                 ] [ sp:object     [ sp:varName  "oldname"^^xsd:string ] ;
                                                     sp:predicate  :name ;
                                                     sp:subject    [ sp:varName  "bic"^^xsd:string ]
                                                   ] )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           spl:predicate  arg:newname ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           spl:predicate  arg:model ;
                           spl:valueType  xsd:string
                         ] .

:hasModel  a        owl:ObjectProperty ;
        rdfs:label  "has model"^^xsd:string .

:Nishiki_4  a       :BicycleModel ;
        rdfs:label  "Nishiki 4"^^xsd:string .

:modelYear  a       owl:DatatypeProperty ;
        rdfs:range  xsd:string .

:BicycleNameTemplate2
        a                spin:Template ;
        rdfs:label       "Bicycle name template2"^^xsd:string ;
        rdfs:subClassOf  spin:Templates ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "bic"^^xsd:string ] [ sp:varName
                                             "wcount"^^xsd:string ] [ sp:varName
                                             "name"^^xsd:string ] ) ;
                           sp:where            ( [ sp:object     :Bicycle ;
                                                   sp:predicate  rdf:type ;
                                                   sp:subject    [ sp:varName  "bic"^^xsd:string ]
                                                 ] [ sp:object     [ sp:varName  "wcount"^^xsd:string ] ;
                                                     sp:predicate  :wheelcount ;
                                                     sp:subject    [ sp:varName  "bic"^^xsd:string ]
                                                   ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                       sp:predicate  :name ;
                                                       sp:subject    [ sp:varName  "bic"^^xsd:string ]
                                                     ] )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "Number of bicycle wheels"^^xsd:string ;
                           spl:predicate  arg:wcount ;
                           spl:valueType  xsd:integer
                         ] .

:Wheel_4  a         :Wheel ;
        rdfs:label  "Wheel 4"^^xsd:string .

:Handlebar  a             owl:Class ;
        rdfs:label        "Handlebar"^^xsd:string ;
        rdfs:subClassOf   :VehiclePart ;
        spin:constructor  [ a             sp:Construct ;
                            sp:templates  ( [ sp:object     accessories:Bell ;
                                              sp:predicate  rdf:type ;
                                              sp:subject    [ sp:varName  "newbell"^^xsd:string ]
                                            ] [ sp:object     [ sp:varName  "newbell"^^xsd:string ] ;
                                                sp:predicate  :hasBell ;
                                                sp:subject    spin:_this
                                              ] ) ;
                            sp:where      ( [ a            sp:Optional ;
                                              sp:elements  ( [ sp:object     [ sp:varName  "exbell"^^xsd:string ] ;
                                                               sp:predicate  :hasBell ;
                                                               sp:subject    spin:_this
                                                             ] )
                                            ] [ a              sp:Filter ;
                                                sp:expression  [ a        sp:not ;
                                                                 sp:arg1  [ a        sp:bound ;
                                                                            sp:arg1  [ sp:varName  "exbell"^^xsd:string ]
                                                                          ]
                                                               ]
                                              ] [ a              sp:Bind ;
                                                  sp:expression  [ a  afn:now ] ;
                                                  sp:variable    [ sp:varName  "now"^^xsd:string ]
                                                ] [ a              sp:Bind ;
                                                    sp:expression  [ a        sp:iri ;
                                                                     sp:arg1  [ a        fn:concat ;
                                                                                sp:arg1  "http://siima.net/ont/accessories#Bell_" ;
                                                                                sp:arg2  [ a        sp:str ;
                                                                                           sp:arg1  [ sp:varName  "now"^^xsd:string ]
                                                                                         ]
                                                                              ]
                                                                   ] ;
                                                    sp:variable    [ sp:varName  "newbell"^^xsd:string ]
                                                  ] )
                          ] .

<http://siima.net/ont/bicycle>
        a                owl:Ontology ;
        owl:imports      <http://spinrdf.org/spl> , <http://siima.net/ont/accessories> ;
        owl:versionInfo  "Created with TopBraid Composer"^^xsd:string .

:VehiclePart  a          owl:Class ;
        rdfs:label       "Vehicle part"^^xsd:string ;
        rdfs:subClassOf  owl:Thing .

:Jupiter_1  a       :BicycleModel ;
        rdfs:label  "Jupiter 1"^^xsd:string .

:Bicycle_3  a        :Bicycle ;
        rdfs:label   "Bicycle 3"^^xsd:string ;
        :hasModel    :Helkama_2 ;
        :hasWheel    :Wheel_6 , :Wheel_5 ;
        :name        "VAKIO_BY_UBNT2" ;
        :wheelcount  2 .

:Wheel_2  a         :Wheel ;
        rdfs:label  "Wheel 2"^^xsd:string .

:ConstructTemplatesVPA1
        a                spin:ConstructTemplate ;
        rdfs:subClassOf  spin:ConstructTemplates ;
        spin:body        [ a             sp:Construct ;
                           sp:templates  ( [ sp:object     :Bicycle ;
                                             sp:predicate  rdf:type ;
                                             sp:subject    [ sp:varName  "bic"^^xsd:string ]
                                           ] [ sp:object     [ sp:varName  "datetime"^^xsd:string ] ;
                                               sp:predicate  :created ;
                                               sp:subject    [ sp:varName  "bic"^^xsd:string ]
                                             ] ) ;
                           sp:where      ( [ a              sp:Bind ;
                                             sp:expression  [ a  afn:now ] ;
                                             sp:variable    [ sp:varName  "datetime"^^xsd:string ]
                                           ] [ a              sp:Bind ;
                                               sp:expression  [ a        sp:iri ;
                                                                sp:arg1  [ a        fn:concat ;
                                                                           sp:arg1  "http://siima.net/ont/bicycle#Bicycle_inst_" ;
                                                                           sp:arg2  [ a        sp:str ;
                                                                                      sp:arg1  [ sp:varName  "datetime"^^xsd:string ]
                                                                                    ]
                                                                         ]
                                                              ] ;
                                               sp:variable    [ sp:varName  "bic"^^xsd:string ]
                                             ] )
                         ] .

:Handlebar_1  a     :Handlebar ;
        rdfs:label  "Handlebar 1"^^xsd:string .

:Vehicle  a              owl:Class ;
        rdfs:label       "Vehicle"^^xsd:string ;
        rdfs:subClassOf  owl:Thing .

arg:model  a                rdf:Property ;
        rdfs:subPropertyOf  sp:arg .

:wheels  a               spin:Function ;
        rdfs:subClassOf  spin:Functions ;
        spin:body        [ a                   sp:Select ;
                           sp:groupBy          ( [ sp:varName  "bic"^^xsd:string ] ) ;
                           sp:resultVariables  ( [ sp:expression  [ a              sp:Count ;
                                                                    sp:expression  [ sp:varName  "wheel"^^xsd:string ]
                                                                  ] ;
                                                   sp:varName     "wcount"^^xsd:string
                                                 ] ) ;
                           sp:where            ( [ sp:object     [ sp:varName  "wheel"^^xsd:string ] ;
                                                   sp:predicate  :hasWheel ;
                                                   sp:subject    [ sp:varName  "bic"^^xsd:string ]
                                                 ] )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "bicycle instance"^^xsd:string ;
                           spl:predicate  arg:bic ;
                           spl:valueType  rdfs:Resource
                         ] .

arg:newname  a              rdf:Property ;
        rdfs:subPropertyOf  sp:arg .

:BicycleModel  a         owl:Class ;
        rdfs:label       "Bicycle model"^^xsd:string ;
        rdfs:subClassOf  owl:Thing .

:Wheel_5  a         :Wheel ;
        rdfs:label  "Wheel 5"^^xsd:string .

:Bicycle_1  a                     :Bicycle ;
        rdfs:label                "Bicycle 1"^^xsd:string ;
        accessories:hasAccessory  accessories:CatEye_1 , accessories:Bell_1 ;
        :hasModel                 :Jupiter_1 ;
        :hasWheel                 :Wheel_2 , :Wheel_1 ;
        :name                     "VAKIO_BY_UBNT2" ;
        :wheelcount               2 .

:hasSteer  a        owl:ObjectProperty ;
        rdfs:label  "has steer"^^xsd:string .

:hasWheel  a         owl:ObjectProperty ;
        rdfs:domain  :Vehicle ;
        rdfs:label   "has wheel"^^xsd:string ;
        rdfs:range   :Wheel .

:Tunturi_3  a       :BicycleModel ;
        rdfs:label  "Tunturi 3"^^xsd:string .

:Bell_2  a        accessories:Bell ;
        :created  "2016-01-01T12:35:54.320+02:00"^^xsd:dateTime .

:DeleteBicycleNameTemplate
        a                spin:UpdateTemplate ;
        rdfs:subClassOf  spin:UpdateTemplates ;
        spin:body        [ a                 sp:Modify ;
                           sp:deletePattern  ( [ sp:object     [ sp:varName  "oldname"^^xsd:string ] ;
                                                 sp:predicate  :name ;
                                                 sp:subject    [ sp:varName  "bic"^^xsd:string ]
                                               ] ) ;
                           sp:insertPattern  ( [ sp:object     [ sp:varName  "newname"^^xsd:string ] ;
                                                 sp:predicate  :name ;
                                                 sp:subject    [ sp:varName  "bic"^^xsd:string ]
                                               ] ) ;
                           sp:where          ( [ sp:object     :Bicycle ;
                                                 sp:predicate  rdf:type ;
                                                 sp:subject    [ sp:varName  "bic"^^xsd:string ]
                                               ] [ sp:object     [ sp:varName  "oldname"^^xsd:string ] ;
                                                   sp:predicate  :name ;
                                                   sp:subject    [ sp:varName  "bic"^^xsd:string ]
                                                 ] )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           spl:predicate  arg:newname ;
                           spl:valueType  xsd:string
                         ] .

:Bicycle_4  a        :Bicycle ;
        :name        "VAKIO_BY_UBNT2" ;
        :wheelcount  0 .

:Wheel  a                owl:Class ;
        rdfs:label       "Wheel"^^xsd:string ;
        rdfs:subClassOf  :VehiclePart .

:created  a         owl:DatatypeProperty ;
        rdfs:range  xsd:dateTime .

:name   a           owl:DatatypeProperty ;
        rdfs:label  "name"^^xsd:string ;
        rdfs:range  xsd:string .

:hasBell  a     owl:ObjectProperty .

:BicycleNameTemplate1
        a                spin:SelectTemplate ;
        rdfs:label       "Bicycle name template1"^^xsd:string ;
        rdfs:subClassOf  spin:SelectTemplates ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "bic"^^xsd:string ] [ sp:varName
                                             "wcount"^^xsd:string ] [ sp:varName
                                             "name"^^xsd:string ] ) ;
                           sp:where            ( [ sp:object     :Bicycle ;
                                                   sp:predicate  rdf:type ;
                                                   sp:subject    [ sp:varName  "bic"^^xsd:string ]
                                                 ] [ sp:object     [ sp:varName  "wcount"^^xsd:string ] ;
                                                     sp:predicate  :wheelcount ;
                                                     sp:subject    [ sp:varName  "bic"^^xsd:string ]
                                                   ] [ sp:object     [ sp:varName  "name"^^xsd:string ] ;
                                                       sp:predicate  :name ;
                                                       sp:subject    [ sp:varName  "bic"^^xsd:string ]
                                                     ] )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "Number of bicycle wheels"^^xsd:string ;
                           spl:predicate  arg:wcount ;
                           spl:valueType  xsd:integer
                         ] .

:Wheel_3  a         :Wheel ;
        rdfs:label  "Wheel 3"^^xsd:string .

sp:UUID  a               spin:Function ;
        rdfs:comment     "Returns a fresh IRI from the UUID URN scheme. Each call of UUID() returns a different UUID. It must not be the \"nil\" UUID (all zeroes). The variant and version of the UUID is implementation dependent."^^xsd:string ;
        rdfs:label       "UUID"^^xsd:string ;
        rdfs:subClassOf  spl:URIFunctions ;
        spin:returnType  rdfs:Resource ;
        spin:symbol      "UUID"^^xsd:string .

spl:InferDefaultValue
        a                   spin:ConstructTemplate ;
        rdfs:comment        "Can be used to infer default values for a given subject/predicate combination. This is typically assigned as spin:rule to a class. If ?this does not already have a value for a given property {?predicate}, then this will infer the value {?defaultValue}."^^xsd:string ;
        rdfs:label          "Infer default value"^^xsd:string ;
        rdfs:subClassOf     spin:ConstructTemplates ;
        spin:body           [ a             sp:Construct ;
                              sp:templates  ( [ sp:object     [ sp:varName  "defaultValue"^^xsd:string ] ;
                                                sp:predicate  [ sp:varName  "predicate"^^xsd:string ] ;
                                                sp:subject    spin:_this
                                              ] ) ;
                              sp:where      ( [ a            sp:Optional ;
                                                sp:elements  ( [ sp:object     [ sp:varName  "anyValue"^^xsd:string ] ;
                                                                 sp:predicate  [ sp:varName  "predicate"^^xsd:string ] ;
                                                                 sp:subject    spin:_this
                                                               ] )
                                              ] [ a              sp:Filter ;
                                                  sp:expression  [ a        sp:not ;
                                                                   sp:arg1  [ a        sp:bound ;
                                                                              sp:arg1  [ sp:varName  "anyValue"^^xsd:string ]
                                                                            ]
                                                                 ]
                                                ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The default value to infer."^^xsd:string ;
                              spl:predicate  spl:defaultValue
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The predicate to infer the default value of."^^xsd:string ;
                              spl:predicate  spl:predicate ;
                              spl:valueType  rdf:Property
                            ] ;
        spin:labelTemplate  "Default value for {?predicate}: {?defaultValue}"^^xsd:string .

sp:contains  a           spin:Function ;
        rdfs:comment     "Returns an xsd:boolean indicating whether or not the value of ?arg1 contains (at the beginning, at the end, or anywhere within) at least one sequence of collation units that provides a minimal match to the collation units in the value of ?arg2, according to the collation that is used."^^xsd:string ;
        rdfs:label       "contains"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-contains> ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input string."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The sub-string to search for in the input string."^^xsd:string ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:symbol      "CONTAINS"^^xsd:string .

spl:ConstructDefaultValues
        a                   spin:ConstructTemplate ;
        rdfs:comment        "This template can be attached as spin:constructor to a root class such as rdfs:Resource to ensure that SPIN processors assign default values to certain properties. Looks for any templates attached as spin:constraints to the types of ?this and then assigns their declared spl:defaultValues." ;
        rdfs:label          "Construct default values"^^xsd:string ;
        rdfs:subClassOf     spin:ConstructTemplates ;
        spin:body           [ a             sp:Construct ;
                              sp:templates  ( [ sp:object     [ sp:varName  "defaultValue"^^xsd:string ] ;
                                                sp:predicate  [ sp:varName  "predicate"^^xsd:string ] ;
                                                sp:subject    spin:_this
                                              ] ) ;
                              sp:where      ( [ sp:object     [ sp:varName  "directType"^^xsd:string ] ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    spin:_this
                                              ] [ a           sp:TriplePath ;
                                                  sp:object   [ sp:varName  "type"^^xsd:string ] ;
                                                  sp:path     [ a           sp:ModPath ;
                                                                sp:modMax   -2 ;
                                                                sp:modMin   0 ;
                                                                sp:subPath  rdfs:subClassOf
                                                              ] ;
                                                  sp:subject  [ sp:varName  "directType"^^xsd:string ]
                                                ] [ sp:object     [ sp:varName  "attribute"^^xsd:string ] ;
                                                    sp:predicate  spin:constraint ;
                                                    sp:subject    [ sp:varName  "type"^^xsd:string ]
                                                  ] [ sp:object     [ sp:varName  "defaultValue"^^xsd:string ] ;
                                                      sp:predicate  spl:defaultValue ;
                                                      sp:subject    [ sp:varName  "attribute"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "predicate"^^xsd:string ] ;
                                                        sp:predicate  spl:predicate ;
                                                        sp:subject    [ sp:varName  "attribute"^^xsd:string ]
                                                      ] )
                            ] ;
        spin:labelTemplate  "Construct default values"^^xsd:string .

spl:predicate  a            rdf:Property ;
        rdfs:label          "predicate"^^xsd:string ;
        rdfs:subPropertyOf  sp:arg .

spl:minCount  a             rdf:Property ;
        rdfs:subPropertyOf  spl:count .

spl:objectInGraph  a     spin:Function ;
        rdfs:comment     "Gets the object of a given subject (?arg1) / predicate (?arg2) combination in a given graph ?arg3. Note that if multiple values are present then the result might be unpredictably random."^^xsd:string ;
        rdfs:label       "object in graph"^^xsd:string ;
        rdfs:subClassOf  spl:OntologyFunctions ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "object"^^xsd:string ] ) ;
                           sp:where            ( [ a                 sp:NamedGraph ;
                                                   sp:elements       ( [ sp:object     [ sp:varName  "object"^^xsd:string ] ;
                                                                         sp:predicate  spin:_arg2 ;
                                                                         sp:subject    spin:_arg1
                                                                       ] ) ;
                                                   sp:graphNameNode  spin:_arg3
                                                 ] )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The subject to get the object from."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Resource
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The predicate to get the object of."^^xsd:string ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdf:Property
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The graph to query in."^^xsd:string ;
                           spl:predicate  sp:arg3 ;
                           spl:valueType  rdfs:Resource
                         ] .

spl:subClassOf  a        spin:Function ;
        rdfs:comment     "Checks whether a given class (?arg1) is a (transitive) sub-class of another class (?arg2)."^^xsd:string ;
        rdfs:label       "sub class of"^^xsd:string ;
        rdfs:subClassOf  spl:OntologyFunctions ;
        spin:body        [ a         sp:Ask ;
                           sp:where  ( [ a           sp:TriplePath ;
                                         sp:object   spin:_arg2 ;
                                         sp:path     [ a           sp:ModPath ;
                                                       sp:modMax   -2 ;
                                                       sp:modMin   0 ;
                                                       sp:subPath  rdfs:subClassOf
                                                     ] ;
                                         sp:subject  spin:_arg1
                                       ] )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The potential sub-class."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Class
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The potential super-class."^^xsd:string ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdfs:Class
                         ] ;
        spin:returnType  xsd:boolean .

spl:optional  a             rdf:Property ;
        rdfs:label          "optional"^^xsd:string ;
        rdfs:range          xsd:boolean ;
        rdfs:subPropertyOf  sp:arg .

sp:sha256  a             spin:Function ;
        rdfs:comment     "Returns the SHA256 checksum, as a hex digit string, calculated on the UTF-8 representation of the simple literal or lexical form of the xsd:string. Hex digits SHOULD be in lower case."^^xsd:string ;
        rdfs:label       "sha256"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-sha256> ;
        rdfs:subClassOf  spl:MiscFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input literal."^^xsd:string ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "SHA256"^^xsd:string .

sp:lang  a               spin:Function ;
        rdfs:comment     "Returns the language tag of ?arg1, if it has one. It returns \"\" if the literal has no language tag. Node that the RDF data model does not include literals with an empty language tag." ;
        rdfs:label       "lang"^^xsd:string ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the literal to get the language of" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "lang"^^xsd:string .

spl:relevantPropertyAtClass
        a                spin:MagicProperty ;
        rdfs:comment     "A magic property that establishes a relationship between properties (left) and classes (right) to determine which properties are \"relevant\" for the class. Relevant means that they have the class in their domain and/or restrictions, including superclasses and sub-properties (unless they define their own domain). Domains consisting of an owl:unionOf are also handled.\n\nNote that the performance of the body of this magic property has been optimized for the case in which the class is given, so ideally use this for queries such as  ?property spl:relevantPropertyAtClass skos:Concept ."^^xsd:string ;
        rdfs:label       "relevant property at class"^^xsd:string ;
        rdfs:subClassOf  spin:MagicProperties ;
        spin:body        [ a                   sp:Select ;
                           sp:distinct         true ;
                           sp:resultVariables  ( [ sp:varName  "class"^^xsd:string ] ) ;
                           sp:where            ( [ a           sp:TriplePath ;
                                                   sp:object   [ sp:varName  "superClass"^^xsd:string ] ;
                                                   sp:path     [ a           sp:ModPath ;
                                                                 sp:modMax   -2 ;
                                                                 sp:modMin   0 ;
                                                                 sp:subPath  rdfs:subClassOf
                                                               ] ;
                                                   sp:subject  [ sp:varName  "class"^^xsd:string ]
                                                 ] [ a            sp:Union ;
                                                     sp:elements  ( ( [ sp:object     [ sp:varName  "superClass"^^xsd:string ] ;
                                                                        sp:predicate  rdfs:domain ;
                                                                        sp:subject    [ sp:varName  "property"^^xsd:string ]
                                                                      ] ) ( [ sp:object     [ sp:varName  "property"^^xsd:string ] ;
                                                                              sp:predicate  owl:onProperty ;
                                                                              sp:subject    [ sp:varName  "superClass"^^xsd:string ]
                                                                            ] ) ( [ sp:object     [ sp:varName  "superClass"^^xsd:string ] ;
                                                                                    sp:predicate  rdf:first ;
                                                                                    sp:subject    [ sp:varName  "listSegment"^^xsd:string ]
                                                                                  ] [ a           sp:TriplePath ;
                                                                                      sp:object   [ sp:varName  "listSegment"^^xsd:string ] ;
                                                                                      sp:path     [ a           sp:ModPath ;
                                                                                                    sp:modMax   -2 ;
                                                                                                    sp:modMin   0 ;
                                                                                                    sp:subPath  rdf:rest
                                                                                                  ] ;
                                                                                      sp:subject  [ sp:varName  "list"^^xsd:string ]
                                                                                    ] [ a           sp:TriplePath ;
                                                                                        sp:object   [ sp:varName  "list"^^xsd:string ] ;
                                                                                        sp:path     [ a         sp:SeqPath ;
                                                                                                      sp:path1  rdfs:domain ;
                                                                                                      sp:path2  owl:unionOf
                                                                                                    ] ;
                                                                                        sp:subject  [ sp:varName  "property"^^xsd:string ]
                                                                                      ] ) )
                                                   ] [ a           sp:TriplePath ;
                                                       sp:object   [ sp:varName  "property"^^xsd:string ] ;
                                                       sp:path     [ a           sp:ModPath ;
                                                                     sp:modMax   -2 ;
                                                                     sp:modMin   0 ;
                                                                     sp:subPath  rdfs:subPropertyOf
                                                                   ] ;
                                                       sp:subject  spin:_arg1
                                                     ] [ a              sp:Filter ;
                                                         sp:expression  [ a        sp:or ;
                                                                          sp:arg1  [ a        sp:eq ;
                                                                                     sp:arg1  spin:_arg1 ;
                                                                                     sp:arg2  [ sp:varName  "property"^^xsd:string ]
                                                                                   ] ;
                                                                          sp:arg2  [ a            sp:notExists ;
                                                                                     sp:elements  ( [ sp:object     [ sp:varName  "anyDomain"^^xsd:string ] ;
                                                                                                      sp:predicate  rdfs:domain ;
                                                                                                      sp:subject    spin:_arg1
                                                                                                    ] )
                                                                                   ]
                                                                        ]
                                                       ] [ a              sp:Filter ;
                                                           sp:expression  [ a        sp:isIRI ;
                                                                            sp:arg1  [ sp:varName  "class"^^xsd:string ]
                                                                          ]
                                                         ] )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The property."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdf:Property
                         ] ;
        spin:returnType  rdfs:Class .

spl:UnionTemplate  a     rdfs:Class ;
        rdfs:comment     "This type can be used for templates that serve as the union (or \"collector\") of other templates. Union templates differ from other templates in that all spl:Arguments are optional. This means that union templates can be declared as subclasses of multiple other templates, yet when instantiated, only some of the arguments defined by the superclasses need to be filled in."^^xsd:string ;
        rdfs:label       "Union template"^^xsd:string ;
        rdfs:subClassOf  spin:Template .

sp:now  a                spin:Function ;
        rdfs:comment     "Gets the current date and time as an xsd:dateTime literal."^^xsd:string ;
        rdfs:label       "now"^^xsd:string ;
        rdfs:subClassOf  spl:DateFunctions ;
        spin:returnType  xsd:dateTime ;
        spin:symbol      "now"^^xsd:string .

sp:isBlank  a            spin:Function ;
        rdfs:comment     "Checks whether a given node is a blank node." ;
        rdfs:label       "isBlank"^^xsd:string ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the node being checked" ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "isBlank"^^xsd:string .

sp:day  a                spin:Function ;
        rdfs:comment     "Extracts the day from a date/time literal."^^xsd:string ;
        rdfs:label       "day"^^xsd:string ;
        rdfs:subClassOf  spl:DateFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The date or dateTime argument."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  xsd:integer ;
        spin:symbol      "day"^^xsd:string .

arg:max  a                  rdf:Property ;
        rdfs:subPropertyOf  sp:arg .

spl:valueType  a            rdf:Property ;
        rdfs:label          "value type"^^xsd:string ;
        rdfs:subPropertyOf  sp:arg .

spl:min  a               spin:Function ;
        rdfs:comment     "Takes two arguments and returns the smaller one of them."^^xsd:string ;
        rdfs:label       "min"^^xsd:string ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "result"^^xsd:string ] ) ;
                           sp:where            ( [ a              sp:Bind ;
                                                   sp:expression  [ a        sp:if ;
                                                                    sp:arg1  [ a        sp:lt ;
                                                                               sp:arg1  spin:_arg1 ;
                                                                               sp:arg2  spin:_arg2
                                                                             ] ;
                                                                    sp:arg2  spin:_arg1 ;
                                                                    sp:arg3  spin:_arg2
                                                                  ] ;
                                                   sp:variable    [ sp:varName  "result"^^xsd:string ]
                                                 ] )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The first argument."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The second argument."^^xsd:string ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  rdfs:Literal .

spl:count  a                rdf:Property ;
        rdfs:label          "count"^^xsd:string ;
        rdfs:subPropertyOf  sp:arg .

spl:Argument  a             spin:ConstructTemplate ;
        rdfs:comment        "Provides metadata about an argument of a SPIN Function or Template. Arguments wrap a given rdf:Property (predicate) and specify its value type and whether the argument is optional. When used as spin:constraint, the body of this template will verify that a non-optional value exists and that it has the specified value type. Arguments that have been declared spl:optional true become optional if the type of ?this is spl:UnionTemplate. "^^xsd:string ;
        rdfs:label          "Argument"^^xsd:string ;
        rdfs:subClassOf     spin:ConstructTemplates ;
        spin:body           [ a             sp:Construct ;
                              sp:templates  ( [ sp:object     spin:ConstraintViolation ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    _:b0
                                              ] [ sp:object     spin:_this ;
                                                  sp:predicate  spin:violationRoot ;
                                                  sp:subject    _:b0
                                                ] [ sp:object     [ sp:varName  "predicate"^^xsd:string ] ;
                                                    sp:predicate  spin:violationPath ;
                                                    sp:subject    _:b0
                                                  ] [ sp:object     [ sp:varName  "label"^^xsd:string ] ;
                                                      sp:predicate  rdfs:label ;
                                                      sp:subject    _:b0
                                                    ] ) ;
                              sp:where      ( ( [ a              sp:Filter ;
                                                  sp:expression  [ a        sp:isIRI ;
                                                                   sp:arg1  spin:_this
                                                                 ]
                                                ] ) [ a            sp:Union ;
                                                      sp:elements  ( ( ( ( [ a              sp:Filter ;
                                                                             sp:expression  [ a        sp:or ;
                                                                                              sp:arg1  [ a        sp:not ;
                                                                                                         sp:arg1  [ a        sp:bound ;
                                                                                                                    sp:arg1  [ sp:varName  "optional"^^xsd:string ]
                                                                                                                  ]
                                                                                                       ] ;
                                                                                              sp:arg2  [ a        sp:eq ;
                                                                                                         sp:arg1  [ sp:varName  "optional"^^xsd:string ] ;
                                                                                                         sp:arg2  false
                                                                                                       ]
                                                                                            ]
                                                                           ] ) [ a              sp:Filter ;
                                                                                 sp:expression  [ a            sp:notExists ;
                                                                                                  sp:elements  ( [ sp:object     [ sp:varName  "value"^^xsd:string ] ;
                                                                                                                   sp:predicate  [ sp:varName  "predicate"^^xsd:string ] ;
                                                                                                                   sp:subject    spin:_this
                                                                                                                 ] )
                                                                                                ]
                                                                               ] [ a              sp:Filter ;
                                                                                   sp:expression  [ a            sp:notExists ;
                                                                                                    sp:elements  ( [ sp:object     [ sp:varName  "template"^^xsd:string ] ;
                                                                                                                     sp:predicate  rdf:type ;
                                                                                                                     sp:subject    spin:_this
                                                                                                                   ] [ a              sp:Filter ;
                                                                                                                       sp:expression  [ a        spl:instanceOf ;
                                                                                                                                        sp:arg1  [ sp:varName  "template"^^xsd:string ] ;
                                                                                                                                        sp:arg2  spl:UnionTemplate
                                                                                                                                      ]
                                                                                                                     ] )
                                                                                                  ]
                                                                                 ] ) [ a              sp:Bind ;
                                                                                       sp:expression  [ a        sp:concat ;
                                                                                                        sp:arg1  "Missing value for argument " ;
                                                                                                        sp:arg2  [ a        afn:localname ;
                                                                                                                   sp:arg1  [ sp:varName  "predicate"^^xsd:string ]
                                                                                                                 ]
                                                                                                      ] ;
                                                                                       sp:variable    [ sp:varName  "label"^^xsd:string ]
                                                                                     ] ) ( ( ( [ a              sp:Filter ;
                                                                                                 sp:expression  [ a        sp:bound ;
                                                                                                                  sp:arg1  [ sp:varName  "valueType"^^xsd:string ]
                                                                                                                ]
                                                                                               ] ) [ sp:object     [ sp:varName  "value"^^xsd:string ] ;
                                                                                                     sp:predicate  [ sp:varName  "predicate"^^xsd:string ] ;
                                                                                                     sp:subject    spin:_this
                                                                                                   ] [ a              sp:Filter ;
                                                                                                       sp:expression  [ a        sp:and ;
                                                                                                                        sp:arg1  [ a        sp:not ;
                                                                                                                                   sp:arg1  [ a        spl:instanceOf ;
                                                                                                                                              sp:arg1  [ sp:varName  "value"^^xsd:string ] ;
                                                                                                                                              sp:arg2  [ sp:varName  "valueType"^^xsd:string ]
                                                                                                                                            ]
                                                                                                                                 ] ;
                                                                                                                        sp:arg2  [ a        sp:or ;
                                                                                                                                   sp:arg1  [ a        sp:ne ;
                                                                                                                                              sp:arg1  [ sp:varName  "valueType"^^xsd:string ] ;
                                                                                                                                              sp:arg2  rdfs:Resource
                                                                                                                                            ] ;
                                                                                                                                   sp:arg2  [ a        sp:isLiteral ;
                                                                                                                                              sp:arg1  [ sp:varName  "value"^^xsd:string ]
                                                                                                                                            ]
                                                                                                                                 ]
                                                                                                                      ]
                                                                                                     ] ) [ a              sp:Bind ;
                                                                                                           sp:expression  [ a        sp:concat ;
                                                                                                                            sp:arg1  "Incorrect type of argument " ;
                                                                                                                            sp:arg2  [ a        afn:localname ;
                                                                                                                                       sp:arg1  [ sp:varName  "predicate"^^xsd:string ]
                                                                                                                                     ] ;
                                                                                                                            sp:arg3  " (expected: " ;
                                                                                                                            sp:arg4  [ a        afn:localname ;
                                                                                                                                       sp:arg1  [ sp:varName  "valueType"^^xsd:string ]
                                                                                                                                     ] ;
                                                                                                                            sp:arg5  ")"
                                                                                                                          ] ;
                                                                                                           sp:variable    [ sp:varName  "label"^^xsd:string ]
                                                                                                         ] ) )
                                                    ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "the property holding the values of each function call"^^xsd:string ;
                              spl:predicate  spl:predicate ;
                              spl:valueType  rdf:Property
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "indicates whether the argument is optional"^^xsd:string ;
                              spl:optional   true ;
                              spl:predicate  spl:optional ;
                              spl:valueType  xsd:boolean
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "the default value for the argument"^^xsd:string ;
                              spl:optional   true ;
                              spl:predicate  spl:defaultValue
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "the value type of the argument"^^xsd:string ;
                              spl:optional   true ;
                              spl:predicate  spl:valueType ;
                              spl:valueType  rdfs:Class
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "a comment describing the argument"^^xsd:string ;
                              spl:optional   true ;
                              spl:predicate  rdfs:comment ;
                              spl:valueType  xsd:string
                            ] ;
        spin:labelTemplate  "Argument {?predicate} : {?valueType}"^^xsd:string .

arg:minCount  a             rdf:Property ;
        rdfs:subPropertyOf  sp:arg .

sp:sha384  a             spin:Function ;
        rdfs:comment     "Returns the SHA384 checksum, as a hex digit string, calculated on the UTF-8 representation of the simple literal or lexical form of the xsd:string. Hex digits SHOULD be in lower case."^^xsd:string ;
        rdfs:label       "sha384"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-sha384> ;
        rdfs:subClassOf  spl:MiscFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input literal."^^xsd:string ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "SHA384"^^xsd:string .

sp:year  a               spin:Function ;
        rdfs:comment     "Extracts the year from a date/time literal."^^xsd:string ;
        rdfs:label       "year"^^xsd:string ;
        rdfs:subClassOf  spl:DateFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The date or dateTime argument."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  xsd:integer ;
        spin:symbol      "year"^^xsd:string .

spl:OntologyFunctions
        a                spin:Function ;
        rdfs:comment     "A collection of functions performing ontology-related operations."^^xsd:string ;
        rdfs:label       "Ontology functions"^^xsd:string ;
        rdfs:subClassOf  spin:Functions ;
        spin:abstract    true .

spl:RangePropertyConstraint
        a                   spl:ConstraintTemplate ;
        rdfs:comment        "Represents a constraint that narrows down a property by a minimum and maximum value compared by <= and >=."^^xsd:string ;
        rdfs:label          "Range property constraint"^^xsd:string ;
        rdfs:subClassOf     spl:PropertyConstraintTemplates ;
        spin:abstract       true ;
        spin:body           [ a             sp:Construct ;
                              sp:templates  ( [ sp:object     spin:ConstraintViolation ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    _:b1
                                              ] [ sp:object     spin:_this ;
                                                  sp:predicate  spin:violationRoot ;
                                                  sp:subject    _:b1
                                                ] [ sp:object     [ sp:varName  "property"^^xsd:string ] ;
                                                    sp:predicate  spin:violationPath ;
                                                    sp:subject    _:b1
                                                  ] [ sp:object     [ sp:varName  "message"^^xsd:string ] ;
                                                      sp:predicate  rdfs:label ;
                                                      sp:subject    _:b1
                                                    ] ) ;
                              sp:where      ( [ sp:object     [ sp:varName  "object"^^xsd:string ] ;
                                                sp:predicate  [ sp:varName  "property"^^xsd:string ] ;
                                                sp:subject    spin:_this
                                              ] [ a              sp:Filter ;
                                                  sp:expression  [ a        sp:or ;
                                                                   sp:arg1  [ a        sp:and ;
                                                                              sp:arg1  [ a        sp:bound ;
                                                                                         sp:arg1  [ sp:varName  "min"^^xsd:string ]
                                                                                       ] ;
                                                                              sp:arg2  [ a        sp:lt ;
                                                                                         sp:arg1  [ sp:varName  "object"^^xsd:string ] ;
                                                                                         sp:arg2  [ sp:varName  "min"^^xsd:string ]
                                                                                       ]
                                                                            ] ;
                                                                   sp:arg2  [ a        sp:and ;
                                                                              sp:arg1  [ a        sp:bound ;
                                                                                         sp:arg1  [ sp:varName  "max"^^xsd:string ]
                                                                                       ] ;
                                                                              sp:arg2  [ a        sp:gt ;
                                                                                         sp:arg1  [ sp:varName  "object"^^xsd:string ] ;
                                                                                         sp:arg2  [ sp:varName  "max"^^xsd:string ]
                                                                                       ]
                                                                            ]
                                                                 ]
                                                ] [ a              sp:Bind ;
                                                    sp:expression  [ a        sp:concat ;
                                                                     sp:arg1  "Value " ;
                                                                     sp:arg2  [ sp:varName  "object"^^xsd:string ] ;
                                                                     sp:arg3  " must be in the interval [" ;
                                                                     sp:arg4  [ sp:varName  "min"^^xsd:string ] ;
                                                                     sp:arg5  ", " ;
                                                                     sp:arg6  [ sp:varName  "max"^^xsd:string ] ;
                                                                     sp:arg7  "]"
                                                                   ] ;
                                                    sp:variable    [ sp:varName  "message"^^xsd:string ]
                                                  ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The maximum value."^^xsd:string ;
                              spl:optional   true ;
                              spl:predicate  arg:max ;
                              spl:valueType  rdfs:Literal
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The minimum value."^^xsd:string ;
                              spl:optional   true ;
                              spl:predicate  arg:min ;
                              spl:valueType  rdfs:Literal
                            ] ;
        spin:labelTemplate  "Values of {?property} must be within the interval [ {?min} , {?max} ]"^^xsd:string .

sp:bnode  a              spin:Function ;
        rdfs:comment     "Constructs a blank node that is distinct from all blank nodes in the dataset being queried and distinct from all blank nodes created by calls to this constructor for other query solutions. If the no argument form is used, every call results in a distinct blank node. If the form with a simple literal is used, every call results in distinct blank nodes for different simple literals, and the same blank node for calls with the same simple literal within expressions for one solution mapping. This functionality is compatible with the treatment of blank nodes in SPARQL CONSTRUCT templates."^^xsd:string ;
        rdfs:label       "bnode"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-bnode> ;
        rdfs:subClassOf  spl:OntologyFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "A literal input node."^^xsd:string ;
                           spl:optional   true ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:symbol      "BNODE"^^xsd:string .

sp:sha1  a               spin:Function ;
        rdfs:comment     "Returns the SHA1 checksum, as a hex digit string, calculated on the UTF-8 representation of the simple literal or lexical form of the xsd:string. Hex digits SHOULD be in lower case."^^xsd:string ;
        rdfs:label       "sha1"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-sha1> ;
        rdfs:subClassOf  spl:MiscFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input literal."^^xsd:string ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "SHA1"^^xsd:string .

sp:or   a                spin:Function ;
        rdfs:comment     "Returns the logical OR between two (boolean) operands." ;
        rdfs:label       "or"^^xsd:string ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the first operand" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:boolean
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the second operand" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:boolean
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "||"^^xsd:string .

sp:gt   a                spin:Function ;
        rdfs:comment     "Returns true if ?arg1 > arg2." ;
        rdfs:label       "gt"^^xsd:string ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the first operand" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the second operand" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      ">"^^xsd:string .

sp:strstarts  a          spin:Function ;
        rdfs:comment     "Returns true if the lexical form of ?arg1 begins with the lexical form of ?arg2, otherwise it returns false."^^xsd:string ;
        rdfs:label       "strstarts"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-starts> ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input string."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The sub-string that the input string is supposed to begin with."^^xsd:string ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "STRSTARTS"^^xsd:string .

spl:ConstraintTemplates
        a                spl:ConstraintTemplate ;
        rdfs:comment     "Abstract superclass of templates that can be used as spin:constraints. The subclasses are expected to construct spin:ConstraintViolations and use ?this to talk about the instances of the associated class."^^xsd:string ;
        rdfs:label       "Constraint templates"^^xsd:string ;
        rdfs:subClassOf  spin:ConstructTemplates ;
        spin:abstract    true .

sp:in   a                spin:Function ;
        rdfs:comment     "Checks whether the value on the left (?arg1) is one of the values on the right (?arg2, ?arg3 ...)."^^xsd:string ;
        rdfs:label       "IN"^^xsd:string ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The value to find."^^xsd:string ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "IN"^^xsd:string .

spl:Test-instanceOf-rdfsClass-false
        a                   spl:TestCase ;
        spl:testExpression  [ a        spl:instanceOf ;
                              sp:arg1  owl:versionInfo ;
                              sp:arg2  rdfs:Class
                            ] ;
        spl:testResult      false .

sp:add  a                spin:Function ;
        rdfs:comment     "Returns the arithmetic sum of its operands." ;
        rdfs:label       "add"^^xsd:string ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the first number" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Resource
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the second number" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdfs:Resource
                         ] ;
        spin:symbol      "+"^^xsd:string .

spl:Attribute  a            spin:ConstructTemplate ;
        rdfs:comment        "Defines an \"attribute\" of a class. Attribute definitions bundle common modeling patterns known from object-oriented languages like UML. Each attribute can have min and max cardinality, a value type and a default value. The attribute links a class with one RDF property. This template should be used as spin:constraints on a class to make sure that classes meet the expected cardinalities and valueType constraints.\nIf a model wants to use spl:defaultValue, then it should instantiate the spl:ConstructDefaultValues as a spin:constructor at some root class, such as rdfs:Resource." ;
        rdfs:label          "Attribute"^^xsd:string ;
        rdfs:subClassOf     spin:ConstructTemplates ;
        spin:body           [ a             sp:Construct ;
                              sp:templates  ( [ sp:object     spin:ConstraintViolation ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    _:b2
                                              ] [ sp:object     spin:_this ;
                                                  sp:predicate  spin:violationRoot ;
                                                  sp:subject    _:b2
                                                ] [ sp:object     [ sp:varName  "predicate"^^xsd:string ] ;
                                                    sp:predicate  spin:violationPath ;
                                                    sp:subject    _:b2
                                                  ] ) ;
                              sp:where      ( [ a            sp:Union ;
                                                sp:elements  ( ( [ a              sp:Filter ;
                                                                   sp:expression  [ a        sp:and ;
                                                                                    sp:arg1  [ a        sp:bound ;
                                                                                               sp:arg1  [ sp:varName  "minCount"^^xsd:string ]
                                                                                             ] ;
                                                                                    sp:arg2  [ a        sp:lt ;
                                                                                               sp:arg1  [ a        spl:objectCount ;
                                                                                                          sp:arg1  spin:_this ;
                                                                                                          sp:arg2  [ sp:varName  "predicate"^^xsd:string ]
                                                                                                        ] ;
                                                                                               sp:arg2  [ sp:varName  "minCount"^^xsd:string ]
                                                                                             ]
                                                                                  ]
                                                                 ] ) ( [ a              sp:Filter ;
                                                                         sp:expression  [ a        sp:and ;
                                                                                          sp:arg1  [ a        sp:bound ;
                                                                                                     sp:arg1  [ sp:varName  "maxCount"^^xsd:string ]
                                                                                                   ] ;
                                                                                          sp:arg2  [ a        sp:gt ;
                                                                                                     sp:arg1  [ a        spl:objectCount ;
                                                                                                                sp:arg1  spin:_this ;
                                                                                                                sp:arg2  [ sp:varName  "predicate"^^xsd:string ]
                                                                                                              ] ;
                                                                                                     sp:arg2  [ sp:varName  "maxCount"^^xsd:string ]
                                                                                                   ]
                                                                                        ]
                                                                       ] ) ( [ a              sp:Filter ;
                                                                               sp:expression  [ a        sp:bound ;
                                                                                                sp:arg1  [ sp:varName  "valueType"^^xsd:string ]
                                                                                              ]
                                                                             ] [ sp:object     [ sp:varName  "value"^^xsd:string ] ;
                                                                                 sp:predicate  [ sp:varName  "predicate"^^xsd:string ] ;
                                                                                 sp:subject    spin:_this
                                                                               ] [ a              sp:Filter ;
                                                                                   sp:expression  [ a        sp:not ;
                                                                                                    sp:arg1  [ a        spl:instanceOf ;
                                                                                                               sp:arg1  [ sp:varName  "value"^^xsd:string ] ;
                                                                                                               sp:arg2  [ sp:varName  "valueType"^^xsd:string ]
                                                                                                             ]
                                                                                                  ]
                                                                                 ] ) )
                                              ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "the minimum number of values permitted for the property" ;
                              spl:optional   true ;
                              spl:predicate  spl:minCount ;
                              spl:valueType  xsd:integer
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "the type that all values of the property must have" ;
                              spl:optional   true ;
                              spl:predicate  spl:valueType ;
                              spl:valueType  rdfs:Class
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "the RDF property holding the attribute value" ;
                              spl:predicate  spl:predicate ;
                              spl:valueType  rdf:Property
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "the maximum number of values permitted for the property" ;
                              spl:optional   true ;
                              spl:predicate  spl:maxCount ;
                              spl:valueType  xsd:integer
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "a comment describing the meaning of this attribute" ;
                              spl:optional   true ;
                              spl:predicate  rdfs:comment ;
                              spl:valueType  xsd:string
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "the default value of the attribute" ;
                              spl:optional   true ;
                              spl:predicate  spl:defaultValue
                            ] ;
        spin:labelTemplate  "Attribute {?predicate} : {?valueType} [{?minCount},{?maxCount}]"^^xsd:string .

spl:PropertyConstraintTemplates
        a                spl:ConstraintTemplate ;
        rdfs:comment     "Abstract superclass of constraint templates that constrain exactly one property."^^xsd:string ;
        rdfs:label       "Property constraint templates"^^xsd:string ;
        rdfs:subClassOf  spl:ConstraintTemplates ;
        spin:abstract    true ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The property being constrained."^^xsd:string ;
                           spl:predicate  arg:property ;
                           spl:valueType  rdf:Property
                         ] .

spl:SPINOverview  a         spin:SelectTemplate ;
        rdfs:comment        "Finds all constraints and rules attached to classes in the current graph, using spin:constraint, spin:constructor, spin:rule or their sub-properties. The result set will contain the associated class, the predicate, and the SPIN rule."^^xsd:string ;
        rdfs:label          "SPIN Overview"^^xsd:string ;
        rdfs:subClassOf     spin:SelectTemplates ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "class"^^xsd:string ] [ sp:varName
                                                "property"^^xsd:string ] [ sp:varName
                                                "rule"^^xsd:string ] ) ;
                              sp:where            ( ( [ a            sp:Union ;
                                                        sp:elements  ( ( [ a              sp:Bind ;
                                                                           sp:expression  spin:constraint ;
                                                                           sp:variable    [ sp:varName  "bp"^^xsd:string ]
                                                                         ] ) ( [ a              sp:Bind ;
                                                                                 sp:expression  spin:constructor ;
                                                                                 sp:variable    [ sp:varName  "bp"^^xsd:string ]
                                                                               ] ) ( [ a              sp:Bind ;
                                                                                       sp:expression  spin:rule ;
                                                                                       sp:variable    [ sp:varName  "bp"^^xsd:string ]
                                                                                     ] ) )
                                                      ] ) [ a           sp:TriplePath ;
                                                            sp:object   [ sp:varName  "bp"^^xsd:string ] ;
                                                            sp:path     [ a           sp:ModPath ;
                                                                          sp:modMax   -2 ;
                                                                          sp:modMin   0 ;
                                                                          sp:subPath  rdfs:subPropertyOf
                                                                        ] ;
                                                            sp:subject  [ sp:varName  "property"^^xsd:string ]
                                                          ] [ sp:object     [ sp:varName  "rule"^^xsd:string ] ;
                                                              sp:predicate  [ sp:varName  "property"^^xsd:string ] ;
                                                              sp:subject    [ sp:varName  "class"^^xsd:string ]
                                                            ] [ a              sp:Filter ;
                                                                sp:expression  [ a        sp:ne ;
                                                                                 sp:arg1  [ sp:varName  "class"^^xsd:string ] ;
                                                                                 sp:arg2  spin:Modules
                                                                               ]
                                                              ] [ a              sp:Filter ;
                                                                  sp:expression  [ a            sp:notExists ;
                                                                                   sp:elements  ( [ sp:object     spl:Argument ;
                                                                                                    sp:predicate  rdf:type ;
                                                                                                    sp:subject    [ sp:varName  "rule"^^xsd:string ]
                                                                                                  ] )
                                                                                 ]
                                                                ] [ a              sp:Filter ;
                                                                    sp:expression  [ a            sp:notExists ;
                                                                                     sp:elements  ( [ sp:object     spl:Attribute ;
                                                                                                      sp:predicate  rdf:type ;
                                                                                                      sp:subject    [ sp:varName  "rule"^^xsd:string ]
                                                                                                    ] )
                                                                                   ]
                                                                  ] )
                            ] ;
        spin:labelTemplate  "SPIN Overview"^^xsd:string .

sp:rand  a               spin:Function ;
        rdfs:comment     "Returns a number between 0 (inclusive) and 1.0e0 (exclusive). Different numbers can be produced every time this function is invoked. Numbers should be produced with approximately equal probability."^^xsd:string ;
        rdfs:label       "rand"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#idp3722352> ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:returnType  xsd:double ;
        spin:symbol      "RAND"^^xsd:string .

spl:RunTestCases  a      spin:SelectTemplate ;
        rdfs:comment     "Runs all spl:TestCases on the current model."^^xsd:string ;
        rdfs:label       "Run test cases"^^xsd:string ;
        rdfs:subClassOf  spin:SelectTemplates ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "testCase"^^xsd:string ] [ sp:varName
                                             "expected"^^xsd:string ] [ sp:varName
                                             "actual"^^xsd:string ] ) ;
                           sp:where            ( [ sp:object     [ sp:varName  "expr"^^xsd:string ] ;
                                                   sp:predicate  spl:testExpression ;
                                                   sp:subject    [ sp:varName  "testCase"^^xsd:string ]
                                                 ] [ a            sp:Optional ;
                                                     sp:elements  ( [ sp:object     [ sp:varName  "expected"^^xsd:string ] ;
                                                                      sp:predicate  spl:testResult ;
                                                                      sp:subject    [ sp:varName  "testCase"^^xsd:string ]
                                                                    ] )
                                                   ] [ a              sp:Bind ;
                                                       sp:expression  [ a        spin:eval ;
                                                                        sp:arg1  [ sp:varName  "expr"^^xsd:string ]
                                                                      ] ;
                                                       sp:variable    [ sp:varName  "actual"^^xsd:string ]
                                                     ] [ a              sp:Filter ;
                                                         sp:expression  [ a        sp:or ;
                                                                          sp:arg1  [ a        sp:ne ;
                                                                                     sp:arg1  [ a        sp:bound ;
                                                                                                sp:arg1  [ sp:varName  "expected"^^xsd:string ]
                                                                                              ] ;
                                                                                     sp:arg2  [ a        sp:bound ;
                                                                                                sp:arg1  [ sp:varName  "actual"^^xsd:string ]
                                                                                              ]
                                                                                   ] ;
                                                                          sp:arg2  [ a        sp:and ;
                                                                                     sp:arg1  [ a        sp:bound ;
                                                                                                sp:arg1  [ sp:varName  "expected"^^xsd:string ]
                                                                                              ] ;
                                                                                     sp:arg2  [ a        sp:ne ;
                                                                                                sp:arg1  [ sp:varName  "actual"^^xsd:string ] ;
                                                                                                sp:arg2  [ sp:varName  "expected"^^xsd:string ]
                                                                                              ]
                                                                                   ]
                                                                        ]
                                                       ] )
                         ] .

spl:instanceOf  a           spin:Function ;
        rdfs:comment        "Checks whether a given resource (?arg1) has a given type (?arg2). In order to fulfill this condition, there must either be a triple ?arg1 rdf:type ?arg2, or ?instance rdf:type ?subClass where ?subClass is a subclass of ?arg2. If the first argument is a literal, then the second argument must be the matching XSD datatype." ;
        rdfs:label          "instanceOf"^^xsd:string ;
        rdfs:subClassOf     spl:BooleanFunctions ;
        spin:body           [ a         sp:Ask ;
                              sp:where  ( [ a            sp:Union ;
                                            sp:elements  ( ( ( [ a              sp:Filter ;
                                                                 sp:expression  [ a        sp:or ;
                                                                                  sp:arg1  [ a        sp:isIRI ;
                                                                                             sp:arg1  spin:_arg1
                                                                                           ] ;
                                                                                  sp:arg2  [ a        sp:isBlank ;
                                                                                             sp:arg1  spin:_arg1
                                                                                           ]
                                                                                ]
                                                               ] ) [ a           sp:TriplePath ;
                                                                     sp:object   spin:_arg2 ;
                                                                     sp:path     [ a           sp:ModPath ;
                                                                                   sp:modMax   -2 ;
                                                                                   sp:modMin   0 ;
                                                                                   sp:subPath  rdfs:subClassOf
                                                                                 ] ;
                                                                     sp:subject  [ sp:varName  "class"^^xsd:string ]
                                                                   ] [ sp:object     [ sp:varName  "class"^^xsd:string ] ;
                                                                       sp:predicate  rdf:type ;
                                                                       sp:subject    spin:_arg1
                                                                     ] ) ( ( [ a              sp:Filter ;
                                                                               sp:expression  [ a        sp:isLiteral ;
                                                                                                sp:arg1  spin:_arg1
                                                                                              ]
                                                                             ] ) [ a              sp:Bind ;
                                                                                   sp:expression  [ a        sp:datatype ;
                                                                                                    sp:arg1  spin:_arg1
                                                                                                  ] ;
                                                                                   sp:variable    [ sp:varName  "datatype"^^xsd:string ]
                                                                                 ] [ a              sp:Filter ;
                                                                                     sp:expression  [ a        sp:or ;
                                                                                                      sp:arg1  [ a        sp:or ;
                                                                                                                 sp:arg1  [ a        sp:eq ;
                                                                                                                            sp:arg1  [ sp:varName  "datatype"^^xsd:string ] ;
                                                                                                                            sp:arg2  spin:_arg2
                                                                                                                          ] ;
                                                                                                                 sp:arg2  [ a        sp:eq ;
                                                                                                                            sp:arg1  spin:_arg2 ;
                                                                                                                            sp:arg2  rdfs:Literal
                                                                                                                          ]
                                                                                                               ] ;
                                                                                                      sp:arg2  [ a        sp:and ;
                                                                                                                 sp:arg1  [ a        sp:or ;
                                                                                                                            sp:arg1  [ a        sp:not ;
                                                                                                                                       sp:arg1  [ a        sp:bound ;
                                                                                                                                                  sp:arg1  [ sp:varName  "datatype"^^xsd:string ]
                                                                                                                                                ]
                                                                                                                                     ] ;
                                                                                                                            sp:arg2  [ a        sp:eq ;
                                                                                                                                       sp:arg1  rdf:langString ;
                                                                                                                                       sp:arg2  [ sp:varName  "datatype"^^xsd:string ]
                                                                                                                                     ]
                                                                                                                          ] ;
                                                                                                                 sp:arg2  [ a        sp:eq ;
                                                                                                                            sp:arg1  spin:_arg2 ;
                                                                                                                            sp:arg2  xsd:string
                                                                                                                          ]
                                                                                                               ]
                                                                                                    ]
                                                                                   ] ) )
                                          ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "the type that the instance must have" ;
                              spl:predicate  sp:arg2 ;
                              spl:valueType  rdfs:Class
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "the instance being tested" ;
                              spl:predicate  sp:arg1 ;
                              spl:valueType  rdfs:Resource
                            ] ;
        spin:labelTemplate  "{?arg1} instance of {?arg2}"^^xsd:string ;
        spin:returnType     xsd:boolean ;
        owl:versionInfo     "Note that in TopBraid this function has been implemented in native Java code, for performance reasons."^^xsd:string .

spl:Test-instanceOf-rdfsClass
        a                   spl:TestCase ;
        spl:testExpression  [ a        spl:instanceOf ;
                              sp:arg1  owl:Thing ;
                              sp:arg2  rdfs:Class
                            ] ;
        spl:testResult      true .

sp:ne   a                spin:Function ;
        rdfs:comment     "Returns true if ?arg1 != ?arg2." ;
        rdfs:label       "ne"^^xsd:string ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the first operand" ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the second operand" ;
                           spl:predicate  sp:arg2
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "!="^^xsd:string .

spl:AllArguments  a         spin:SelectTemplate ;
        rdfs:comment        "Gets a list of all spl:Arguments declared at a given class and its superclasses."^^xsd:string ;
        rdfs:label          "All arguments"^^xsd:string ;
        rdfs:subClassOf     spin:SelectTemplates ;
        spin:body           [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "arg"^^xsd:string ] [ sp:varName
                                                "atClass"^^xsd:string ] ) ;
                              sp:where            ( [ a           sp:TriplePath ;
                                                      sp:object   [ sp:varName  "atClass"^^xsd:string ] ;
                                                      sp:path     [ a           sp:ModPath ;
                                                                    sp:modMax   -2 ;
                                                                    sp:modMin   0 ;
                                                                    sp:subPath  rdfs:subClassOf
                                                                  ] ;
                                                      sp:subject  [ sp:varName  "class"^^xsd:string ]
                                                    ] [ sp:object     [ sp:varName  "arg"^^xsd:string ] ;
                                                        sp:predicate  spin:constraint ;
                                                        sp:subject    [ sp:varName  "atClass"^^xsd:string ]
                                                      ] [ sp:object     spl:Argument ;
                                                          sp:predicate  rdf:type ;
                                                          sp:subject    [ sp:varName  "arg"^^xsd:string ]
                                                        ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The class to get the arguments of."^^xsd:string ;
                              spl:predicate  spl:class ;
                              spl:valueType  rdfs:Class
                            ] ;
        spin:labelTemplate  "All spl:Arguments of {?class}"^^xsd:string .

sp:tz   a                spin:Function ;
        rdfs:comment     "Returns the timezone part of ?arg1 as a simple literal. Returns the empty string if there is no timezone."^^xsd:string ;
        rdfs:label       "tz"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-tz> ;
        rdfs:subClassOf  spl:DateFunctions ;
        spin:symbol      "TZ"^^xsd:string .

sp:not  a                spin:Function ;
        rdfs:comment     "Returns the boolean negation of the argument." ;
        rdfs:label       "not"^^xsd:string ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the operand to negate" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:boolean
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "!"^^xsd:string .

spl:isUntypedLiteral  a  spin:Function ;
        rdfs:comment     "Checks whether a given literal is untyped. This function was introduced because the built-in datatype operand in SPARQL casts untyped literals to xsd:string, making it impossible to check it this way. This function here uses a work-around using sameTerm instead." ;
        rdfs:label       "isUntypedLiteral"^^xsd:string ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:body        [ a         sp:Ask ;
                           sp:where  ( [ a              sp:Filter ;
                                         sp:expression  [ a        sp:and ;
                                                          sp:arg1  [ a        sp:isLiteral ;
                                                                     sp:arg1  spin:_arg1
                                                                   ] ;
                                                          sp:arg2  [ a        sp:not ;
                                                                     sp:arg1  [ a        sp:sameTerm ;
                                                                                sp:arg1  spin:_arg1 ;
                                                                                sp:arg2  [ a        xsd:string ;
                                                                                           sp:arg1  spin:_arg1
                                                                                         ]
                                                                              ]
                                                                   ]
                                                        ]
                                       ] )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The literal to test."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  xsd:boolean .

<http://spinrdf.org/spl>
        a                spin:LibraryOntology , owl:Ontology ;
        rdfs:comment     "A collection of generally useful SPARQL functions (expressed as SPIN functions), and SPIN templates. Also provides a top-level classification of functions, and definitions of the standard SPARQL functions."^^xsd:string ;
        rdfs:label       "SPIN Standard Library"^^xsd:string ;
        owl:imports      <http://spinrdf.org/spin> ;
        owl:versionInfo  "1.3.0"^^xsd:string .

spl:objectSubProp  a     spin:Function ;
        rdfs:comment     "Gets the object of a given subject (?arg1) / predicate (?arg2) combination, also taking the sub-properties of ?arg2 into account. Note that if multiple values are present then the result might be unpredictably random."^^xsd:string ;
        rdfs:label       "object sub prop"^^xsd:string ;
        rdfs:subClassOf  spl:OntologyFunctions ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "object"^^xsd:string ] ) ;
                           sp:where            ( [ a           sp:TriplePath ;
                                                   sp:object   spin:_arg2 ;
                                                   sp:path     [ a           sp:ModPath ;
                                                                 sp:modMax   -2 ;
                                                                 sp:modMin   0 ;
                                                                 sp:subPath  rdfs:subPropertyOf
                                                               ] ;
                                                   sp:subject  [ sp:varName  "property"^^xsd:string ]
                                                 ] [ sp:object     [ sp:varName  "object"^^xsd:string ] ;
                                                     sp:predicate  [ sp:varName  "property"^^xsd:string ] ;
                                                     sp:subject    spin:_arg1
                                                   ] )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The subject to get the object from."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Resource
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The predicate to get the object of (including sub-properties of it)."^^xsd:string ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdf:Property
                         ] .

sp:strlen  a             spin:Function ;
        rdfs:comment     "Computes the length of a given input string."^^xsd:string ;
        rdfs:label       "strlen"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-strlen> ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input string."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:integer ;
        spin:symbol      "STRLEN"^^xsd:string .

spl:NonExistencePropertyPairConstraint
        a                   spl:ConstraintTemplate ;
        rdfs:label          "Non-existence property pair constraint"^^xsd:string ;
        rdfs:subClassOf     spl:PropertyPairConstraintTemplates ;
        spin:body           [ a             sp:Construct ;
                              sp:templates  ( [ sp:object     spin:ConstraintViolation ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    _:b3
                                              ] [ sp:object     spin:_this ;
                                                  sp:predicate  spin:violationRoot ;
                                                  sp:subject    _:b3
                                                ] [ sp:object     [ sp:varName  "property"^^xsd:string ] ;
                                                    sp:predicate  spin:violationPath ;
                                                    sp:subject    _:b3
                                                  ] [ sp:object     [ sp:varName  "message"^^xsd:string ] ;
                                                      sp:predicate  rdfs:label ;
                                                      sp:subject    _:b3
                                                    ] ) ;
                              sp:where      ( [ a              sp:Filter ;
                                                sp:expression  [ a            sp:notExists ;
                                                                 sp:elements  ( [ sp:object     [ sp:varName  "someValue"^^xsd:string ] ;
                                                                                  sp:predicate  [ sp:varName  "otherProperty"^^xsd:string ] ;
                                                                                  sp:subject    spin:_this
                                                                                ] )
                                                               ]
                                              ] [ a              sp:Filter ;
                                                  sp:expression  [ a            sp:exists ;
                                                                   sp:elements  ( [ sp:object     [ sp:varName  "object"^^xsd:string ] ;
                                                                                    sp:predicate  [ sp:varName  "property"^^xsd:string ] ;
                                                                                    sp:subject    spin:_this
                                                                                  ] )
                                                                 ]
                                                ] [ a              sp:Bind ;
                                                    sp:expression  [ a        sp:concat ;
                                                                     sp:arg1  "Property must have no values because " ;
                                                                     sp:arg2  [ sp:varName  "otherProperty"^^xsd:string ] ;
                                                                     sp:arg3  " has none"
                                                                   ] ;
                                                    sp:variable    [ sp:varName  "message"^^xsd:string ]
                                                  ] )
                            ] ;
        spin:labelTemplate  "The property {?property} must have no values as long as {?otherProperty} has none"^^xsd:string .

spl:ConstraintTemplate
        a                rdfs:Class ;
        rdfs:comment     "Metaclass for CONSTRUCT templates that create spin:ConstraintViolations and can be used as values of spin:constraint."^^xsd:string ;
        rdfs:label       "Constraint template"^^xsd:string ;
        rdfs:subClassOf  spin:ConstructTemplate .

sp:isNumeric  a          spin:Function ;
        rdfs:comment     "Returns true if arg1 is a numeric value. Returns false otherwise. term is numeric if it has an appropriate datatype (see the section Operand Data Types) and has a valid lexical form, making it a valid argument to functions and operators taking numeric arguments."^^xsd:string ;
        rdfs:label       "is numeric"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-isNumeric> ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The node to check whether it's numeric.\n"^^xsd:string ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:symbol      "isNumeric"^^xsd:string .

sp:isIRI  a              spin:Function ;
        rdfs:comment     "Checks whether a given node is a IRI node." ;
        rdfs:label       "isIRI"^^xsd:string ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the node being tested" ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "isIRI"^^xsd:string .

spl:hasValueOfType  a    spin:Function ;
        rdfs:comment     "Checks whether a given subject (?arg1) has at least one value of a given type (?arg3) for a given property (?arg2) or one of its sub-properties." ;
        rdfs:label       "hasValueOfType"^^xsd:string ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:body        [ a         sp:Ask ;
                           sp:where  ( [ a           sp:TriplePath ;
                                         sp:object   spin:_arg2 ;
                                         sp:path     [ a           sp:ModPath ;
                                                       sp:modMax   -2 ;
                                                       sp:modMin   0 ;
                                                       sp:subPath  rdfs:subPropertyOf
                                                     ] ;
                                         sp:subject  [ sp:varName  "p"^^xsd:string ]
                                       ] [ sp:object     [ sp:varName  "value"^^xsd:string ] ;
                                           sp:predicate  [ sp:varName  "p"^^xsd:string ] ;
                                           sp:subject    spin:_arg1
                                         ] [ a              sp:Filter ;
                                             sp:expression  [ a        spl:instanceOf ;
                                                              sp:arg1  [ sp:varName  "value"^^xsd:string ] ;
                                                              sp:arg2  spin:_arg3
                                                            ]
                                           ] )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the subject that is expected to have the value"^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Resource
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the expected property"^^xsd:string ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdf:Property
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the type to match against"^^xsd:string ;
                           spl:predicate  sp:arg3 ;
                           spl:valueType  rdfs:Class
                         ] ;
        spin:returnType  xsd:boolean .

sp:ge   a                spin:Function ;
        rdfs:comment     "Returns true if ?arg1 >= ?arg2." ;
        rdfs:label       "ge"^^xsd:string ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the first operand" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the second operand" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      ">="^^xsd:string .

arg:min  a                  rdf:Property ;
        rdfs:subPropertyOf  sp:arg .

sp:unaryMinus  a         spin:Function ;
        rdfs:comment     "Returns the operand ?arg1 with the sign reversed. If ?arg1 is positive, its negative is returned; if it is negative, its positive is returned." ;
        rdfs:label       "unary minus"^^xsd:string ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the operand" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:symbol      "-"^^xsd:string .

sp:strends  a            spin:Function ;
        rdfs:comment     "Returns true if the lexical form of ?arg1 ends with the lexical form of ?arg2, otherwise it returns false."^^xsd:string ;
        rdfs:label       "strends"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-ends> ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input string."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The sub-string that the input string is supposed to end with."^^xsd:string ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "STRENDS"^^xsd:string .

sp:strdt  a              spin:Function ;
        rdfs:comment     "Constructs a literal with lexical form and type as specified by the arguments."^^xsd:string ;
        rdfs:label       "strdt"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-strdt> ;
        rdfs:subClassOf  spl:OntologyFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The lexical form of the new literal."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The datatype of the new literal."^^xsd:string ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdfs:Datatype
                         ] ;
        spin:symbol      "STRDT"^^xsd:string .

sp:strafter  a           spin:Function ;
        rdfs:comment     "Returns a literal of the same kind (simple literal, plain literal same language tag, xsd:string) as the first argument arg1. The lexical form of the result is the substring of the value of arg1 that proceeds in arg1 the first occurrence of the lexical form of arg2; otherwise the lexical form of the result is the empty string. If the lexical form of arg2 is the empty string, the lexical form of the result is the emprty string."^^xsd:string ;
        rdfs:label       "strafter"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-strafter> ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input string."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The pattern to find within the input string."^^xsd:string ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "STRAFTER"^^xsd:string .

arg:otherProperty  a        rdf:Property ;
        rdfs:subPropertyOf  sp:arg .

sp:encode_for_uri  a     spin:Function ;
        rdfs:label       "encode_for_uri"^^xsd:string ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The string to convert."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "ENCODE_FOR_URI"^^xsd:string .

sp:unaryPlus  a          spin:Function ;
        rdfs:comment     "Returns the operand ?arg1 with the sign unchanged. Semantically, this operation performs no operation." ;
        rdfs:label       "unary plus"^^xsd:string ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the operand" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:symbol      "+"^^xsd:string .

sp:bound  a              spin:Function ;
        rdfs:comment     "Returns true if ?arg1 is bound to a value. Returns false otherwise. Variables with the value NaN or INF are considered bound." ;
        rdfs:label       "bound"^^xsd:string ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the variable or expression that is checked" ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "bound"^^xsd:string .

arg:property  a             rdf:Property ;
        rdfs:subPropertyOf  sp:arg .

spl:Test-instanceOf-untypedString
        a                   spl:TestCase ;
        spl:testExpression  [ a        spl:instanceOf ;
                              sp:arg1  "test" ;
                              sp:arg2  xsd:string
                            ] ;
        spl:testResult      true .

spl:StringFunctions  a   spin:Function ;
        rdfs:comment     "A collection of functions that return strings."^^xsd:string ;
        rdfs:label       "String functions"^^xsd:string ;
        rdfs:subClassOf  spin:Functions ;
        spin:abstract    true .

spl:subject  a           spin:Function ;
        rdfs:comment     "Gets the \"first\" subject of a given predicate (?arg1)/object (?arg2) combination. Note that if multiple values are present then the result might be unpredictably random."^^xsd:string ;
        rdfs:label       "subject"^^xsd:string ;
        rdfs:subClassOf  spl:OntologyFunctions ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "subject"^^xsd:string ] ) ;
                           sp:where            ( [ sp:object     spin:_arg2 ;
                                                   sp:predicate  spin:_arg1 ;
                                                   sp:subject    [ sp:varName  "subject"^^xsd:string ]
                                                 ] )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The predicate."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdf:Property
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The object."^^xsd:string ;
                           spl:predicate  sp:arg2
                         ] .

spl:DateFunctions  a     spin:Function ;
        rdfs:comment     "A collection of functions that operate on date/time literals."^^xsd:string ;
        rdfs:label       "Date functions"^^xsd:string ;
        rdfs:subClassOf  spin:Functions ;
        spin:abstract    true .

sp:divide  a             spin:Function ;
        rdfs:comment     "Returns the arithmetic quotient of its operands." ;
        rdfs:label       "divide"^^xsd:string ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the first operand" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the second operand" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  rdfs:Literal ;
        spin:symbol      "/"^^xsd:string .

sp:exists  a             spin:Function ;
        rdfs:comment     "The filter function EXISTS. The graph pattern is stored in sp:elements."^^xsd:string ;
        rdfs:label       "EXISTS"^^xsd:string ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "EXISTS"^^xsd:string .

sp:seconds  a            spin:Function ;
        rdfs:comment     "Extracts the seconds from a date/time literal."^^xsd:string ;
        rdfs:label       "seconds"^^xsd:string ;
        rdfs:subClassOf  spl:DateFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The dateTime or time argument."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  xsd:integer ;
        spin:symbol      "seconds"^^xsd:string .

sp:round  a              spin:Function ;
        rdfs:comment     "Returns the number with no fractional part that is closest to the argument. If there are two such numbers, then the one that is closest to positive infinity is returned. An error is raised if ?arg1 is not a numeric value."^^xsd:string ;
        rdfs:label       "round"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-round> ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The number to round."^^xsd:string ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:symbol      "round"^^xsd:string .

sp:iri  a                spin:Function ;
        rdfs:comment     "Creates a IRI resource (node) from a given IRI string (?arg1)."^^xsd:string ;
        rdfs:label       "IRI"^^xsd:string ;
        rdfs:subClassOf  spl:OntologyFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The IRI string to convert to a resource."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  rdfs:Resource ;
        spin:symbol      "IRI"^^xsd:string .

sp:concat  a             spin:Function ;
        rdfs:comment     "The CONCAT built-in function. Creates a single string by concatenating all arguments from left to right. Note that if any one of the arguments is unbound (null) then the whole result string will be unbound."^^xsd:string ;
        rdfs:label       "concat"^^xsd:string ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:returnType  xsd:string ;
        spin:symbol      "CONCAT"^^xsd:string .

sp:notExists  a          spin:Function ;
        rdfs:comment     "The filter function NOT EXISTS. The graph pattern is stored in sp:elements."^^xsd:string ;
        rdfs:label       "NOT EXISTS"^^xsd:string ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "NOT EXISTS"^^xsd:string .

sp:if   a                spin:Function ;
        rdfs:comment     "The SPARQL 1.1 built-in function IF."^^xsd:string ;
        rdfs:label       "IF"^^xsd:string ;
        rdfs:subClassOf  spl:MiscFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "A condition to evaluate - if true then the ?arg2 will be returned, otherwise ?arg3."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:boolean
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The function result if ?arg1 is true."^^xsd:string ;
                           spl:predicate  sp:arg2
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The function result if ?arg1 is false."^^xsd:string ;
                           spl:predicate  sp:arg3
                         ] ;
        spin:symbol      "IF"^^xsd:string .

sp:sub  a                spin:Function ;
        rdfs:comment     "Returns the arithmetic difference of its operands." ;
        rdfs:label       "sub"^^xsd:string ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the first operand" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the second operand" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:symbol      "-"^^xsd:string .

sp:langMatches  a        spin:Function ;
        rdfs:comment     "Returns true if language-tag (first argument) matches language-range (second argument) per the basic filtering scheme defined in [RFC4647] section 3.3.1." ;
        rdfs:label       "langMatches"^^xsd:string ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the literal that is expected to have ?arg2 as language tag" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the language tag that ?arg1 must have" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "langMatches"^^xsd:string .

sp:timezone  a           spin:Function ;
        rdfs:comment     "Returns the timezone part of ?arg1 as an xsd:dayTimeDuration. Raises an error if there is no timezone."^^xsd:string ;
        rdfs:label       "timezone"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-timezone> ;
        rdfs:subClassOf  spl:DateFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input time."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:dateTime
                         ] ;
        spin:returnType  xsd:duration ;
        spin:symbol      "TIMEZONE"^^xsd:string .

spl:Test-instanceOf-rdfsLiteral-false
        a                   spl:TestCase ;
        spl:testExpression  [ a        spl:instanceOf ;
                              sp:arg1  owl:Thing ;
                              sp:arg2  rdfs:Literal
                            ] ;
        spl:testResult      false .

sp:isLiteral  a          spin:Function ;
        rdfs:comment     "Checks whether a given node is a literal." ;
        rdfs:label       "isLiteral"^^xsd:string ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the node being tested" ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "isLiteral"^^xsd:string .

sp:abs  a                spin:Function ;
        rdfs:comment     "Returns the absolute value of arg. An error is raised if arg is not a numeric value."^^xsd:string ;
        rdfs:label       "abs"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-abs> ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input value."^^xsd:string ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:symbol      "abs"^^xsd:string .

sp:ceil  a               spin:Function ;
        rdfs:comment     "Returns the smallest (closest to negative infinity) number with no fractional part that is not less than the value of arg. An error is raised if ?arg1 is not a numeric value."^^xsd:string ;
        rdfs:label       "ceil"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-ceil> ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The number to get the ceiling of."^^xsd:string ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:symbol      "ceil"^^xsd:string .

sp:lt   a                spin:Function ;
        rdfs:comment     "Returns true if ?arg1 < ?arg2." ;
        rdfs:label       "lt"^^xsd:string ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the first operand" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the second operand" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "<"^^xsd:string .

sp:isURI  a              spin:Function ;
        rdfs:comment     "Checks whether a node is a URI." ;
        rdfs:label       "isURI"^^xsd:string ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the node to check" ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "isURI"^^xsd:string .

spl:URIFunctions  a      spin:Function ;
        rdfs:comment     "A collection of functions that create URI resources."^^xsd:string ;
        rdfs:label       "URI functions"^^xsd:string ;
        rdfs:subClassOf  spin:Functions ;
        spin:abstract    true .

sp:sameTerm  a           spin:Function ;
        rdfs:comment     "Returns TRUE if ?arg1 and ?arg2 are the same RDF term as defined in Resource Description Framework (RDF): Concepts and Abstract Syntax; returns FALSE otherwise."^^xsd:string ;
        rdfs:label       "same term"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-sameTerm> ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the first argument" ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the second argument" ;
                           spl:predicate  sp:arg2
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "sameTerm"^^xsd:string .

spl:TestCase  a          rdfs:Class ;
        rdfs:comment     "A test to verify that a SPIN function or magic property works as expected, and to generate documentation of example uses of the function. Each TestCase consists of a SPARQL function call or an expression that can be executed with spin:eval, and an expected result. The test framework only needs to execute spin:eval on the expression and compare it with the expected result."^^xsd:string ;
        rdfs:label       "Test case"^^xsd:string ;
        rdfs:subClassOf  rdfs:Resource ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The expected result of the test case, or nothing to indicate that an error is expected."^^xsd:string ;
                           spl:optional   true ;
                           spl:predicate  spl:testResult
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The test expression or SELECT query (anything that can be evaluated with spin:eval)."^^xsd:string ;
                           spl:predicate  spl:testExpression
                         ] .

sp:ucase  a              spin:Function ;
        rdfs:comment     "Converts a string to upper case characters."^^xsd:string ;
        rdfs:label       "UCASE"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-ucase> ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input string."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "UCASE"^^xsd:string .

sp:substr  a             spin:Function ;
        rdfs:comment     "Gets the sub-string of a given string. The index of the first character is 1."^^xsd:string ;
        rdfs:label       "substr"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-substr> ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The end index."^^xsd:string ;
                           spl:optional   true ;
                           spl:predicate  sp:arg3 ;
                           spl:valueType  xsd:integer
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input string."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The start index."^^xsd:string ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:integer
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "SUBSTR"^^xsd:string .

spl:ObjectCountPropertyConstraint
        a                   spl:ConstraintTemplate ;
        rdfs:comment        "Represents a constraint that can be attached to a class to specify that a given property must have between min and max values."^^xsd:string ;
        rdfs:label          "Object count property constraint"^^xsd:string ;
        rdfs:subClassOf     spl:CountPropertyConstraintTemplates ;
        spin:body           [ a             sp:Construct ;
                              sp:templates  ( [ sp:object     spin:ConstraintViolation ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    _:b4
                                              ] [ sp:object     spin:_this ;
                                                  sp:predicate  spin:violationRoot ;
                                                  sp:subject    _:b4
                                                ] [ sp:object     [ sp:varName  "property"^^xsd:string ] ;
                                                    sp:predicate  spin:violationPath ;
                                                    sp:subject    _:b4
                                                  ] [ sp:object     [ sp:varName  "message"^^xsd:string ] ;
                                                      sp:predicate  rdfs:label ;
                                                      sp:subject    _:b4
                                                    ] ) ;
                              sp:where      ( [ a              sp:Bind ;
                                                sp:expression  [ a        spl:objectCount ;
                                                                 sp:arg1  spin:_this ;
                                                                 sp:arg2  [ sp:varName  "property"^^xsd:string ]
                                                               ] ;
                                                sp:variable    [ sp:varName  "objectCount"^^xsd:string ]
                                              ] [ a              sp:Filter ;
                                                  sp:expression  [ a        sp:or ;
                                                                   sp:arg1  [ a        sp:and ;
                                                                              sp:arg1  [ a        sp:bound ;
                                                                                         sp:arg1  [ sp:varName  "minCount"^^xsd:string ]
                                                                                       ] ;
                                                                              sp:arg2  [ a        sp:lt ;
                                                                                         sp:arg1  [ sp:varName  "objectCount"^^xsd:string ] ;
                                                                                         sp:arg2  [ sp:varName  "minCount"^^xsd:string ]
                                                                                       ]
                                                                            ] ;
                                                                   sp:arg2  [ a        sp:and ;
                                                                              sp:arg1  [ a        sp:bound ;
                                                                                         sp:arg1  [ sp:varName  "maxCount"^^xsd:string ]
                                                                                       ] ;
                                                                              sp:arg2  [ a        sp:gt ;
                                                                                         sp:arg1  [ sp:varName  "objectCount"^^xsd:string ] ;
                                                                                         sp:arg2  [ sp:varName  "maxCount"^^xsd:string ]
                                                                                       ]
                                                                            ]
                                                                 ]
                                                ] [ a              sp:Bind ;
                                                    sp:expression  [ a        sp:concat ;
                                                                     sp:arg1  "Invalid number of values: " ;
                                                                     sp:arg2  [ sp:varName  "objectCount"^^xsd:string ]
                                                                   ] ;
                                                    sp:variable    [ sp:varName  "message"^^xsd:string ]
                                                  ] )
                            ] ;
        spin:labelTemplate  "The property {?property} must have between {?minCount} and {?maxCount} values"^^xsd:string .

spl:Test-instanceOf-lingualString
        a                   spl:TestCase ;
        spl:testExpression  [ a        spl:instanceOf ;
                              sp:arg1  "test"@en ;
                              sp:arg2  xsd:string
                            ] ;
        spl:testResult      true .

spl:instance  a             rdf:Property ;
        rdfs:domain         sp:ModuleCall ;
        rdfs:label          "instance"^^xsd:string ;
        rdfs:subPropertyOf  sp:arg .

spl:CountPropertyConstraintTemplates
        a                spl:ConstraintTemplate ;
        rdfs:comment     "Abstract superclass of property constraints that compare the number of values with either min or max count."^^xsd:string ;
        rdfs:label       "Count property constraint templates"^^xsd:string ;
        rdfs:subClassOf  spl:PropertyConstraintTemplates ;
        spin:abstract    true ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The maximum number of values that the property must have."^^xsd:string ;
                           spl:optional   true ;
                           spl:predicate  arg:maxCount ;
                           spl:valueType  xsd:integer
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The minimum number of values that the property must have."^^xsd:string ;
                           spl:optional   true ;
                           spl:predicate  arg:minCount ;
                           spl:valueType  xsd:integer
                         ] .

sp:strbefore  a          spin:Function ;
        rdfs:comment     "Returns a literal of the same kind (simple literal, plain literal same language tag, xsd:string) as the first argument arg1. The lexical form of the result is the substring of the value of arg1 that precedes in arg1 the first occurrence of the lexical form of arg2; otherwise the lexical form of the result is the empty string. If the lexical form of arg2 is the empty string, the lexical form of the result is the emprty string."^^xsd:string ;
        rdfs:label       "strbefore"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-strbefore> ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input string."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The pattern to find within the input string."^^xsd:string ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "STRBEFORE"^^xsd:string .

sp:str  a                spin:Function ;
        rdfs:comment     "Returns the lexical form of ?arg1 (a literal); returns the codepoint representation of ?arg1 (an IRI). This is useful for examining parts of an IRI, for instance, the host-name." ;
        rdfs:label       "str"^^xsd:string ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the node to convert to string" ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "str"^^xsd:string .

spl:hasValue  a          spin:Function ;
        rdfs:comment     "Checks whether a given resource (?arg1) has a given value (?arg3) for a given property (?arg2) or one of the sub-properties of it." ;
        rdfs:label       "hasValue"^^xsd:string ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:body        [ a         sp:Ask ;
                           sp:where  ( [ a           sp:TriplePath ;
                                         sp:object   spin:_arg2 ;
                                         sp:path     [ a           sp:ModPath ;
                                                       sp:modMax   -2 ;
                                                       sp:modMin   0 ;
                                                       sp:subPath  rdfs:subPropertyOf
                                                     ] ;
                                         sp:subject  [ sp:varName  "p"^^xsd:string ]
                                       ] [ sp:object     spin:_arg3 ;
                                           sp:predicate  [ sp:varName  "p"^^xsd:string ] ;
                                           sp:subject    spin:_arg1
                                         ] )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the subject that is expected to have the value"^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Resource
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the property that is expected to hold the value"^^xsd:string ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdf:Property
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the expected value"^^xsd:string ;
                           spl:predicate  sp:arg3
                         ] ;
        spin:returnType  xsd:boolean .

spl:maxCount  a             rdf:Property ;
        rdfs:subPropertyOf  spl:count .

spl:Test-instanceOf-typedString
        a                   spl:TestCase ;
        spl:testExpression  [ a        spl:instanceOf ;
                              sp:arg1  "test"^^xsd:string ;
                              sp:arg2  xsd:string
                            ] ;
        spl:testResult      true .

spl:testResult  a           rdf:Property ;
        rdfs:label          "testResult"^^xsd:string ;
        rdfs:subPropertyOf  sp:arg .

spl:BooleanFunctions  a  spin:Function ;
        rdfs:comment     "A collection of functions that return a boolean value (true or false)."^^xsd:string ;
        rdfs:label       "Boolean functions"^^xsd:string ;
        rdfs:subClassOf  spin:Functions ;
        spin:abstract    true .

sp:uri  a                spin:Function ;
        rdfs:comment     "Equivalent to IRI."^^xsd:string ;
        rdfs:label       "URI"^^xsd:string ;
        rdfs:subClassOf  spl:OntologyFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The IRI string to convert to a resource."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  rdfs:Resource ;
        spin:symbol      "URI"^^xsd:string .

sp:minutes  a            spin:Function ;
        rdfs:comment     "Extracts the minutes from a date/time literal."^^xsd:string ;
        rdfs:label       "minutes"^^xsd:string ;
        rdfs:subClassOf  spl:DateFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The dateTime or time argument."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  xsd:integer ;
        spin:symbol      "minutes"^^xsd:string .

spl:ExistencePropertyPairConstraint
        a                   spl:ConstraintTemplate ;
        rdfs:label          "Existence property pair constraint"^^xsd:string ;
        rdfs:subClassOf     spl:PropertyPairConstraintTemplates ;
        spin:body           [ a             sp:Construct ;
                              sp:templates  ( [ sp:object     spin:ConstraintViolation ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    _:b5
                                              ] [ sp:object     spin:_this ;
                                                  sp:predicate  spin:violationRoot ;
                                                  sp:subject    _:b5
                                                ] [ sp:object     [ sp:varName  "property"^^xsd:string ] ;
                                                    sp:predicate  spin:violationPath ;
                                                    sp:subject    _:b5
                                                  ] [ sp:object     [ sp:varName  "message"^^xsd:string ] ;
                                                      sp:predicate  rdfs:label ;
                                                      sp:subject    _:b5
                                                    ] ) ;
                              sp:where      ( [ a              sp:Filter ;
                                                sp:expression  [ a            sp:exists ;
                                                                 sp:elements  ( [ sp:object     [ sp:varName  "someValue"^^xsd:string ] ;
                                                                                  sp:predicate  [ sp:varName  "otherProperty"^^xsd:string ] ;
                                                                                  sp:subject    spin:_this
                                                                                ] )
                                                               ]
                                              ] [ a              sp:Filter ;
                                                  sp:expression  [ a            sp:notExists ;
                                                                   sp:elements  ( [ sp:object     [ sp:varName  "object"^^xsd:string ] ;
                                                                                    sp:predicate  [ sp:varName  "property"^^xsd:string ] ;
                                                                                    sp:subject    spin:_this
                                                                                  ] )
                                                                 ]
                                                ] [ a              sp:Bind ;
                                                    sp:expression  [ a        sp:concat ;
                                                                     sp:arg1  "Property must have a value because " ;
                                                                     sp:arg2  [ sp:varName  "otherProperty"^^xsd:string ] ;
                                                                     sp:arg3  " has"
                                                                   ] ;
                                                    sp:variable    [ sp:varName  "message"^^xsd:string ]
                                                  ] )
                            ] ;
        spin:labelTemplate  "The property {?property} must have a value whenever {?otherProperty} has a value"^^xsd:string .

sp:replace  a            spin:Function ;
        rdfs:comment     "Replaces each non-overlapping occurrence of a regular expression pattern with a replacement string. Regular expession matching may involve modifier flags."^^xsd:string ;
        rdfs:label       "replace"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-replace> ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The pattern to replace.\n"^^xsd:string ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input string."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "Additional flags for the replacement."^^xsd:string ;
                           spl:optional   true ;
                           spl:predicate  sp:arg4 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The replacement string."^^xsd:string ;
                           spl:predicate  sp:arg3 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "REPLACE"^^xsd:string .

spl:class  a                rdf:Property ;
        rdfs:label          "class"^^xsd:string ;
        rdfs:subPropertyOf  sp:arg .

sp:floor  a              spin:Function ;
        rdfs:comment     "Returns the largest (closest to positive infinity) number with no fractional part that is not greater than the value of ?arg1. An error is raised if ?arg1 is not a numeric value."^^xsd:string ;
        rdfs:label       "floor"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-floor> ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The value to get the floor of."^^xsd:string ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:symbol      "floor"^^xsd:string .

sp:le   a                spin:Function ;
        rdfs:comment     "Returns true if ?arg1 <= ?arg2." ;
        rdfs:label       "le"^^xsd:string ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the first operand" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the second operand" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "<="^^xsd:string .

spl:Test-instanceOf-rdfsLiteral
        a                   spl:TestCase ;
        spl:testExpression  [ a        spl:instanceOf ;
                              sp:arg1  "test"^^xsd:string ;
                              sp:arg2  rdfs:Literal
                            ] ;
        spl:testResult      true .

sp:md5  a                spin:Function ;
        rdfs:comment     "Returns the MD5 checksum, as a hex digit string, calculated on the UTF-8 representation of the simple literal or lexical form of the xsd:string. Hex digits SHOULD be in lower case."^^xsd:string ;
        rdfs:label       "md5"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-md5> ;
        rdfs:subClassOf  spl:MiscFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input literal."^^xsd:string ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "MD5"^^xsd:string .

spl:subjectCount  a      spin:Function ;
        rdfs:comment     "Gets the number of values of a given property (?arg1) at a given object (?arg2). The result is the number of matches of (?subject, ?arg1, ?arg2)."^^xsd:string ;
        rdfs:label       "subjectCount"^^xsd:string ;
        rdfs:subClassOf  spl:OntologyFunctions ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:expression  [ a              sp:Count ;
                                                                    sp:expression  [ sp:varName  "subject"^^xsd:string ]
                                                                  ] ;
                                                   sp:varName     "result"^^xsd:string
                                                 ] ) ;
                           sp:where            ( [ sp:object     spin:_arg2 ;
                                                   sp:predicate  spin:_arg1 ;
                                                   sp:subject    [ sp:varName  "subject"^^xsd:string ]
                                                 ] )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the predicate to get the number of subjects of"^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdf:Property
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the object to get the number of subjects of"^^xsd:string ;
                           spl:predicate  sp:arg2
                         ] ;
        spin:returnType  xsd:integer .

arg:maxCount  a             rdf:Property ;
        rdfs:subPropertyOf  sp:arg .

spin:eval  a             spin:Function ;
        rdfs:comment     "Evaluates a given SPIN expression or SELECT or ASK query, and returns its result. The first argument must be the expression in SPIN RDF syntax. All other arguments must come in pairs: first a property name, and then a value. These name/value pairs will be pre-bound variables for the execution of the expression."^^xsd:string ;
        rdfs:label       "eval"^^xsd:string ;
        rdfs:subClassOf  spin:Functions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The expression to evaluate. Should be a sp:Select, sp:Ask, a sp:Variable or an instance of a SPARQL function class, but may also be a simple RDF value."^^xsd:string ;
                           spl:predicate  sp:arg1
                         ] .

sp:mul  a                spin:Function ;
        rdfs:comment     "Returns the arithmetic product of its operands." ;
        rdfs:label       "mul"^^xsd:string ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the first operand" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the second operand" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:symbol      "*"^^xsd:string .

sp:regex  a              spin:Function ;
        rdfs:comment     "Returns true if a string (?arg1) matches the regular expression supplied as a pattern (?arg2) as influenced by the value of flags (?arg3), otherwise returns false." ;
        rdfs:label       "regex"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-regex> ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the match pattern" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the input string" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the flags" ;
                           spl:optional   true ;
                           spl:predicate  sp:arg3 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "regex"^^xsd:string .

spl:UntypedObjectPropertyConstraint
        a                   spl:ConstraintTemplate ;
        rdfs:comment        "A generic SPIN template that can be used to declare a constraint that all values of a given property must have an rdf:type."^^xsd:string ;
        rdfs:label          "Untyped object property constraint"^^xsd:string ;
        rdfs:subClassOf     spl:PropertyConstraintTemplates ;
        spin:body           [ a             sp:Construct ;
                              sp:templates  ( [ sp:object     spin:ConstraintViolation ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    _:b6
                                              ] [ sp:object     spin:_this ;
                                                  sp:predicate  spin:violationRoot ;
                                                  sp:subject    _:b6
                                                ] [ sp:object     [ sp:varName  "property"^^xsd:string ] ;
                                                    sp:predicate  spin:violationPath ;
                                                    sp:subject    _:b6
                                                  ] [ sp:object     [ sp:varName  "message"^^xsd:string ] ;
                                                      sp:predicate  rdfs:label ;
                                                      sp:subject    _:b6
                                                    ] ) ;
                              sp:where      ( [ sp:object     [ sp:varName  "object"^^xsd:string ] ;
                                                sp:predicate  [ sp:varName  "property"^^xsd:string ] ;
                                                sp:subject    spin:_this
                                              ] [ a              sp:Filter ;
                                                  sp:expression  [ a            sp:notExists ;
                                                                   sp:elements  ( [ sp:object     [ sp:varName  "anyType"^^xsd:string ] ;
                                                                                    sp:predicate  rdf:type ;
                                                                                    sp:subject    [ sp:varName  "object"^^xsd:string ]
                                                                                  ] )
                                                                 ]
                                                ] [ a              sp:Bind ;
                                                    sp:expression  [ a        sp:concat ;
                                                                     sp:arg1  "Value " ;
                                                                     sp:arg2  [ sp:varName  "object"^^xsd:string ] ;
                                                                     sp:arg3  " must have a type"
                                                                   ] ;
                                                    sp:variable    [ sp:varName  "message"^^xsd:string ]
                                                  ] )
                            ] ;
        spin:labelTemplate  "Values of {?property} must have a type"^^xsd:string .

spl:Test-instanceOf-typedString-false
        a                   spl:TestCase ;
        spl:testExpression  [ a        spl:instanceOf ;
                              sp:arg1  "test"^^xsd:string ;
                              sp:arg2  xsd:integer
                            ] ;
        spl:testResult      false .

sp:lcase  a              spin:Function ;
        rdfs:comment     "Converts a string to lower case characters."^^xsd:string ;
        rdfs:label       "LCASE"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-lcase> ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input string."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "LCASE"^^xsd:string .

spl:hasArgument  a       spin:Function ;
        rdfs:comment     "Checks if a given module class (?module) has at least one declared spl:Argument."^^xsd:string ;
        rdfs:label       "has argument"^^xsd:string ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:body        [ a         sp:Ask ;
                           sp:where  ( [ a           sp:TriplePath ;
                                         sp:object   [ sp:varName  "superClass"^^xsd:string ] ;
                                         sp:path     [ a           sp:ModPath ;
                                                       sp:modMax   -2 ;
                                                       sp:modMin   0 ;
                                                       sp:subPath  rdfs:subClassOf
                                                     ] ;
                                         sp:subject  [ sp:varName  "class"^^xsd:string ]
                                       ] [ sp:object     [ sp:varName  "con"^^xsd:string ] ;
                                           sp:predicate  spin:constraint ;
                                           sp:subject    [ sp:varName  "superClass"^^xsd:string ]
                                         ] [ sp:object     spl:Argument ;
                                             sp:predicate  rdf:type ;
                                             sp:subject    [ sp:varName  "con"^^xsd:string ]
                                           ] )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The module class to check."^^xsd:string ;
                           spl:predicate  spl:class ;
                           spl:valueType  spin:Module
                         ] ;
        spin:returnType  xsd:boolean .

sp:coalesce  a           spin:Function ;
        rdfs:comment     "Takes any number of arguments, and returns the first bound argument, starting at the left."^^xsd:string ;
        rdfs:label       "COALESCE"^^xsd:string ;
        rdfs:subClassOf  spl:MiscFunctions ;
        spin:symbol      "COALESCE"^^xsd:string .

sp:struuid  a            spin:Function ;
        rdfs:comment     "Returns a string that is the scheme specific part of UUID. That is, as a simple literal, the result of generating a UUID, converting to a simple literal and removing the initial urn:uuid:."^^xsd:string ;
        rdfs:label       "struuid"^^xsd:string ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:returnType  xsd:string ;
        spin:symbol      "STRUUID"^^xsd:string .

spl:MiscFunctions  a     spin:Function ;
        rdfs:comment     "A collection of functions that are difficult to categorize."^^xsd:string ;
        rdfs:label       "Misc functions"^^xsd:string ;
        rdfs:subClassOf  spin:Functions ;
        spin:abstract    true .

sp:strlang  a            spin:Function ;
        rdfs:comment     "Takes a string (?arg1) and a language (?arg2) and constructs a literal with a corresponding language tag."^^xsd:string ;
        rdfs:label       "strlang"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-strlang> ;
        rdfs:subClassOf  spl:StringFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The string value."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The language tag, e.g. \"en-AU\"."^^xsd:string ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:string
                         ] ;
        spin:returnType  rdf:PlainLiteral ;
        spin:symbol      "STRLANG"^^xsd:string .

spl:max  a               spin:Function ;
        rdfs:comment     "Takes two arguments and returns the larger one of them."^^xsd:string ;
        rdfs:label       "max"^^xsd:string ;
        rdfs:subClassOf  spl:MathematicalFunctions ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "result"^^xsd:string ] ) ;
                           sp:where            ( [ a              sp:Bind ;
                                                   sp:expression  [ a        sp:if ;
                                                                    sp:arg1  [ a        sp:gt ;
                                                                               sp:arg1  spin:_arg1 ;
                                                                               sp:arg2  spin:_arg2
                                                                             ] ;
                                                                    sp:arg2  spin:_arg1 ;
                                                                    sp:arg3  spin:_arg2
                                                                  ] ;
                                                   sp:variable    [ sp:varName  "result"^^xsd:string ]
                                                 ] )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The first argument."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The second argument."^^xsd:string ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  rdfs:Literal .

spl:Test-instanceOf-rdfsClassInheritance
        a                   spl:TestCase ;
        spl:testExpression  [ a        spl:instanceOf ;
                              sp:arg1  owl:Restriction ;
                              sp:arg2  rdfs:Class
                            ] ;
        spl:testResult      true .

spl:Test-object-labelOfArgument
        a                   spl:TestCase ;
        spl:testExpression  [ a                   sp:Select ;
                              sp:resultVariables  ( [ sp:varName  "value"^^xsd:string ] ) ;
                              sp:where            ( [ a                 sp:NamedGraph ;
                                                      sp:elements       ( [ a              sp:Bind ;
                                                                            sp:expression  [ a        spl:object ;
                                                                                             sp:arg1  spl:Argument ;
                                                                                             sp:arg2  rdfs:label
                                                                                           ] ;
                                                                            sp:variable    [ sp:varName  "value"^^xsd:string ]
                                                                          ] ) ;
                                                      sp:graphNameNode  <http://spinrdf.org/spl>
                                                    ] )
                            ] ;
        spl:testResult      "Argument"^^xsd:string .

spl:subPropertyOf  a     spin:Function ;
        rdfs:comment     "Checks whether a given property (?arg1) is a (transitive) sub-property of another property (?arg2)."^^xsd:string ;
        rdfs:label       "sub property of"^^xsd:string ;
        rdfs:subClassOf  spl:OntologyFunctions ;
        spin:body        [ a         sp:Ask ;
                           sp:where  ( [ a           sp:TriplePath ;
                                         sp:object   spin:_arg2 ;
                                         sp:path     [ a           sp:ModPath ;
                                                       sp:modMax   -2 ;
                                                       sp:modMin   0 ;
                                                       sp:subPath  rdfs:subPropertyOf
                                                     ] ;
                                         sp:subject  spin:_arg1
                                       ] )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The potential sub-property."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdf:Property
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The potential super-property."^^xsd:string ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdf:Property
                         ] ;
        spin:returnType  xsd:boolean .

sp:month  a              spin:Function ;
        rdfs:comment     "Extracts the month from a date/time literal."^^xsd:string ;
        rdfs:label       "month"^^xsd:string ;
        rdfs:subClassOf  spl:DateFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The date or dateTime argument."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  xsd:integer ;
        spin:symbol      "month"^^xsd:string .

spl:object  a            spin:Function ;
        rdfs:comment     "Gets the object of a given subject (?arg1) / predicate (?arg2) combination. Note that if multiple values are present then the result might be unpredictably random."^^xsd:string ;
        rdfs:label       "object"^^xsd:string ;
        rdfs:subClassOf  spl:OntologyFunctions ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:varName  "object"^^xsd:string ] ) ;
                           sp:where            ( [ sp:object     [ sp:varName  "object"^^xsd:string ] ;
                                                   sp:predicate  spin:_arg2 ;
                                                   sp:subject    spin:_arg1
                                                 ] )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The subject to get the object from."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Resource
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The predicate to get the object of."^^xsd:string ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdf:Property
                         ] ;
        owl:versionInfo  "Note that in TopBraid this function has been implemented in native Java code, for performance reasons."^^xsd:string .

sp:eq   a                spin:Function ;
        rdfs:comment     "Returns true if both arguments are equal." ;
        rdfs:label       "eq"^^xsd:string ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the first value to compare" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:boolean
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the second value to compare" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:boolean
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "="^^xsd:string .

spl:RegexPropertyConstraint
        a                   spl:ConstraintTemplate ;
        rdfs:label          "Regex property constraint"^^xsd:string ;
        rdfs:subClassOf     spl:PropertyConstraintTemplates ;
        spin:body           [ a             sp:Construct ;
                              sp:templates  ( [ sp:object     spin:ConstraintViolation ;
                                                sp:predicate  rdf:type ;
                                                sp:subject    _:b7
                                              ] [ sp:object     spin:_this ;
                                                  sp:predicate  spin:violationRoot ;
                                                  sp:subject    _:b7
                                                ] [ sp:object     [ sp:varName  "property"^^xsd:string ] ;
                                                    sp:predicate  spin:violationPath ;
                                                    sp:subject    _:b7
                                                  ] [ sp:object     [ sp:varName  "message"^^xsd:string ] ;
                                                      sp:predicate  rdfs:label ;
                                                      sp:subject    _:b7
                                                    ] ) ;
                              sp:where      ( [ sp:object     [ sp:varName  "object"^^xsd:string ] ;
                                                sp:predicate  [ sp:varName  "property"^^xsd:string ] ;
                                                sp:subject    spin:_this
                                              ] [ a              sp:Filter ;
                                                  sp:expression  [ a        sp:not ;
                                                                   sp:arg1  [ a        sp:regex ;
                                                                              sp:arg1  [ a        xsd:string ;
                                                                                         sp:arg1  [ sp:varName  "object"^^xsd:string ]
                                                                                       ] ;
                                                                              sp:arg2  [ sp:varName  "pattern"^^xsd:string ]
                                                                            ]
                                                                 ]
                                                ] [ a              sp:Bind ;
                                                    sp:expression  [ a        sp:concat ;
                                                                     sp:arg1  "Value " ;
                                                                     sp:arg2  [ sp:varName  "object"^^xsd:string ] ;
                                                                     sp:arg3  " must match the regular expression \"" ;
                                                                     sp:arg4  [ sp:varName  "pattern"^^xsd:string ] ;
                                                                     sp:arg5  "\""
                                                                   ] ;
                                                    sp:variable    [ sp:varName  "message"^^xsd:string ]
                                                  ] )
                            ] ;
        spin:constraint     [ a              spl:Argument ;
                              rdfs:comment   "The regular expression to match."^^xsd:string ;
                              spl:predicate  arg:pattern ;
                              spl:valueType  xsd:string
                            ] ;
        spin:labelTemplate  "Values of {?property} must match the regular expression {?pattern}"^^xsd:string .

sp:sha512  a             spin:Function ;
        rdfs:comment     "Returns the SHA512 checksum, as a hex digit string, calculated on the UTF-8 representation of the simple literal or lexical form of the xsd:string. Hex digits SHOULD be in lower case."^^xsd:string ;
        rdfs:label       "sha512"^^xsd:string ;
        rdfs:seeAlso     <http://www.w3.org/TR/sparql11-query/#func-sha512> ;
        rdfs:subClassOf  spl:MiscFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The input literal."^^xsd:string ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:returnType  xsd:string ;
        spin:symbol      "SHA512"^^xsd:string .

sp:hours  a              spin:Function ;
        rdfs:comment     "Extracts the hours from a date/time literal."^^xsd:string ;
        rdfs:label       "hours"^^xsd:string ;
        rdfs:subClassOf  spl:DateFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The dateTime or time argument."^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  xsd:integer ;
        spin:symbol      "hours"^^xsd:string .

spl:objectCount  a       spin:Function ;
        rdfs:comment     "Gets the number of values of a given property (?arg2) at a given subject (?arg1). The result is the number of matches of (?arg1, ?arg2, ?object)." ;
        rdfs:label       "objectCount"^^xsd:string ;
        rdfs:subClassOf  spl:OntologyFunctions ;
        spin:body        [ a                   sp:Select ;
                           sp:resultVariables  ( [ sp:expression  [ a              sp:Count ;
                                                                    sp:expression  [ sp:varName  "object"^^xsd:string ]
                                                                  ] ;
                                                   sp:varName     "result"^^xsd:string
                                                 ] ) ;
                           sp:where            ( [ sp:object     [ sp:varName  "object"^^xsd:string ] ;
                                                   sp:predicate  spin:_arg2 ;
                                                   sp:subject    spin:_arg1
                                                 ] )
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the subject to get the number of objects of"^^xsd:string ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Resource
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the property to get the number of values of" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  rdf:Property
                         ] ;
        spin:returnType  xsd:integer .

arg:pattern  a              rdf:Property ;
        rdfs:subPropertyOf  sp:arg .

spl:PropertyPairConstraintTemplates
        a                spl:ConstraintTemplate ;
        rdfs:comment     "Abstract base class for templates that take two properties as arguments and establish a relationship between them."^^xsd:string ;
        rdfs:label       "Property pair constraint templates"^^xsd:string ;
        rdfs:subClassOf  spl:PropertyConstraintTemplates ;
        spin:abstract    true ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The \"other\" property."^^xsd:string ;
                           spl:predicate  arg:otherProperty ;
                           spl:valueType  rdf:Property
                         ] .

sp:and  a                spin:Function ;
        rdfs:comment     "Return the logical AND between two (boolean) operands." ;
        rdfs:label       "and"^^xsd:string ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the first operand of the intersection" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  xsd:boolean
                         ] ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the second operand of the intersection" ;
                           spl:predicate  sp:arg2 ;
                           spl:valueType  xsd:boolean
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "&&"^^xsd:string .

spl:MathematicalFunctions
        a                spin:Function ;
        rdfs:comment     "A collection of functions operating on numbers."^^xsd:string ;
        rdfs:label       "Mathematical functions"^^xsd:string ;
        rdfs:subClassOf  spin:Functions ;
        spin:abstract    true .

spl:defaultValue  a         rdf:Property ;
        rdfs:label          "default value"^^xsd:string ;
        rdfs:subPropertyOf  sp:arg .

spl:testExpression  a       rdf:Property ;
        rdfs:label          "test expression"^^xsd:string ;
        rdfs:subPropertyOf  sp:arg .

sp:datatype  a           spin:Function ;
        rdfs:comment     "Returns the datatype IRI of argument ?arg1; returns xsd:string if the parameter is a simple literal." ;
        rdfs:label       "datatype"^^xsd:string ;
        rdfs:subClassOf  spl:OntologyFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "the literal to get the datatype of" ;
                           spl:predicate  sp:arg1 ;
                           spl:valueType  rdfs:Literal
                         ] ;
        spin:returnType  rdfs:Class ;
        spin:symbol      "datatype"^^xsd:string .

sp:notIn  a              spin:Function ;
        rdfs:comment     "Checks whether the value on the left (?arg1) is none of the values on the right (?arg2, ?arg3 ...)."^^xsd:string ;
        rdfs:label       "NOT IN"^^xsd:string ;
        rdfs:subClassOf  spl:BooleanFunctions ;
        spin:constraint  [ a              spl:Argument ;
                           rdfs:comment   "The value to find."^^xsd:string ;
                           spl:predicate  sp:arg1
                         ] ;
        spin:returnType  xsd:boolean ;
        spin:symbol      "NOT IN"^^xsd:string .

spl:Test-object-noValue
        a                   spl:TestCase ;
        spl:testExpression  [ a        spl:object ;
                              sp:arg1  owl:versionInfo ;
                              sp:arg2  owl:versionInfo
                            ] .

<http://siima.net/ont/accessories>
        a                owl:Ontology ;
        owl:versionInfo  "Created with TopBraid Composer"^^xsd:string .

accessories:CatEye  a    owl:Class ;
        rdfs:subClassOf  accessories:Accessory .

accessories:Accessory
        a                owl:Class ;
        rdfs:subClassOf  owl:Thing .

accessories:Bell_1  a  accessories:Bell ;
        rdfs:label  "Original Label Bell_1 (by TBC)"^^xsd:string .

accessories:hasAccessory
        a       owl:ObjectProperty .

accessories:CatEye_1  a  accessories:CatEye .

spin:ask  a              spin:Function ;
        rdfs:comment     "Executes a given ASK query and returns its boolean result. The first argument must point to an sp:Ask or a SPIN template call that has an ASK query as its body. All subsequent argument can come in pairs, with the first one being a variable name and the second its binding.\n\nExample:\n\n    BIND (spin:ask(?query, \"this\", owl:Thing) AS ?result) .\n\nwill execute the sp:Ask behind ?query with the variable ?this pre-bound to owl:Thing."^^xsd:string ;
        rdfs:label       "ask"^^xsd:string ;
        rdfs:subClassOf  spin:Functions .

spin:violationValue  a      rdf:Property ;
        rdfs:comment        "An optional attribute of ConstraintViolations to point at a specific RDF node that caused the violation. Should be accessible from the root via the violationPath."^^xsd:string ;
        rdfs:domain         spin:ConstraintViolation ;
        rdfs:label          "violation value"^^xsd:string ;
        rdfs:subPropertyOf  spin:systemProperty .

spin:symbol  a              rdf:Property ;
        rdfs:comment        "The symbol of a function, e.g. \"=\" for the eq function." ;
        rdfs:domain         spin:Function ;
        rdfs:label          "symbol"^^xsd:string ;
        rdfs:range          xsd:string ;
        rdfs:subPropertyOf  spin:systemProperty .

spin:returnType  a          rdf:Property ;
        rdfs:comment        "The return type of a Function, e.g. xsd:string." ;
        rdfs:domain         spin:Function ;
        rdfs:label          "return type"^^xsd:string ;
        rdfs:range          rdfs:Class ;
        rdfs:subPropertyOf  spin:systemProperty .

spin:UpdateTemplate  a   rdfs:Class ;
        rdfs:comment     "A SPIN template that has an UPDATE command as its body."^^xsd:string ;
        rdfs:label       "Update template"^^xsd:string ;
        rdfs:subClassOf  spin:Template ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "The UPDATE command wrapped by this template."^^xsd:string ;
                           spl:maxCount   1 ;
                           spl:minCount   0 ;
                           spl:predicate  spin:body ;
                           spl:valueType  sp:Update
                         ] .

spin:MagicProperty  a    rdfs:Class ;
        rdfs:label       "Magic property"^^xsd:string ;
        rdfs:subClassOf  spin:Function , rdf:Property .

spin:imports  a             owl:OntologyProperty ;
        rdfs:comment        "Can be used to link an RDF graph (usually the instance of owl:Ontology) with a SPIN library to define constraints. SPIN-aware tools should include the definitions from those libraries for constraint checking. Using such libraries is a simpler alternative than explicitly importing them using owl:imports, because it does not force all the SPIN triples into the RDF model."^^xsd:string ;
        rdfs:domain         owl:Ontology ;
        rdfs:label          "imports"^^xsd:string ;
        rdfs:range          owl:Ontology ;
        rdfs:subPropertyOf  spin:systemProperty .

spin:violationSource  a     rdf:Property ;
        rdfs:comment        "Can be used to link a spin:ConstraintViolation with the query or template call that caused it. This property is typically filled in automatically by the constraint checking engine and does not need to be set manually. However, it can be useful to learn more about the origin of a violation."^^xsd:string ;
        rdfs:domain         spin:ConstraintViolation ;
        rdfs:label          "violation source"^^xsd:string ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  spin:systemProperty .

spin:fix  a                 rdf:Property ;
        rdfs:comment        "Can be used to link a ConstraintViolation with one or more UPDATE Templates that would help fix the violation."^^xsd:string ;
        rdfs:domain         spin:ConstraintViolation ;
        rdfs:label          "fix"^^xsd:string ;
        rdfs:range          spin:UpdateTemplate ;
        rdfs:subPropertyOf  spin:systemProperty .

spin:systemProperty  a  rdf:Property ;
        rdfs:comment  "An \"abstract\" base property that groups together those system properties that the user will hardly ever need to see in property trees. This property may be dropped in future versions of this ontology - right now it's mainly here for convenience." ;
        rdfs:label    "system property"^^xsd:string .

sp:Modify  a             rdfs:Class ;
        rdfs:comment     "Represents a MODIFY (part of SPARQL UPDATE language). The graph IRIs are stored in sp:graphIRI. The template patterns are stored in sp:deletePattern and sp:insertPattern. The WHERE clause is represented using sp:where."^^xsd:string ;
        rdfs:label       "Modify"^^xsd:string ;
        rdfs:subClassOf  spin:Rule , sp:Update .

spin:Info  a          spin:ConstraintViolationLevel ;
        rdfs:comment  "Indicates that the associated constraint violation is a not a problem. This level can be used for diagnostic and debugging purposes."^^xsd:string ;
        rdfs:label    "Info"^^xsd:string .

spin:command  a       rdf:Property ;
        rdfs:comment  "Can be used to link a resource with a SPARQL query or update request (sp:Command)."^^xsd:string ;
        rdfs:label    "command"^^xsd:string ;
        rdfs:range    sp:Command .

spin:_arg4  a       sp:Variable ;
        sp:varName  "arg4"^^xsd:string .

spin:Rule  a             rdfs:Class ;
        rdfs:comment     "Groups together the kinds of SPARQL commands that can appear as SPIN rules and constructors: CONSTRUCT, DELETE WHERE and DELETE/INSERT. This class is never to be instantiated directly."^^xsd:string ;
        rdfs:label       "Rule"^^xsd:string ;
        rdfs:subClassOf  sp:Command .

spin:violationLevel  a      rdf:Property ;
        rdfs:comment        "An optional attribute of ConstraintViolations to point at a violation level (such as Error and Warning). Defaults to spin:Error."^^xsd:string ;
        rdfs:domain         spin:ConstraintViolation ;
        rdfs:label          "violation level"^^xsd:string ;
        rdfs:range          spin:ConstraintViolationLevel ;
        rdfs:subPropertyOf  spin:systemProperty .

spin:ConstructTemplate
        a                rdfs:Class ;
        rdfs:label       "Construct template"^^xsd:string ;
        rdfs:subClassOf  spin:Template ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "The CONSTRUCT query wrapped by this template."^^xsd:string ;
                           spl:maxCount   1 ;
                           spl:minCount   0 ;
                           spl:predicate  spin:body ;
                           spl:valueType  sp:Construct
                         ] .

spin:columnIndex  a         rdf:Property ;
        rdfs:comment        "The index of a column (from left to right) starting at 0."^^xsd:string ;
        rdfs:domain         spin:Column ;
        rdfs:label          "column index"^^xsd:string ;
        rdfs:range          xsd:integer ;
        rdfs:subPropertyOf  spin:systemProperty .

spin:private  a             rdf:Property ;
        rdfs:comment        "Can be set to true to indicate that a SPIN function or template is only meant to be used as a helper of other modules, but not directly. Among others, this allows user interfaces to filter out private modules. Furthermore, it tells potential users of this module that they should avoid using this module, as it may not be stable."^^xsd:string ;
        rdfs:domain         spin:Module ;
        rdfs:label          "private"^^xsd:string ;
        rdfs:range          xsd:boolean ;
        rdfs:subPropertyOf  spin:systemProperty .

sp:Construct  a          rdfs:Class ;
        rdfs:comment     "A CONSTRUCT-type query that can be used to construct new triples from template triples (head) that use variable bindings from the match patterns (body)." ;
        rdfs:label       "Construct"^^xsd:string ;
        rdfs:subClassOf  spin:Rule , sp:Query .

spin:construct  a        spin:MagicProperty ;
        rdfs:comment     "Evaluates a given sp:Construct or SPIN template call (first argument on the left hand side) and binds the resulting triples to the variables on the right hand side.\n\nExample:\n\n    (?query \"this\" owl:Thing) spin:construct (?s ?p ?o)\n\nwill execute the sp:Construct ?query using the binding of owl:Thing to ?this. The resulting triples will be bound to ?s, ?p and ?o. If any of ?s ?p ?o are bound, it will only return the matching triples."^^xsd:string ;
        rdfs:label       "construct"^^xsd:string ;
        rdfs:subClassOf  spin:MagicProperties .

spin:violationPath  a       rdf:Property ;
        rdfs:comment        "An optional attribute of ConstraintViolations to provide a path expression from the root resource to the value that is invalid. If this is a URI then the path represents the predicate of a subject/predicate combination. Otherwise it should be a blank node of type sp:Path." ;
        rdfs:domain         spin:ConstraintViolation ;
        rdfs:label          "violation path"^^xsd:string ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  spin:systemProperty .

spin:_arg3  a       sp:Variable ;
        sp:varName  "arg3"^^xsd:string .

spin:Functions  a        spin:Function ;
        rdfs:comment     "An abstract base class for all defined functions. This class mainly serves as a shared root so that the various instances of the Function metaclass are grouped together." ;
        rdfs:label       "Functions"^^xsd:string ;
        rdfs:subClassOf  spin:Modules ;
        spin:abstract    true .

spin:rulePropertyMaxIterationCount
        a                   rdf:Property ;
        rdfs:comment        "Can be attached to spin:rule (or subclasses thereof) to instruct a SPIN rules engine that it shall only execute the rules max times. If no value is specified, then the rules will be executed with no specific limit."^^xsd:string ;
        rdfs:domain         spin:RuleProperty ;
        rdfs:label          "rule property max iteration count"^^xsd:string ;
        rdfs:range          xsd:integer ;
        rdfs:subPropertyOf  spin:systemProperty .

spin:SelectTemplates  a  spin:SelectTemplate ;
        rdfs:comment     "Suggested abstract base class for all SelectTemplates."^^xsd:string ;
        rdfs:label       "Select templates"^^xsd:string ;
        rdfs:subClassOf  spin:Templates ;
        spin:abstract    true .

spin:ConstraintViolationLevel
        a                rdfs:Class ;
        rdfs:comment     "The type of the supported levels of constraint violations, including spin:Error and spin:Warning."^^xsd:string ;
        rdfs:label       "Constraint violation level"^^xsd:string ;
        rdfs:subClassOf  rdfs:Resource .

spin:Column  a           rdfs:Class ;
        rdfs:comment     "Provides metadata about a column in the result set of a (SPARQL) query, for example of the body queries of SPIN templates. Columns can define human-readable labels that serve as column titles, using rdfs:label."^^xsd:string ;
        rdfs:label       "Column"^^xsd:string ;
        rdfs:subClassOf  rdfs:Resource .

spin:Modules  a           rdfs:Class ;
        rdfs:comment      "An \"artificial\" parent class for all Functions and Templates." ;
        rdfs:label        "Modules"^^xsd:string ;
        rdfs:subClassOf   rdfs:Resource ;
        spin:constructor  [ a  spl:ConstructDefaultValues ] .

spin:_arg2  a       sp:Variable ;
        sp:varName  "arg2"^^xsd:string .

spin:UpdateTemplates  a  spin:UpdateTemplate ;
        rdfs:comment     "Suggested abstract base class for all UpdateTemplates."^^xsd:string ;
        rdfs:label       "Update templates"^^xsd:string ;
        rdfs:subClassOf  spin:Templates ;
        spin:abstract    true .

spin:RuleProperty  a     rdfs:Class ;
        rdfs:comment     "The metaclass of spin:rule and its subproperties. spin:RuleProperties can have additional metadata attached to them."^^xsd:string ;
        rdfs:label       "Rule property"^^xsd:string ;
        rdfs:subClassOf  rdf:Property .

spin:nextRuleProperty
        a                   rdf:Property ;
        rdfs:comment        "Can be used to link two sub-properties of spin:rule (or spin:rule itself) to instruct the SPIN engine to execute one set of rules before another one. The values of the subject property will be executed before those of the object property."^^xsd:string ;
        rdfs:domain         spin:RuleProperty ;
        rdfs:label          "next rule property"^^xsd:string ;
        rdfs:range          spin:RuleProperty ;
        rdfs:subPropertyOf  spin:systemProperty .

spin:Templates  a        spin:Template ;
        rdfs:comment     "Suggested abstract base class for all Templates."^^xsd:string ;
        rdfs:label       "Templates"^^xsd:string ;
        rdfs:subClassOf  spin:Modules ;
        spin:abstract    true .

spin:SelectTemplate  a   rdfs:Class ;
        rdfs:comment     "A SPIN template that wraps a SELECT query."^^xsd:string ;
        rdfs:label       "Select template"^^xsd:string ;
        rdfs:subClassOf  spin:TableDataProvider , spin:Template ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "The SELECT query wrapped by this template."^^xsd:string ;
                           spl:maxCount   1 ;
                           spl:minCount   0 ;
                           spl:predicate  spin:body ;
                           spl:valueType  sp:Select
                         ] .

spin:thisUnbound  a         rdf:Property ;
        rdfs:comment        "Can be set to true for SPIN rules and constraints that do not require pre-binding the variable ?this with all members of the associated class. This flag should only be set to true if the WHERE clause is sufficiently strong to only bind instances of the associated class, or its subclasses. In those cases, the engine can greatly improve performance of query execution, because it does not need to add clauses to narrow down the WHERE clause."^^xsd:string ;
        rdfs:domain         sp:Construct ;
        rdfs:label          "this unbound"^^xsd:string ;
        rdfs:range          xsd:boolean ;
        rdfs:subPropertyOf  spin:systemProperty .

spin:AskTemplates  a     spin:AskTemplate ;
        rdfs:comment     "Suggested abstract base class for all AskTemplates."^^xsd:string ;
        rdfs:label       "Ask templates"^^xsd:string ;
        rdfs:subClassOf  spin:Templates ;
        spin:abstract    true .

spin:_this  a         sp:Variable ;
        rdfs:comment  "A system variable representing the current context instance in a rule or constraint." ;
        rdfs:label    "_this"^^xsd:string ;
        sp:varName    "this"^^xsd:string .

spin:_arg1  a       sp:Variable ;
        sp:varName  "arg1"^^xsd:string .

sp:DeleteWhere  a        rdfs:Class ;
        rdfs:comment     "An Update operation where the triples matched by the WHERE clause (sp:where) will be the triples deleted."^^xsd:string ;
        rdfs:label       "Delete where"^^xsd:string ;
        rdfs:subClassOf  spin:Rule , sp:Update .

<http://spinrdf.org/spin>
        a                owl:Ontology ;
        rdfs:comment     "An RDF Schema that can be used to attach constraints and rules to RDFS classes, and to encapsulate reusable SPARQL queries into functions and templates."^^xsd:string ;
        rdfs:label       "SPIN Modeling Vocabulary"^^xsd:string ;
        owl:imports      <http://spinrdf.org/sp> ;
        owl:versionInfo  "1.3.2"^^xsd:string .

spin:body  a                rdf:Property ;
        rdfs:comment        "The body of a Function or Template. This points to a Query instance. For Functions, this is limited to either ASK or SELECT type queries. If the body is the ASK function then the return value is xsd:boolean. Otherwise, the SELECT query must have a single return variable. The first binding of this SELECT query will be returned as result of the function call." ;
        rdfs:label          "body"^^xsd:string ;
        rdfs:range          sp:Command ;
        rdfs:subPropertyOf  spin:systemProperty .

spin:query  a               rdf:Property ;
        rdfs:comment        "Can be used to point from any resource to a Query." ;
        rdfs:label          "query"^^xsd:string ;
        rdfs:range          sp:Query ;
        rdfs:subPropertyOf  spin:command .

spin:ConstraintViolation
        a                rdfs:Class ;
        rdfs:comment     "An object that can be created by spin:constraints to provide information about a constraint violation." ;
        rdfs:label       "Constraint violation"^^xsd:string ;
        rdfs:subClassOf  rdfs:Resource .

spin:column  a              rdf:Property ;
        rdfs:comment        "Can link a TableDataProvider (esp. SelectTemplate) with one or more columns that provide metadata for rendering purposes. Columns can be sorted by their spin:columnIndex (which must align with the ordering of variables in the SELECT query starting with 0). Not all result variables of the underlying query need to have a matching spin:Column."^^xsd:string ;
        rdfs:domain         spin:TableDataProvider ;
        rdfs:label          "column"^^xsd:string ;
        rdfs:range          spin:Column ;
        rdfs:subPropertyOf  spin:systemProperty .

spin:Template  a         rdfs:Class ;
        rdfs:comment     "The metaclass of SPIN templates. Templates are classes that are instances of this class. A template represents a reusable SPARQL query or update request that can be parameterized with arguments. Templates can be instantiated in places where normally a SPARQL query or update request is used, in particular as spin:rules and spin:constraints."^^xsd:string ;
        rdfs:label       "Template"^^xsd:string ;
        rdfs:subClassOf  spin:Module ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "the body of the Template"^^xsd:string ;
                           spl:maxCount   1 ;
                           spl:minCount   0 ;
                           spl:predicate  spin:body
                         ] .

spin:violationRoot  a       rdf:Property ;
        rdfs:comment        "The root resource of the violation (often ?this in the constraint body)." ;
        rdfs:domain         spin:ConstraintViolation ;
        rdfs:label          "violation root"^^xsd:string ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  spin:systemProperty .

spin:LibraryOntology  a  rdfs:Class ;
        rdfs:comment     "A marker class that can be attached to base URIs (ontologies) to instruct SPIN engines that this ontology only contains a library of SPIN declarations. Library Ontologies should be ignored by SPIN inference engines even if they have been imported by a domain model. For example, a SPIN version of OWL RL may contain all the OWL RL axioms, attached to owl:Thing, but nothing else. However, when executed, these axioms should not be executed over themselves, because we don't want the system to reason about the SPIN triples to speed up things." ;
        rdfs:label       "Library ontology"^^xsd:string ;
        rdfs:subClassOf  owl:Ontology .

spin:MagicProperties  a     spin:MagicProperty ;
        rdfs:comment        "An abstract superclass that can be used to group all spin:MagicProperty instances under a single parent class."^^xsd:string ;
        rdfs:label          "Magic properties"^^xsd:string ;
        rdfs:subClassOf     spin:Functions ;
        rdfs:subPropertyOf  spin:systemProperty ;
        spin:abstract       true .

spin:ConstructTemplates
        a                spin:ConstructTemplate ;
        rdfs:comment     "Suggested abstract base class for all ConstructTemplates."^^xsd:string ;
        rdfs:label       "Construct templates"^^xsd:string ;
        rdfs:subClassOf  spin:Templates ;
        spin:abstract    true .

spin:Warning  a       spin:ConstraintViolationLevel ;
        rdfs:comment  "Indicates that the associated constraint violation is a problem that may not have to be fixed but may lead to issues in the future."^^xsd:string ;
        rdfs:label    "Warning"^^xsd:string .

spin:rule  a                spin:RuleProperty ;
        rdfs:comment        "An inferencing rule attached to a class. Rules are expressed as CONSTRUCT queries or INSERT/DELETE operations where the variable ?this will be bound to the current instance of the class. These inferences can be used to derive new values from existing values at the instance."^^xsd:string ;
        rdfs:domain         rdfs:Class ;
        rdfs:label          "rule"^^xsd:string ;
        rdfs:range          spin:Rule ;
        rdfs:subPropertyOf  spin:command .

spin:constraint  a          rdf:Property ;
        rdfs:comment        "Links a class with constraints on its instances. The values of this property are \"axioms\" expressed as CONSTRUCT or ASK queries where the variable ?this refers to the instances of the surrounding class. ASK queries must evaluate to false for each member of this class - returning true means that the instance ?this violates the constraint. CONSTRUCT queries must create instances of spin:ConstraintViolation to provide details on the reason for the violation." ;
        rdfs:domain         rdfs:Class ;
        rdfs:label          "constraint"^^xsd:string ;
        rdfs:subPropertyOf  spin:query .

spin:Function  a         rdfs:Class ;
        rdfs:comment     "Metaclass for functions that can be used in SPARQL expressions (e.g. FILTER or BIND). The function themselves are classes that are instances of this metaclass. Function calls are instances of the function classes, with property values for the arguments."^^xsd:string ;
        rdfs:label       "Function"^^xsd:string ;
        rdfs:subClassOf  spin:Module ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "the body of the function"^^xsd:string ;
                           spl:maxCount   1 ;
                           spl:minCount   0 ;
                           spl:predicate  spin:body
                         ] .

spin:Module  a           rdfs:Class ;
        rdfs:comment     "An abstract building block of a SPARQL system. A Module can take Arguments as input and applies them on an input RDF Graph. The Arguments should be declared as spin:constraints."^^xsd:string ;
        rdfs:label       "Module"^^xsd:string ;
        rdfs:subClassOf  rdfs:Class .

spin:AskTemplate  a      rdfs:Class ;
        rdfs:comment     "A SPIN template that wraps an ASK query."^^xsd:string ;
        rdfs:label       "Ask template"^^xsd:string ;
        rdfs:subClassOf  spin:Template ;
        spin:constraint  [ a              spl:Attribute ;
                           rdfs:comment   "The ASK query wrapped by this template."^^xsd:string ;
                           spl:maxCount   1 ;
                           spl:minCount   0 ;
                           spl:predicate  spin:body ;
                           spl:valueType  sp:Ask
                         ] .

spin:columnWidth  a         rdf:Property ;
        rdfs:comment        "The preferred width of the associated Column, for display purposes. Values in pixels (rendering engines may multiply the values depending on resolution)."^^xsd:string ;
        rdfs:domain         spin:Column ;
        rdfs:label          "column width"^^xsd:string ;
        rdfs:range          xsd:integer ;
        rdfs:subPropertyOf  spin:systemProperty .

spin:TableDataProvider
        a                rdfs:Class ;
        rdfs:comment     "An abstraction of objects that can produce tabular data. This serves as a base class of spin:SelectTemplate, because SELECT queries can produce tables with columns for each result variable. However, other types of TableDataProviders are conceivable by other frameworks, and this class may prove as a useful shared foundation.\n\nTableDataProviders can link to definitions of columns via spin:column, and these definitions can inform rendering engines."^^xsd:string ;
        rdfs:label       "Table data provider"^^xsd:string ;
        rdfs:subClassOf  rdfs:Class .

spin:Error  a         spin:ConstraintViolationLevel ;
        rdfs:comment  "Indicates that the associated constraint violation is an error that should be fixed."^^xsd:string ;
        rdfs:label    "Error"^^xsd:string .

spin:Fatal  a         spin:ConstraintViolationLevel ;
        rdfs:comment  "Indicates that the associated constraint violation is a severe error that must be fixed. Constraint checking engines may decide to stop further evaluation once a fatal error has been detected."^^xsd:string ;
        rdfs:label    "Fatal"^^xsd:string .

spin:_arg5  a       sp:Variable ;
        sp:varName  "arg5"^^xsd:string .

spin:columnType  a          rdf:Property ;
        rdfs:comment        "The datatype or resource type of a spin:Column. For example this is useful as metadata to inform a rendering engine that numeric columns (e.g. xsd:float) need to be right-aligned."^^xsd:string ;
        rdfs:domain         spin:Column ;
        rdfs:label          "column type"^^xsd:string ;
        rdfs:range          rdfs:Class ;
        rdfs:subPropertyOf  spin:systemProperty .

spin:labelTemplate  a       rdf:Property ;
        rdfs:comment        "A template string for displaying instantiations of a module in human-readable form. The template may contain the argument variable names in curly braces to support substitution. For example, \"The number of values of the {?arg1} property.\"" ;
        rdfs:domain         spin:Template ;
        rdfs:label          "label template"^^xsd:string ;
        rdfs:range          xsd:string ;
        rdfs:subPropertyOf  spin:systemProperty .

spin:abstract  a            rdf:Property ;
        rdfs:comment        "Can be set to true to indicate that this module shall not be instantiated. Abstract modules are only there to organize other modules into hierarchies." ;
        rdfs:domain         spin:Module ;
        rdfs:label          "abstract"^^xsd:string ;
        rdfs:range          xsd:boolean ;
        rdfs:subPropertyOf  spin:systemProperty .

spin:update  a              rdf:Property ;
        rdfs:comment        "Can be used to point from any resource to an Update."^^xsd:string ;
        rdfs:label          "update"^^xsd:string ;
        rdfs:range          sp:Update ;
        rdfs:subPropertyOf  spin:command .

spin:select  a           spin:MagicProperty ;
        rdfs:comment     "Executes a given SELECT or ASK query (or a corresponding SPIN template call) and binds its result rows to the variables specified on the right hand side. May also pre-bind variables for the query execution, using name-value pairs on the left hand side.\n\nExample:\n\n    (?query \"this\" owl:Thing) spin:select (?a ?b)\n\nwill execute the sp:Select or sp:Ask that ?query points to and pre-bind ?this with the value of owl:Thing for the execution of the query. The first result variable of the query's result set will be bound to ?a, the second to ?b etc. If the nodes on the right are bound (or constants) then it will match with the values from the result set."^^xsd:string ;
        rdfs:label       "select"^^xsd:string ;
        rdfs:subClassOf  spin:MagicProperties .

spin:cachable  a            rdf:Property ;
        rdfs:comment        "Can be set to true to instruct the SPIN engine that it may cache the results of all calls to the associated function. Functions should only be marked as cachable if the same combination of input arguments always returns the same result. Functions that query a graph or other background data that may change over time should not be cached. Caching can significantly improve performance of frequently needed functions."^^xsd:string ;
        rdfs:domain         spin:Function ;
        rdfs:label          "cachable"^^xsd:string ;
        rdfs:range          xsd:boolean ;
        rdfs:subPropertyOf  spin:systemProperty .

spin:constructor  a         rdf:Property ;
        rdfs:comment        "Can be used to attach a \"constructor\" to a class. A constructor is a SPARQL CONSTRUCT query or INSERT/DELETE Update operation that can add initial values to the current instance. At execution time, the variable ?this is bound to the current instance. Tools can call constructors of a class and its superclasses when an instance of a class has been created. Constructors will also be used to initialize resources that have received a new rdf:type triple as a result of spin:rules firing."^^xsd:string ;
        rdfs:domain         rdfs:Class ;
        rdfs:label          "constructor"^^xsd:string ;
        rdfs:range          spin:Rule ;
        rdfs:subPropertyOf  spin:command .

sp:Command  a            rdfs:Class ;
        rdfs:comment     "A shared superclass for sp:Query and sp:Update that can be used to specify that the range of property can be either one."^^xsd:string ;
        rdfs:label       "Command"^^xsd:string ;
        rdfs:subClassOf  sp:SystemClass .

sp:bindings  a              rdf:Property ;
        rdfs:comment        "The actual bindings of a sp:Values element."^^xsd:string ;
        rdfs:domain         sp:Values ;
        rdfs:label          "bindings"^^xsd:string ;
        rdfs:range          rdf:List ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:fromNamed  a             rdf:Property ;
        rdfs:comment        "Specifies a named RDF Dataset used by a Query (FROM NAMED syntax in SPARQL). Values of this property must be URI resources." ;
        rdfs:domain         sp:Query ;
        rdfs:label          "from named"^^xsd:string ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:GroupConcat  a        rdfs:Class ;
        rdfs:comment     "Represents GROUP_CONCAT aggregations."^^xsd:string ;
        rdfs:label       "GROUP_CONCAT"^^xsd:string ;
        rdfs:subClassOf  sp:Aggregation .

sp:varNames  a              rdf:Property ;
        rdfs:comment        "The names of the variables (xsd:strings) of the variables declared for a VALUES element."^^xsd:string ;
        rdfs:domain         sp:Values ;
        rdfs:label          "var names"^^xsd:string ;
        rdfs:range          rdf:List ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:ModPath  a            rdfs:Class ;
        rdfs:comment     "A modified path such as rdfs:subClassOf*." ;
        rdfs:label       "Mod path"^^xsd:string ;
        rdfs:subClassOf  sp:Path .

sp:graphNameNode  a         rdf:Property ;
        rdfs:comment        "The name (URI or Variable) of a NamedGraph." ;
        rdfs:domain         sp:NamedGraph ;
        rdfs:label          "graph name node"^^xsd:string ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:Load  a               rdfs:Class ;
        rdfs:comment     "A LOAD Update operation. The document to load is specified using sp:document, and the (optional) target graph using sp:into."^^xsd:string ;
        rdfs:label       "Load"^^xsd:string ;
        rdfs:subClassOf  sp:Update .

sp:having  a                rdf:Property ;
        rdfs:comment        "Points from a SELECT query to a list of HAVING expressions."^^xsd:string ;
        rdfs:domain         sp:Select ;
        rdfs:label          "having"^^xsd:string ;
        rdfs:range          rdf:List ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:Minus  a              rdfs:Class ;
        rdfs:comment     "A MINUS element group."^^xsd:string ;
        rdfs:label       "Minus"^^xsd:string ;
        rdfs:subClassOf  sp:ElementGroup .

sp:subject  a               rdf:Property ;
        rdfs:comment        "A resource or Variable describing the subject of a triple." ;
        rdfs:domain         sp:Tuple ;
        rdfs:label          "subject"^^xsd:string ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:Desc  a               rdfs:Class ;
        rdfs:comment     "Marker to indicate descending order." ;
        rdfs:label       "Desc"^^xsd:string ;
        rdfs:subClassOf  sp:OrderByCondition .

sp:path2  a                 rdf:Property ;
        rdfs:comment        "The second child path of a property path. Used by sp:AltPath and sp:SeqPath." ;
        rdfs:label          "path2"^^xsd:string ;
        rdfs:range          sp:Path ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:modMax  a                rdf:Property ;
        rdfs:domain         sp:ModPath ;
        rdfs:label          "mod max"^^xsd:string ;
        rdfs:range          xsd:integer ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:Filter  a             rdfs:Class ;
        rdfs:comment     "A constraint element that evaluates a given expression to true or false." ;
        rdfs:label       "Filter"^^xsd:string ;
        rdfs:subClassOf  sp:Element .

sp:Insert  a             rdfs:Class , owl:DeprecatedClass ;
        rdfs:comment     "Deprecated - use sp:Modify instead.\n\nRepresents a INSERT INTO (part of SPARQL UPDATE language). The graph IRIs are stored in sp:graphIRI. The template patterns to delete are stored in sp:insertPattern. The WHERE clause is represented using sp:where."^^xsd:string ;
        rdfs:label       "Insert"^^xsd:string ;
        rdfs:subClassOf  sp:Modify .

sp:Drop  a               rdfs:Class ;
        rdfs:comment     "An Update operation that removes a specified graph from the Graph Store. Must specify the graph using sp:graphIRI, or sp:default, sp:named or sp:all. May have the SILENT flag, encoded using sp:silent."^^xsd:string ;
        rdfs:label       "Drop"^^xsd:string ;
        rdfs:subClassOf  sp:Update .

sp:all  a                   rdf:Property ;
        rdfs:comment        "Used in DROP and CLEAR."^^xsd:string ;
        rdfs:label          "all"^^xsd:string ;
        rdfs:range          xsd:boolean ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:arg1  a                  rdf:Property ;
        rdfs:comment        "The first argument of a function call." ;
        rdfs:label          "arg1"^^xsd:string ;
        rdfs:subPropertyOf  sp:arg .

sp:Delete  a             rdfs:Class , owl:DeprecatedClass ;
        rdfs:comment     "Deprecated - use sp:Modify instead.\n\nRepresents a DELETE FROM (part of SPARQL UPDATE language). The graph IRIs are stored in sp:graphIRI. The template patterns to delete are stored in sp:deletePattern. The WHERE clause is represented using sp:where."^^xsd:string ;
        rdfs:label       "Delete"^^xsd:string ;
        rdfs:subClassOf  sp:Modify .

sp:Aggregation  a        rdfs:Class ;
        rdfs:comment     "Base class of aggregation types (not part of the SPARQL 1.0 standard but supported by ARQ and other engines)." ;
        rdfs:label       "Aggregation"^^xsd:string ;
        rdfs:subClassOf  sp:SystemClass .

sp:deletePattern  a         rdf:Property ;
        rdfs:comment        "Points to a list of sp:TripleTemplates and sp:NamedGraphs in a modify operation."^^xsd:string ;
        rdfs:domain         sp:Update ;
        rdfs:label          "delete pattern"^^xsd:string ;
        rdfs:range          rdf:List ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:separator  a             rdf:Property ;
        rdfs:comment        "Stores the separator=\"...\" value of a GROUP_CONCAT (sp:GroupConcat) aggregation."^^xsd:string ;
        rdfs:domain         sp:GroupConcat ;
        rdfs:label          "separator"^^xsd:string ;
        rdfs:range          xsd:string ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:modMin  a                rdf:Property ;
        rdfs:domain         sp:ModPath ;
        rdfs:label          "mod min"^^xsd:string ;
        rdfs:range          xsd:integer ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:systemProperty  a  rdf:Property ;
        rdfs:comment  "An abstract base proprerty that groups together the SP system properties. Users typically don't need to see them anyway." ;
        rdfs:label    "SP system property"^^xsd:string .

sp:node  a                  rdf:Property ;
        rdfs:domain         sp:ReverseLinkPath ;
        rdfs:label          "node"^^xsd:string ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:ReverseLinkPath  a    rdfs:Class ;
        rdfs:label       "Reverse link path"^^xsd:string ;
        rdfs:subClassOf  sp:Path .

sp:Bind  a               rdfs:Class ;
        rdfs:comment     "A BIND element."^^xsd:string ;
        rdfs:label       "Bind"^^xsd:string ;
        rdfs:subClassOf  sp:Element .

sp:Clear  a              rdfs:Class ;
        rdfs:comment     "An Update operation that removes all triples from a specified graph. Must specify the graph using sp:graphIRI, or sp:default, sp:named or sp:all. May have the SILENT flag, encoded using sp:silent."^^xsd:string ;
        rdfs:label       "Clear"^^xsd:string ;
        rdfs:subClassOf  sp:Update .

sp:DeleteData  a         rdfs:Class ;
        rdfs:comment     "An Update operation to delete specific triples. The graph triples are represented using sp:data, which points to an rdf:List of sp:Triples or sp:NamedGraphs."^^xsd:string ;
        rdfs:label       "Delete data"^^xsd:string ;
        rdfs:subClassOf  sp:Update .

sp:subPath  a               rdf:Property ;
        rdfs:comment        "The child path of a property path expression. This is used by ReversePath and ModPath." ;
        rdfs:label          "sub path"^^xsd:string ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:path1  a                 rdf:Property ;
        rdfs:comment        "The first child path of a property path. Used by sp:AltPath and sp:SeqPath." ;
        rdfs:label          "path1"^^xsd:string ;
        rdfs:range          sp:Path ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:predicate  a             rdf:Property ;
        rdfs:comment        "A resource or Variable describing the predicate of a triple." ;
        rdfs:domain         sp:Triple ;
        rdfs:label          "predicate"^^xsd:string ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:text  a                  rdf:Property ;
        rdfs:comment        "Can be attached to sp:Queries to store a textual representation of the query. This can be useful for tools that do not have a complete SPIN Syntax parser available." ;
        rdfs:label          "text"^^xsd:string ;
        rdfs:range          xsd:string ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:resultNodes  a           rdf:Property ;
        rdfs:comment        "Contains the result nodes (URI resources or Variables) of a Describe query." ;
        rdfs:domain         sp:Describe ;
        rdfs:label          "result nodes"^^xsd:string ;
        rdfs:range          rdf:List ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:Sample  a             rdfs:Class ;
        rdfs:comment     "Represents SAMPLE aggregations"^^xsd:string ;
        rdfs:label       "SAMPLE"^^xsd:string ;
        rdfs:subClassOf  sp:Aggregation .

sp:Values  a             rdfs:Class ;
        rdfs:comment     "A VALUES element. sp:varNames points to an rdf:List of strings for the variables, sp:values to an rdf:List of rdf:Lists with nodes for each variable, in the order defined by the variables list."^^xsd:string ;
        rdfs:label       "Values"^^xsd:string ;
        rdfs:subClassOf  sp:Element .

sp:Update  a             rdfs:Class ;
        rdfs:comment     "Abstract base class to group the various SPARQL UPDATE commands."^^xsd:string ;
        rdfs:label       "Update"^^xsd:string ;
        rdfs:subClassOf  sp:Command .

sp:Select  a             rdfs:Class ;
        rdfs:comment     "A SELECT-type query that returns variable bindings as its result." ;
        rdfs:label       "Select query"^^xsd:string ;
        rdfs:subClassOf  sp:Query .

sp:Ask  a                rdfs:Class ;
        rdfs:comment     "An ASK query that returns true if the condition in the body is met by at least one result set." ;
        rdfs:label       "Ask"^^xsd:string ;
        rdfs:subClassOf  sp:Query .

sp:groupBy  a               rdf:Property ;
        rdfs:comment        "Points from a Query to the list of GROUP BY expressions." ;
        rdfs:domain         sp:Select ;
        rdfs:label          "group by"^^xsd:string ;
        rdfs:range          rdf:List ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:arg  a             rdf:Property ;
        rdfs:comment  "Abstract superproperty for the enumerated arg1, arg2 etc." ;
        rdfs:label    "arg"^^xsd:string .

sp:expression  a            rdf:Property ;
        rdfs:comment        "Points to an expression, for example in a Filter or Assignment." ;
        rdfs:label          "expression"^^xsd:string ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:SeqPath  a            rdfs:Class ;
        rdfs:comment     "A sequence of multiple paths." ;
        rdfs:label       "Seq path"^^xsd:string ;
        rdfs:subClassOf  sp:Path .

sp:Count  a              rdfs:Class ;
        rdfs:comment     "Counts the number of times a variable is used. The variable is stored in the variable property. This might be left blank to indicate COUNT(*)."^^xsd:string ;
        rdfs:label       "COUNT"^^xsd:string ;
        rdfs:subClassOf  sp:Aggregation .

sp:reduced  a               rdf:Property ;
        rdfs:comment        "A property with true to indicate that a Select query has a REDUCED flag." ;
        rdfs:domain         sp:Select ;
        rdfs:label          "reduced"^^xsd:string ;
        rdfs:range          xsd:boolean ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:NamedGraph  a         rdfs:Class ;
        rdfs:comment     "A named Graph element such as GRAPH <uri> {...}." ;
        rdfs:label       "Named graph"^^xsd:string ;
        rdfs:subClassOf  sp:ElementGroup .

sp:OrderByCondition  a   rdfs:Class ;
        rdfs:comment     "An abstract base class for ascending or descending order conditions. Instances of this class (typically bnodes) must have a value for expression to point to the actual values." ;
        rdfs:label       "Order by condition"^^xsd:string ;
        rdfs:subClassOf  sp:SystemClass .

sp:Sum  a                rdfs:Class ;
        rdfs:comment     "Represents sum aggregations, e.g. SELECT SUM(?varName)..."^^xsd:string ;
        rdfs:label       "SUM"^^xsd:string ;
        rdfs:subClassOf  sp:Aggregation .

sp:where  a                 rdf:Property ;
        rdfs:comment        "The WHERE clause of a Query." ;
        rdfs:label          "where"^^xsd:string ;
        rdfs:range          sp:ElementList ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:templates  a             rdf:Property ;
        rdfs:comment        "Points to a list of TripleTemplates that form the head of a Construct query." ;
        rdfs:domain         sp:Construct ;
        rdfs:label          "templates"^^xsd:string ;
        rdfs:range          rdf:List ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:from  a                  rdf:Property ;
        rdfs:comment        "Specifies an RDF Dataset used by a Query (FROM syntax in SPARQL). Values of this property must be URI resources." ;
        rdfs:domain         sp:Query ;
        rdfs:label          "from"^^xsd:string ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:document  a              rdf:Property ;
        rdfs:comment        "The URI of the document to load using a LOAD Update operation."^^xsd:string ;
        rdfs:domain         sp:Load ;
        rdfs:label          "document"^^xsd:string ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:TriplePath  a         rdfs:Class ;
        rdfs:comment     "Similar to a TriplePattern, but with a path expression as its predicate. For example, this can be used to express transitive sub-class relationships (?subClass rdfs:subClassOf* ?superClass)." ;
        rdfs:label       "Triple path"^^xsd:string ;
        rdfs:subClassOf  sp:Element , sp:Tuple .

sp:Union  a              rdfs:Class ;
        rdfs:comment     "A UNION group." ;
        rdfs:label       "Union"^^xsd:string ;
        rdfs:subClassOf  sp:ElementGroup .

sp:arg5  a                  rdf:Property ;
        rdfs:comment        "The fifth argument of a function call. Further arguments are not common in SPARQL, therefore no sp:arg6, etc are defined here. However, they can be created if needed." ;
        rdfs:label          "arg5"^^xsd:string ;
        rdfs:subPropertyOf  sp:arg .

sp:Exists  a             rdfs:Class ;
        rdfs:comment     "An EXISTS element group."^^xsd:string ;
        rdfs:label       "Exists"^^xsd:string ;
        rdfs:subClassOf  sp:ElementGroup .

sp:as   a                   rdf:Property ;
        rdfs:comment        "Points to a Variable used in an AS statement such as COUNT aggregates." ;
        rdfs:label          "as"^^xsd:string ;
        rdfs:range          sp:Variable ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:object  a                rdf:Property ;
        rdfs:comment        "An RDF Node or Variable describing the object of a triple." ;
        rdfs:domain         sp:Tuple ;
        rdfs:label          "object"^^xsd:string ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:NotExists  a          rdfs:Class ;
        rdfs:comment     "A NOT EXISTS element group."^^xsd:string ;
        rdfs:label       "Not exists"^^xsd:string ;
        rdfs:subClassOf  sp:ElementGroup .

sp:Element  a            rdfs:Class ;
        rdfs:comment     "An abstract base class for all pattern elements." ;
        rdfs:label       "Element"^^xsd:string ;
        rdfs:subClassOf  sp:SystemClass .

sp:Tuple  a              rdfs:Class ;
        rdfs:comment     "Abstract base class for things that have subject and object." ;
        rdfs:label       "Tuple"^^xsd:string ;
        rdfs:subClassOf  sp:SystemClass .

sp:ReversePath  a        rdfs:Class ;
        rdfs:comment     "A path with reversed direction." ;
        rdfs:label       "Reverse path"^^xsd:string ;
        rdfs:subClassOf  sp:Path .

sp:AltPath  a            rdfs:Class ;
        rdfs:comment     "An alternative path with the union of sp:path1 and sp:path2." ;
        rdfs:label       "Alt path"^^xsd:string ;
        rdfs:subClassOf  sp:Path .

sp:SystemClass  a        rdfs:Class ;
        rdfs:comment     "An \"artificial\" root class that groups all SP classes. This makes them look much less overwhelming in UI tools. Typical end users don't need to see those classes anyway." ;
        rdfs:label       "SP System class"^^xsd:string ;
        rdfs:subClassOf  rdfs:Resource .

sp:limit  a                 rdf:Property ;
        rdfs:comment        "The LIMIT solution modifier of a Query." ;
        rdfs:domain         sp:Query ;
        rdfs:label          "limit"^^xsd:string ;
        rdfs:range          xsd:long ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:values  a                rdf:Property ;
        rdfs:comment        "The VALUES block at the end of a query. The object may just be an untyped blank node, i.e. the sp:Values type triple is optional."^^xsd:string ;
        rdfs:domain         sp:Query ;
        rdfs:label          "values"^^xsd:string ;
        rdfs:range          sp:Values ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:using  a                 rdf:Property ;
        rdfs:domain         sp:Modify ;
        rdfs:label          "using"^^xsd:string ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:offset  a                rdf:Property ;
        rdfs:comment        "The OFFSET solution modifier of a Query." ;
        rdfs:domain         sp:Query ;
        rdfs:label          "offset"^^xsd:string ;
        rdfs:range          xsd:long ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:arg4  a                  rdf:Property ;
        rdfs:comment        "The forth argument of a function call." ;
        rdfs:label          "arg4"^^xsd:string ;
        rdfs:subPropertyOf  sp:arg .

sp:TripleTemplate  a     rdfs:Class ;
        rdfs:comment     "A prototypical triple used as template in the head of a Construct query. May contain variables." ;
        rdfs:label       "Triple template"^^xsd:string ;
        rdfs:subClassOf  sp:Triple .

sp:varName  a               rdf:Property ;
        rdfs:comment        "The name of a Variable." ;
        rdfs:domain         sp:Variable ;
        rdfs:label          "varName"^^xsd:string ;
        rdfs:range          xsd:string ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:orderBy  a               rdf:Property ;
        rdfs:comment        "Links a query with an ORDER BY clause where the values are rdf:List containing OrderByConditions or expressions. While the domain of this property is sp:Query, only Describe and Select queries can have values of it." ;
        rdfs:domain         sp:Query ;
        rdfs:label          "order by"^^xsd:string ;
        rdfs:range          rdf:List ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:Avg  a                rdfs:Class ;
        rdfs:comment     "Represents AVG aggregations."^^xsd:string ;
        rdfs:label       "AVG"^^xsd:string ;
        rdfs:subClassOf  sp:Aggregation .

sp:distinct  a              rdf:Property ;
        rdfs:comment        "A marker property to indicate that a Select query is of type SELECT DISTINCT." ;
        rdfs:domain         sp:Select ;
        rdfs:label          "distinct"^^xsd:string ;
        rdfs:range          xsd:boolean ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:elements  a              rdf:Property ;
        rdfs:comment        "Points to an ElementList, for example in an Optional element." ;
        rdfs:label          "elements"^^xsd:string ;
        rdfs:range          sp:ElementList ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:Let  a                rdfs:Class , owl:DeprecatedClass ;
        rdfs:comment     "Deprecated: use sp:Bind instead.\n\nA variable assignment (LET (?<varName> := <expression>)). Not part of the SPARQL 1.0 standard, but (for example) ARQ."^^xsd:string ;
        rdfs:label       "Let"^^xsd:string ;
        rdfs:subClassOf  sp:Bind .

sp:silent  a                rdf:Property ;
        rdfs:label          "silent"^^xsd:string ;
        rdfs:range          xsd:boolean ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:Service  a            rdfs:Class ;
        rdfs:comment     "A SERVICE call that matches a nested sub-pattern against a SPARQL end point specified by a URI."^^xsd:string ;
        rdfs:label       "Service"^^xsd:string ;
        rdfs:subClassOf  sp:ElementGroup .

sp:Describe  a           rdfs:Class ;
        rdfs:comment     "A DESCRIBE-type Query." ;
        rdfs:label       "Describe"^^xsd:string ;
        rdfs:subClassOf  sp:Query .

sp:Query  a              rdfs:Class ;
        rdfs:comment     "Abstract base class of the various types of supported queries. Common to all types of queries is that they can have a body (\"WHERE clause\")." ;
        rdfs:label       "Query"^^xsd:string ;
        rdfs:subClassOf  sp:Command .

sp:Optional  a           rdfs:Class ;
        rdfs:comment     "An optional element in a query." ;
        rdfs:label       "Optional"^^xsd:string ;
        rdfs:subClassOf  sp:ElementGroup .

sp:Asc  a                rdfs:Class ;
        rdfs:comment     "Marker to indicate ascending order." ;
        rdfs:label       "Asc"^^xsd:string ;
        rdfs:subClassOf  sp:OrderByCondition .

sp:insertPattern  a         rdf:Property ;
        rdfs:comment        "Points to a list of sp:TripleTemplates or sp:NamedGraphs in a modify command."^^xsd:string ;
        rdfs:domain         sp:Modify ;
        rdfs:label          "insert pattern"^^xsd:string ;
        rdfs:range          rdf:List ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:with  a                  rdf:Property ;
        rdfs:domain         sp:Modify ;
        rdfs:label          "with"^^xsd:string ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:query  a                 rdf:Property ;
        rdfs:comment        "Links a SubQuery resource with the nested Query."^^xsd:string ;
        rdfs:domain         sp:SubQuery ;
        rdfs:label          "query"^^xsd:string ;
        rdfs:range          sp:Query ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:Max  a                rdfs:Class ;
        rdfs:comment     "Represents MAX aggregations."^^xsd:string ;
        rdfs:label       "MAX"^^xsd:string ;
        rdfs:subClassOf  sp:Aggregation .

<http://spinrdf.org/sp>
        a                owl:Ontology ;
        rdfs:comment     "An RDF schema to syntactically represent SPARQL queries and update commands as RDF triples."^^xsd:string ;
        rdfs:label       "SPIN SPARQL Syntax"^^xsd:string ;
        owl:versionInfo  "1.5.0"^^xsd:string .

sp:Triple  a             rdfs:Class ;
        rdfs:comment     "A base class for TriplePattern and TripleTemplate. This basically specifies that subject, predicate and object must be present."^^xsd:string ;
        rdfs:label       "Triple"^^xsd:string ;
        rdfs:subClassOf  sp:Tuple .

sp:usingNamed  a            rdf:Property ;
        rdfs:domain         sp:Modify ;
        rdfs:label          "using named"^^xsd:string ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:default  a               rdf:Property ;
        rdfs:comment        "Used in DROP and CLEAR."^^xsd:string ;
        rdfs:label          "default"^^xsd:string ;
        rdfs:range          xsd:boolean ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:path  a                  rdf:Property ;
        rdfs:comment        "Points from a TriplePath to its path." ;
        rdfs:domain         sp:TriplePath ;
        rdfs:label          "path"^^xsd:string ;
        rdfs:range          sp:Path ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:arg3  a                  rdf:Property ;
        rdfs:comment        "The third argument of a function call." ;
        rdfs:label          "arg3"^^xsd:string ;
        rdfs:subPropertyOf  sp:arg .

sp:serviceURI  a            rdf:Property ;
        rdfs:comment        "Used by sp:Service to specify the URI of the SPARQL end point to invoke. Must point to a URI node."^^xsd:string ;
        rdfs:domain         sp:Service ;
        rdfs:label          "service URI"^^xsd:string ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:Path  a               rdfs:Class ;
        rdfs:comment     "The base class of SPARQL property path expressions. Paths are used by sp:TriplePath triple paths." ;
        rdfs:label       "Path"^^xsd:string ;
        rdfs:subClassOf  sp:SystemClass .

sp:graphIRI  a              rdf:Property ;
        rdfs:comment        "Points to graph names (IRIs) in various sp:Update operations."^^xsd:string ;
        rdfs:label          "graph IRI"^^xsd:string ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:ElementList  a        rdfs:Class ;
        rdfs:comment     "A list of Elements. This class is never instantiated directly as SPIN will use plain rdf:Lists to store element lists." ;
        rdfs:label       "Element list"^^xsd:string ;
        rdfs:subClassOf  sp:ElementGroup , rdf:List .

sp:Variable  a           rdfs:Class ;
        rdfs:comment     "A variable mentioned in a Triple or expression. Variables are often blank nodes with the variable name stored in ts:name. Variables can also be supplied with a URI in which case the system will attempt to reuse the same variable instance across multiple query definitions." ;
        rdfs:label       "Variable"^^xsd:string ;
        rdfs:subClassOf  sp:SystemClass .

sp:into  a                  rdf:Property ;
        rdfs:comment        "The (optional) target of a LOAD Update operation."^^xsd:string ;
        rdfs:domain         sp:Load ;
        rdfs:label          "into"^^xsd:string ;
        rdfs:range          rdfs:Resource ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:Min  a                rdfs:Class ;
        rdfs:comment     "Represents MIN aggregations."^^xsd:string ;
        rdfs:label       "MIN"^^xsd:string ;
        rdfs:subClassOf  sp:Aggregation .

sp:variable  a              rdf:Property ;
        rdfs:comment        "The variable of a Bind element."^^xsd:string ;
        rdfs:domain         sp:Bind ;
        rdfs:label          "variable"^^xsd:string ;
        rdfs:range          sp:Variable ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:Create  a             rdfs:Class ;
        rdfs:comment     "An Update operation that creates a new empty graph with a name specified by sp:graphIRI. May have sp:silent set to true."^^xsd:string ;
        rdfs:label       "Create"^^xsd:string ;
        rdfs:subClassOf  sp:Update .

sp:SubQuery  a           rdfs:Class ;
        rdfs:comment     "A nested SELECT query inside of an element list. The query is stored in sp:query."^^xsd:string ;
        rdfs:label       "Sub query"^^xsd:string ;
        rdfs:subClassOf  sp:Element .

sp:TriplePattern  a      rdfs:Class ;
        rdfs:comment     "A triple pattern used in the body of a query." ;
        rdfs:label       "Triple pattern"^^xsd:string ;
        rdfs:subClassOf  sp:Element , sp:Triple .

sp:InsertData  a         rdfs:Class ;
        rdfs:comment     "An Update operation to insert specific triples. The graph triples are represented using sp:data, which points to an rdf:List of sp:Triples or sp:NamedGraphs."^^xsd:string ;
        rdfs:label       "Insert data"^^xsd:string ;
        rdfs:subClassOf  sp:Update .

sp:arg2  a                  rdf:Property ;
        rdfs:comment        "The second argument of a function call." ;
        rdfs:label          "arg2"^^xsd:string ;
        rdfs:subPropertyOf  sp:arg .

sp:ElementGroup  a       rdfs:Class ;
        rdfs:comment     "Abstract base class of group patterns." ;
        rdfs:label       "Element group"^^xsd:string ;
        rdfs:subClassOf  sp:Element .

sp:resultVariables  a       rdf:Property ;
        rdfs:comment        "An rdf:List of variables that are returned by a Select query." ;
        rdfs:domain         sp:Select ;
        rdfs:label          "result variables"^^xsd:string ;
        rdfs:range          rdf:List ;
        rdfs:subPropertyOf  sp:systemProperty .

sp:named  a                 rdf:Property ;
        rdfs:comment        "Used in DROP and CLEAR."^^xsd:string ;
        rdfs:label          "named"^^xsd:string ;
        rdfs:range          xsd:boolean ;
        rdfs:subPropertyOf  sp:systemProperty .
