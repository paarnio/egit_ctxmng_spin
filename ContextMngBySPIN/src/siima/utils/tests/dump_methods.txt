
	public OntModel test() {
		//VPA: 2016-02-15 See MyBicycleWithImports.java test-case
		//Voi kokeilla vain bicycle+accessories KB:n luontiin.
		//TOIMII jotenkin, Mutta reasoner-model luonnin yhteydessä tulee valituksia
		//An error occurred while attempting to read from http://siima.net/ont/accessories. 
		//Msg was 'java.net.UnknownHostException: siima.net'.
		
		/* --- Main ontology --- */
		String ont_folder = "data/models/importing_models"; 
		
		String main_ont_file= "bicycle.ttl"; 
		String main_ont_url="http://siima.net/ont/bicycle"; 
		
		//altlocs.add(ont_folder + "/" + main_ont_file);
		//urls.add(main_ont_url);
		
		/* --- Imported ontologies --- */		
		String imp_ont_file="accessories.ttl"; 
		String imp_ont_url= "http://siima.net/ont/accessories"; 
		
		//altlocs.add(ont_folder + "/" + imp_ont_file);
		//urls.add(imp_ont_url);
		
		// Create a doc manager / modelspec to resolve imports
	    final OntDocumentManager docManager = new OntDocumentManager();
	    final OntModelSpec modelSpec = new OntModelSpec(OntModelSpec.OWL_DL_MEM);
	    //VPA: KOE: REASONER CAN NOT BE SET HERE
	    //Reasoner reasoner = ReasonerRegistry.getOWLReasoner();
	    //modelSpec.setReasoner(reasoner);
	    //
	    modelSpec.setDocumentManager(docManager);
	    
	    /* **************
	     * 
	     *  imported Model
	     * 
	     */

	    // Create an imported model that can be referenced by the docManager
	    final OntModel imprt = ModelFactory.createOntologyModel(modelSpec);
	    
	    //docManager.addModel("x-model://a", imprt);
	    docManager.addModel(imp_ont_url, imprt);
	    
	    // Populate imported model with some content
	    //final Ontology imprtOnt = imprt.createOntology("x-model://a");
	    //final OntClass clazz = imprt.createClass("x-model://a/class");
	    //assertTrue("delcared class should exist in a", imprt.contains(clazz, RDF.type, OWL.Class));
	    
	    //VPA: from:http://answers.semanticweb.com/questions/14955/read-a-turtle-file-into-an-ontmodel
	    InputStream is;
		try {
			is = new BufferedInputStream(new FileInputStream(ont_folder+"/"+imp_ont_file));
		
	    imprt.read(is,imp_ont_url, "TURTLE");
	    
	    System.out.println("x-model://a before (Import Model)");
	    System.out.println("-------------------------------------------");
	    //imprt.write(System.out, "N3");
	    System.out.println("\n");
	    
	    
	    /* **************
	     * 
	     *  Main Model
	     * 
	     */
	    
	    
	    // Create a model which imports x-model://a
	    final OntModel model = ModelFactory.createOntologyModel(modelSpec);
	    model.setDynamicImports(true); //VPA: OPTION?
	   // final Ontology modelOnt = model.createOntology("x-model://b");
	   // modelOnt.addImport(imprtOnt);
	    
	    is = new BufferedInputStream(new FileInputStream(ont_folder+"/"+main_ont_file));		
	    model.read(is,main_ont_url, "TURTLE");
	    
	    System.out.println("x-model://b before (Main Model Before import)");
	    System.out.println("-------------------------------------------");
	   // model.write(System.out, "N3");
	    System.out.println("\n");	    
	    
	    //assertTrue("import b->a does (??not) exist", model.hasLoadedImport(imp_ont_url));
	    
	    System.out.println("\n Has Import? " + model.hasLoadedImport(imp_ont_url));	    
	    
	    /*****
	     * 
	     * VPA Add subModel
	     * 
	     */
	    
	    model.addSubModel(imprt, true); ////VPA: OPTION? rebind - If true, rebind any associated inferencing engine to the new data (which may be an expensive operation)
	    
	    System.out.println("x-model://b (Main Model After SubModel loading)");
	    System.out.println("-------------------------------------------");
	    //model.write(System.out, "N3");
	    System.out.println("\n");	 
	    
	    /*
	     * Write ALL also submodel
	     * 
	     */
	    
	    System.out.println("x-model://b (Main Model with the loaded SubModel)");
	    System.out.println("-------------------------------------------");
	    //model.writeAll(System.out, "N3"); //writeAll()
	    System.out.println("\n");	 
	    
	    // RETURN
	    return model;
	    
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    return null;
	}
	
	
	
	
	public OntModel loadModelWithSubModels(List<String> urls, List<String> altlocs) {
	/* VPA: 2016-02-15 See MyBicycleWithImports.java test-case 
	 * TODO: EI TOIMI -> joten kokeilin test() methodilla -> edelleen ongelmia resoner mallia luotaessa.
	 * VPA: SubModels need to be loaded first??
	 * ELSE: An error occurred while attempting to read from http://siima.net/ont/accessories. 
	 * Msg was 'java.net.UnknownHostException: siima.net'.
	 * 
	 * */
		InputStream is;
		// Create a doc manager / modelspec to resolve imports
	    final OntDocumentManager docManager = new OntDocumentManager();
	    final OntModelSpec modelSpec = new OntModelSpec(OntModelSpec.OWL_DL_MEM);
	    
	    modelSpec.setDocumentManager(docManager);

	    OntModel imprt=null;
	    	
		for (int i = 1; i < urls.size(); i++) { //Note: start from index=1
			//(urls.get(i), altlocs.get(i));
			 // Create an imported model that can be referenced by the docManager
		    imprt = ModelFactory.createOntologyModel(modelSpec);
		    docManager.addModel(urls.get(i), imprt);
		    try {
				is = new BufferedInputStream(new FileInputStream(altlocs.get(i)));
			
			imprt.read(is,urls.get(i), "TURTLE");
		    } catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		    System.out.println("(Load SubModel n:o (" + i + "))");
		    System.out.println("-------------------------------------------");
		    
		}
		
		 // Create a basemodel 
	    final OntModel baseModel = ModelFactory.createOntologyModel(modelSpec);
	    baseModel.setDynamicImports(true); //VPA: OPTION?
	try {  		    
	    is = new BufferedInputStream(new FileInputStream(altlocs.get(0)));		
	    baseModel.read(is,urls.get(0), "TURTLE");
	    
	    System.out.println("(Base Model Before imports)");
	    System.out.println("-------------------------------------------");
	    
	    baseModel.addSubModel(imprt, true);
		
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    return baseModel;
	}
	
//	public OntModel loadModelWithImports(String url) {
		/*
		 * from OWLRLExample.java For reading imported ontologies from
		 * url-locations. VPA: Using this method, imported ontologies cannot be
		 * read from files (only from url's). From file loading use the other method:
		 * loadModelWithImports(List<String> urls, List<String> altlocs)
		 */
/*
		Model baseModel = ModelFactory.createDefaultModel();
		baseModel.read(url);
		return JenaUtil.createOntologyModel(OntModelSpec.OWL_DL_MEM, baseModel);
	}
*/
	